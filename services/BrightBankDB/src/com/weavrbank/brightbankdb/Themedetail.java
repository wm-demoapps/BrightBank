/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Themedetail generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`themedetail`")
public class Themedetail implements Serializable {

    private Integer id;
    private int csspropertyId;
    private String cssvalue;
    private int themetypeId;
    private Cssproperty cssproperty;
    private Themetype themetype;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`cssproperty_id`", nullable = false, scale = 0, precision = 10)
    public int getCsspropertyId() {
        return this.csspropertyId;
    }

    public void setCsspropertyId(int csspropertyId) {
        this.csspropertyId = csspropertyId;
    }

    @Column(name = "`cssvalue`", nullable = true, length = 255)
    public String getCssvalue() {
        return this.cssvalue;
    }

    public void setCssvalue(String cssvalue) {
        this.cssvalue = cssvalue;
    }

    @Column(name = "`themetype_id`", nullable = false, scale = 0, precision = 10)
    public int getThemetypeId() {
        return this.themetypeId;
    }

    public void setThemetypeId(int themetypeId) {
        this.themetypeId = themetypeId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`cssproperty_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Props_TO_themedetailsu8g9P`"))
    @Fetch(FetchMode.JOIN)
    public Cssproperty getCssproperty() {
        return this.cssproperty;
    }

    public void setCssproperty(Cssproperty cssproperty) {
        if(cssproperty != null) {
            this.csspropertyId = cssproperty.getId();
        }

        this.cssproperty = cssproperty;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`themetype_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ThemeMode_TO_themedetun39j`"))
    @Fetch(FetchMode.JOIN)
    public Themetype getThemetype() {
        return this.themetype;
    }

    public void setThemetype(Themetype themetype) {
        if(themetype != null) {
            this.themetypeId = themetype.getId();
        }

        this.themetype = themetype;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Themedetail)) return false;
        final Themedetail themedetail = (Themedetail) o;
        return Objects.equals(getId(), themedetail.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

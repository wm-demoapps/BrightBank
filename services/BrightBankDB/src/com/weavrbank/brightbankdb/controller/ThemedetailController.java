/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.Themedetail;
import com.weavrbank.brightbankdb.service.ThemedetailService;


/**
 * Controller object for domain model class Themedetail.
 * @see Themedetail
 */
@RestController("BrightBankDB.ThemedetailController")
@Api(value = "ThemedetailController", description = "Exposes APIs to work with Themedetail resource.")
@RequestMapping("/BrightBankDB/Themedetail")
public class ThemedetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThemedetailController.class);

    @Autowired
	@Qualifier("BrightBankDB.ThemedetailService")
	private ThemedetailService themedetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Themedetail instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themedetail createThemedetail(@RequestBody Themedetail themedetail) {
		LOGGER.debug("Create Themedetail with information: {}" , themedetail);

		themedetail = themedetailService.create(themedetail);
		LOGGER.debug("Created Themedetail with information: {}" , themedetail);

	    return themedetail;
	}

    @ApiOperation(value = "Returns the Themedetail instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themedetail getThemedetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Themedetail with id: {}" , id);

        Themedetail foundThemedetail = themedetailService.getById(id);
        LOGGER.debug("Themedetail details with id: {}" , foundThemedetail);

        return foundThemedetail;
    }

    @ApiOperation(value = "Updates the Themedetail instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themedetail editThemedetail(@PathVariable("id") Integer id, @RequestBody Themedetail themedetail) {
        LOGGER.debug("Editing Themedetail with id: {}" , themedetail.getId());

        themedetail.setId(id);
        themedetail = themedetailService.update(themedetail);
        LOGGER.debug("Themedetail details with id: {}" , themedetail);

        return themedetail;
    }
    
    @ApiOperation(value = "Partially updates the Themedetail instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themedetail patchThemedetail(@PathVariable("id") Integer id, @RequestBody @MapTo(Themedetail.class) Map<String, Object> themedetailPatch) {
        LOGGER.debug("Partially updating Themedetail with id: {}" , id);

        Themedetail themedetail = themedetailService.partialUpdate(id, themedetailPatch);
        LOGGER.debug("Themedetail details after partial update: {}" , themedetail);

        return themedetail;
    }

    @ApiOperation(value = "Deletes the Themedetail instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteThemedetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Themedetail with id: {}" , id);

        Themedetail deletedThemedetail = themedetailService.delete(id);

        return deletedThemedetail != null;
    }

    /**
     * @deprecated Use {@link #findThemedetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Themedetail instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themedetail> searchThemedetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Themedetails list by query filter:{}", (Object) queryFilters);
        return themedetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Themedetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themedetail> findThemedetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Themedetails list by filter:", query);
        return themedetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Themedetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themedetail> filterThemedetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Themedetails list by filter", query);
        return themedetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportThemedetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return themedetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportThemedetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Themedetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> themedetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Themedetail instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countThemedetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Themedetails");
		return themedetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getThemedetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return themedetailService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ThemedetailService instance
	 */
	protected void setThemedetailService(ThemedetailService service) {
		this.themedetailService = service;
	}

}

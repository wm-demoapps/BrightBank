/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.SavingFrequency;
import com.weavrbank.brightbankdb.WealthGoals;
import com.weavrbank.brightbankdb.service.SavingFrequencyService;


/**
 * Controller object for domain model class SavingFrequency.
 * @see SavingFrequency
 */
@RestController("BrightBankDB.SavingFrequencyController")
@Api(value = "SavingFrequencyController", description = "Exposes APIs to work with SavingFrequency resource.")
@RequestMapping("/BrightBankDB/SavingFrequency")
public class SavingFrequencyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SavingFrequencyController.class);

    @Autowired
	@Qualifier("BrightBankDB.SavingFrequencyService")
	private SavingFrequencyService savingFrequencyService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SavingFrequency instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SavingFrequency createSavingFrequency(@RequestBody SavingFrequency savingFrequency) {
		LOGGER.debug("Create SavingFrequency with information: {}" , savingFrequency);

		savingFrequency = savingFrequencyService.create(savingFrequency);
		LOGGER.debug("Created SavingFrequency with information: {}" , savingFrequency);

	    return savingFrequency;
	}

    @ApiOperation(value = "Returns the SavingFrequency instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SavingFrequency getSavingFrequency(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SavingFrequency with id: {}" , id);

        SavingFrequency foundSavingFrequency = savingFrequencyService.getById(id);
        LOGGER.debug("SavingFrequency details with id: {}" , foundSavingFrequency);

        return foundSavingFrequency;
    }

    @ApiOperation(value = "Updates the SavingFrequency instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SavingFrequency editSavingFrequency(@PathVariable("id") Integer id, @RequestBody SavingFrequency savingFrequency) {
        LOGGER.debug("Editing SavingFrequency with id: {}" , savingFrequency.getId());

        savingFrequency.setId(id);
        savingFrequency = savingFrequencyService.update(savingFrequency);
        LOGGER.debug("SavingFrequency details with id: {}" , savingFrequency);

        return savingFrequency;
    }
    
    @ApiOperation(value = "Partially updates the SavingFrequency instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SavingFrequency patchSavingFrequency(@PathVariable("id") Integer id, @RequestBody @MapTo(SavingFrequency.class) Map<String, Object> savingFrequencyPatch) {
        LOGGER.debug("Partially updating SavingFrequency with id: {}" , id);

        SavingFrequency savingFrequency = savingFrequencyService.partialUpdate(id, savingFrequencyPatch);
        LOGGER.debug("SavingFrequency details after partial update: {}" , savingFrequency);

        return savingFrequency;
    }

    @ApiOperation(value = "Deletes the SavingFrequency instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSavingFrequency(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SavingFrequency with id: {}" , id);

        SavingFrequency deletedSavingFrequency = savingFrequencyService.delete(id);

        return deletedSavingFrequency != null;
    }

    @GetMapping(value = "/name/{name}" )
    @ApiOperation(value = "Returns the matching SavingFrequency with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SavingFrequency getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting SavingFrequency with uniques key Name");
        return savingFrequencyService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findSavingFrequencies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SavingFrequency instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SavingFrequency> searchSavingFrequenciesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SavingFrequencies list by query filter:{}", (Object) queryFilters);
        return savingFrequencyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SavingFrequency instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SavingFrequency> findSavingFrequencies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SavingFrequencies list by filter:", query);
        return savingFrequencyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SavingFrequency instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SavingFrequency> filterSavingFrequencies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SavingFrequencies list by filter", query);
        return savingFrequencyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSavingFrequencies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return savingFrequencyService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSavingFrequenciesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SavingFrequency.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> savingFrequencyService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SavingFrequency instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSavingFrequencies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SavingFrequencies");
		return savingFrequencyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSavingFrequencyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return savingFrequencyService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/wealthGoalses")
    @ApiOperation(value = "Gets the wealthGoalses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WealthGoals> findAssociatedWealthGoalses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated wealthGoalses");
        return savingFrequencyService.findAssociatedWealthGoalses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SavingFrequencyService instance
	 */
	protected void setSavingFrequencyService(SavingFrequencyService service) {
		this.savingFrequencyService = service;
	}

}

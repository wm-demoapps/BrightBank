/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.Cssproperty;
import com.weavrbank.brightbankdb.Themedetail;
import com.weavrbank.brightbankdb.service.CsspropertyService;


/**
 * Controller object for domain model class Cssproperty.
 * @see Cssproperty
 */
@RestController("BrightBankDB.CsspropertyController")
@Api(value = "CsspropertyController", description = "Exposes APIs to work with Cssproperty resource.")
@RequestMapping("/BrightBankDB/Cssproperty")
public class CsspropertyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsspropertyController.class);

    @Autowired
	@Qualifier("BrightBankDB.CsspropertyService")
	private CsspropertyService csspropertyService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Cssproperty instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cssproperty createCssproperty(@RequestBody Cssproperty cssproperty) {
		LOGGER.debug("Create Cssproperty with information: {}" , cssproperty);

		cssproperty = csspropertyService.create(cssproperty);
		LOGGER.debug("Created Cssproperty with information: {}" , cssproperty);

	    return cssproperty;
	}

    @ApiOperation(value = "Returns the Cssproperty instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cssproperty getCssproperty(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Cssproperty with id: {}" , id);

        Cssproperty foundCssproperty = csspropertyService.getById(id);
        LOGGER.debug("Cssproperty details with id: {}" , foundCssproperty);

        return foundCssproperty;
    }

    @ApiOperation(value = "Updates the Cssproperty instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cssproperty editCssproperty(@PathVariable("id") Integer id, @RequestBody Cssproperty cssproperty) {
        LOGGER.debug("Editing Cssproperty with id: {}" , cssproperty.getId());

        cssproperty.setId(id);
        cssproperty = csspropertyService.update(cssproperty);
        LOGGER.debug("Cssproperty details with id: {}" , cssproperty);

        return cssproperty;
    }
    
    @ApiOperation(value = "Partially updates the Cssproperty instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cssproperty patchCssproperty(@PathVariable("id") Integer id, @RequestBody @MapTo(Cssproperty.class) Map<String, Object> csspropertyPatch) {
        LOGGER.debug("Partially updating Cssproperty with id: {}" , id);

        Cssproperty cssproperty = csspropertyService.partialUpdate(id, csspropertyPatch);
        LOGGER.debug("Cssproperty details after partial update: {}" , cssproperty);

        return cssproperty;
    }

    @ApiOperation(value = "Deletes the Cssproperty instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCssproperty(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Cssproperty with id: {}" , id);

        Cssproperty deletedCssproperty = csspropertyService.delete(id);

        return deletedCssproperty != null;
    }

    /**
     * @deprecated Use {@link #findCssproperties(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Cssproperty instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cssproperty> searchCsspropertiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Cssproperties list by query filter:{}", (Object) queryFilters);
        return csspropertyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cssproperty instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cssproperty> findCssproperties(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cssproperties list by filter:", query);
        return csspropertyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cssproperty instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cssproperty> filterCssproperties(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cssproperties list by filter", query);
        return csspropertyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCssproperties(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return csspropertyService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCsspropertiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Cssproperty.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> csspropertyService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Cssproperty instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCssproperties( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Cssproperties");
		return csspropertyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCsspropertyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return csspropertyService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/themedetails")
    @ApiOperation(value = "Gets the themedetails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themedetail> findAssociatedThemedetails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated themedetails");
        return csspropertyService.findAssociatedThemedetails(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CsspropertyService instance
	 */
	protected void setCsspropertyService(CsspropertyService service) {
		this.csspropertyService = service;
	}

}

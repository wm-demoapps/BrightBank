/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.Themedetail;
import com.weavrbank.brightbankdb.Themetype;
import com.weavrbank.brightbankdb.service.ThemetypeService;


/**
 * Controller object for domain model class Themetype.
 * @see Themetype
 */
@RestController("BrightBankDB.ThemetypeController")
@Api(value = "ThemetypeController", description = "Exposes APIs to work with Themetype resource.")
@RequestMapping("/BrightBankDB/Themetype")
public class ThemetypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThemetypeController.class);

    @Autowired
	@Qualifier("BrightBankDB.ThemetypeService")
	private ThemetypeService themetypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Themetype instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themetype createThemetype(@RequestBody Themetype themetype) {
		LOGGER.debug("Create Themetype with information: {}" , themetype);

		themetype = themetypeService.create(themetype);
		LOGGER.debug("Created Themetype with information: {}" , themetype);

	    return themetype;
	}

    @ApiOperation(value = "Returns the Themetype instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themetype getThemetype(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Themetype with id: {}" , id);

        Themetype foundThemetype = themetypeService.getById(id);
        LOGGER.debug("Themetype details with id: {}" , foundThemetype);

        return foundThemetype;
    }

    @ApiOperation(value = "Updates the Themetype instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themetype editThemetype(@PathVariable("id") Integer id, @RequestBody Themetype themetype) {
        LOGGER.debug("Editing Themetype with id: {}" , themetype.getId());

        themetype.setId(id);
        themetype = themetypeService.update(themetype);
        LOGGER.debug("Themetype details with id: {}" , themetype);

        return themetype;
    }
    
    @ApiOperation(value = "Partially updates the Themetype instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Themetype patchThemetype(@PathVariable("id") Integer id, @RequestBody @MapTo(Themetype.class) Map<String, Object> themetypePatch) {
        LOGGER.debug("Partially updating Themetype with id: {}" , id);

        Themetype themetype = themetypeService.partialUpdate(id, themetypePatch);
        LOGGER.debug("Themetype details after partial update: {}" , themetype);

        return themetype;
    }

    @ApiOperation(value = "Deletes the Themetype instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteThemetype(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Themetype with id: {}" , id);

        Themetype deletedThemetype = themetypeService.delete(id);

        return deletedThemetype != null;
    }

    /**
     * @deprecated Use {@link #findThemetypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Themetype instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themetype> searchThemetypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Themetypes list by query filter:{}", (Object) queryFilters);
        return themetypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Themetype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themetype> findThemetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Themetypes list by filter:", query);
        return themetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Themetype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themetype> filterThemetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Themetypes list by filter", query);
        return themetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportThemetypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return themetypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportThemetypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Themetype.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> themetypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Themetype instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countThemetypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Themetypes");
		return themetypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getThemetypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return themetypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/themedetails")
    @ApiOperation(value = "Gets the themedetails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Themedetail> findAssociatedThemedetails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated themedetails");
        return themetypeService.findAssociatedThemedetails(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ThemetypeService instance
	 */
	protected void setThemetypeService(ThemetypeService service) {
		this.themetypeService = service;
	}

}

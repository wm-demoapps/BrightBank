/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.AccountPreferences;
import com.weavrbank.brightbankdb.service.AccountPreferencesService;


/**
 * Controller object for domain model class AccountPreferences.
 * @see AccountPreferences
 */
@RestController("BrightBankDB.AccountPreferencesController")
@Api(value = "AccountPreferencesController", description = "Exposes APIs to work with AccountPreferences resource.")
@RequestMapping("/BrightBankDB/AccountPreferences")
public class AccountPreferencesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountPreferencesController.class);

    @Autowired
	@Qualifier("BrightBankDB.AccountPreferencesService")
	private AccountPreferencesService accountPreferencesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AccountPreferences instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountPreferences createAccountPreferences(@RequestBody AccountPreferences accountPreferences) {
		LOGGER.debug("Create AccountPreferences with information: {}" , accountPreferences);

		accountPreferences = accountPreferencesService.create(accountPreferences);
		LOGGER.debug("Created AccountPreferences with information: {}" , accountPreferences);

	    return accountPreferences;
	}

    @ApiOperation(value = "Returns the AccountPreferences instance associated with the given id.")
    @GetMapping(value = "/{accountId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountPreferences getAccountPreferences(@PathVariable("accountId") String accountId) {
        LOGGER.debug("Getting AccountPreferences with id: {}" , accountId);

        AccountPreferences foundAccountPreferences = accountPreferencesService.getById(accountId);
        LOGGER.debug("AccountPreferences details with id: {}" , foundAccountPreferences);

        return foundAccountPreferences;
    }

    @ApiOperation(value = "Updates the AccountPreferences instance associated with the given id.")
    @PutMapping(value = "/{accountId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountPreferences editAccountPreferences(@PathVariable("accountId") String accountId, @RequestBody AccountPreferences accountPreferences) {
        LOGGER.debug("Editing AccountPreferences with id: {}" , accountPreferences.getAccountId());

        accountPreferences.setAccountId(accountId);
        accountPreferences = accountPreferencesService.update(accountPreferences);
        LOGGER.debug("AccountPreferences details with id: {}" , accountPreferences);

        return accountPreferences;
    }
    
    @ApiOperation(value = "Partially updates the AccountPreferences instance associated with the given id.")
    @PatchMapping(value = "/{accountId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountPreferences patchAccountPreferences(@PathVariable("accountId") String accountId, @RequestBody @MapTo(AccountPreferences.class) Map<String, Object> accountPreferencesPatch) {
        LOGGER.debug("Partially updating AccountPreferences with id: {}" , accountId);

        AccountPreferences accountPreferences = accountPreferencesService.partialUpdate(accountId, accountPreferencesPatch);
        LOGGER.debug("AccountPreferences details after partial update: {}" , accountPreferences);

        return accountPreferences;
    }

    @ApiOperation(value = "Deletes the AccountPreferences instance associated with the given id.")
    @DeleteMapping(value = "/{accountId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccountPreferences(@PathVariable("accountId") String accountId) {
        LOGGER.debug("Deleting AccountPreferences with id: {}" , accountId);

        AccountPreferences deletedAccountPreferences = accountPreferencesService.delete(accountId);

        return deletedAccountPreferences != null;
    }

    /**
     * @deprecated Use {@link #findAccountPreferences(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AccountPreferences instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountPreferences> searchAccountPreferencesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccountPreferences list by query filter:{}", (Object) queryFilters);
        return accountPreferencesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountPreferences instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountPreferences> findAccountPreferences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountPreferences list by filter:", query);
        return accountPreferencesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountPreferences instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountPreferences> filterAccountPreferences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountPreferences list by filter", query);
        return accountPreferencesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccountPreferences(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accountPreferencesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAccountPreferencesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AccountPreferences.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> accountPreferencesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AccountPreferences instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccountPreferences( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AccountPreferences");
		return accountPreferencesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccountPreferencesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accountPreferencesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountPreferencesService instance
	 */
	protected void setAccountPreferencesService(AccountPreferencesService service) {
		this.accountPreferencesService = service;
	}

}

/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.GoalTransactions;
import com.weavrbank.brightbankdb.WealthGoals;
import com.weavrbank.brightbankdb.service.WealthGoalsService;


/**
 * Controller object for domain model class WealthGoals.
 * @see WealthGoals
 */
@RestController("BrightBankDB.WealthGoalsController")
@Api(value = "WealthGoalsController", description = "Exposes APIs to work with WealthGoals resource.")
@RequestMapping("/BrightBankDB/WealthGoals")
public class WealthGoalsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WealthGoalsController.class);

    @Autowired
	@Qualifier("BrightBankDB.WealthGoalsService")
	private WealthGoalsService wealthGoalsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new WealthGoals instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WealthGoals createWealthGoals(@RequestBody WealthGoals wealthGoals) {
		LOGGER.debug("Create WealthGoals with information: {}" , wealthGoals);

		wealthGoals = wealthGoalsService.create(wealthGoals);
		LOGGER.debug("Created WealthGoals with information: {}" , wealthGoals);

	    return wealthGoals;
	}

    @ApiOperation(value = "Returns the WealthGoals instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WealthGoals getWealthGoals(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting WealthGoals with id: {}" , id);

        WealthGoals foundWealthGoals = wealthGoalsService.getById(id);
        LOGGER.debug("WealthGoals details with id: {}" , foundWealthGoals);

        return foundWealthGoals;
    }

    @ApiOperation(value = "Updates the WealthGoals instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WealthGoals editWealthGoals(@PathVariable("id") Integer id, @RequestBody WealthGoals wealthGoals) {
        LOGGER.debug("Editing WealthGoals with id: {}" , wealthGoals.getId());

        wealthGoals.setId(id);
        wealthGoals = wealthGoalsService.update(wealthGoals);
        LOGGER.debug("WealthGoals details with id: {}" , wealthGoals);

        return wealthGoals;
    }
    
    @ApiOperation(value = "Partially updates the WealthGoals instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WealthGoals patchWealthGoals(@PathVariable("id") Integer id, @RequestBody @MapTo(WealthGoals.class) Map<String, Object> wealthGoalsPatch) {
        LOGGER.debug("Partially updating WealthGoals with id: {}" , id);

        WealthGoals wealthGoals = wealthGoalsService.partialUpdate(id, wealthGoalsPatch);
        LOGGER.debug("WealthGoals details after partial update: {}" , wealthGoals);

        return wealthGoals;
    }

    @ApiOperation(value = "Deletes the WealthGoals instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWealthGoals(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting WealthGoals with id: {}" , id);

        WealthGoals deletedWealthGoals = wealthGoalsService.delete(id);

        return deletedWealthGoals != null;
    }

    /**
     * @deprecated Use {@link #findWealthGoals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of WealthGoals instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WealthGoals> searchWealthGoalsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering WealthGoals list by query filter:{}", (Object) queryFilters);
        return wealthGoalsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WealthGoals instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WealthGoals> findWealthGoals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WealthGoals list by filter:", query);
        return wealthGoalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WealthGoals instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WealthGoals> filterWealthGoals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WealthGoals list by filter", query);
        return wealthGoalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWealthGoals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return wealthGoalsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportWealthGoalsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = WealthGoals.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> wealthGoalsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of WealthGoals instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWealthGoals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WealthGoals");
		return wealthGoalsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWealthGoalsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return wealthGoalsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/goalTransactionses")
    @ApiOperation(value = "Gets the goalTransactionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GoalTransactions> findAssociatedGoalTransactionses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated goalTransactionses");
        return wealthGoalsService.findAssociatedGoalTransactionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WealthGoalsService instance
	 */
	protected void setWealthGoalsService(WealthGoalsService service) {
		this.wealthGoalsService = service;
	}

}

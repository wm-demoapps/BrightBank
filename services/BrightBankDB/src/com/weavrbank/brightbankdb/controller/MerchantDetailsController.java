/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.MerchantDetails;
import com.weavrbank.brightbankdb.service.MerchantDetailsService;


/**
 * Controller object for domain model class MerchantDetails.
 * @see MerchantDetails
 */
@RestController("BrightBankDB.MerchantDetailsController")
@Api(value = "MerchantDetailsController", description = "Exposes APIs to work with MerchantDetails resource.")
@RequestMapping("/BrightBankDB/MerchantDetails")
public class MerchantDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MerchantDetailsController.class);

    @Autowired
	@Qualifier("BrightBankDB.MerchantDetailsService")
	private MerchantDetailsService merchantDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new MerchantDetails instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MerchantDetails createMerchantDetails(@RequestBody MerchantDetails merchantDetails) {
		LOGGER.debug("Create MerchantDetails with information: {}" , merchantDetails);

		merchantDetails = merchantDetailsService.create(merchantDetails);
		LOGGER.debug("Created MerchantDetails with information: {}" , merchantDetails);

	    return merchantDetails;
	}

    @ApiOperation(value = "Returns the MerchantDetails instance associated with the given id.")
    @GetMapping(value = "/{merchantId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MerchantDetails getMerchantDetails(@PathVariable("merchantId") Integer merchantId) {
        LOGGER.debug("Getting MerchantDetails with id: {}" , merchantId);

        MerchantDetails foundMerchantDetails = merchantDetailsService.getById(merchantId);
        LOGGER.debug("MerchantDetails details with id: {}" , foundMerchantDetails);

        return foundMerchantDetails;
    }

    @ApiOperation(value = "Updates the MerchantDetails instance associated with the given id.")
    @PutMapping(value = "/{merchantId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MerchantDetails editMerchantDetails(@PathVariable("merchantId") Integer merchantId, @RequestBody MerchantDetails merchantDetails) {
        LOGGER.debug("Editing MerchantDetails with id: {}" , merchantDetails.getMerchantId());

        merchantDetails.setMerchantId(merchantId);
        merchantDetails = merchantDetailsService.update(merchantDetails);
        LOGGER.debug("MerchantDetails details with id: {}" , merchantDetails);

        return merchantDetails;
    }
    
    @ApiOperation(value = "Partially updates the MerchantDetails instance associated with the given id.")
    @PatchMapping(value = "/{merchantId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MerchantDetails patchMerchantDetails(@PathVariable("merchantId") Integer merchantId, @RequestBody @MapTo(MerchantDetails.class) Map<String, Object> merchantDetailsPatch) {
        LOGGER.debug("Partially updating MerchantDetails with id: {}" , merchantId);

        MerchantDetails merchantDetails = merchantDetailsService.partialUpdate(merchantId, merchantDetailsPatch);
        LOGGER.debug("MerchantDetails details after partial update: {}" , merchantDetails);

        return merchantDetails;
    }

    @ApiOperation(value = "Deletes the MerchantDetails instance associated with the given id.")
    @DeleteMapping(value = "/{merchantId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMerchantDetails(@PathVariable("merchantId") Integer merchantId) {
        LOGGER.debug("Deleting MerchantDetails with id: {}" , merchantId);

        MerchantDetails deletedMerchantDetails = merchantDetailsService.delete(merchantId);

        return deletedMerchantDetails != null;
    }

    /**
     * @deprecated Use {@link #findMerchantDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MerchantDetails instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MerchantDetails> searchMerchantDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MerchantDetails list by query filter:{}", (Object) queryFilters);
        return merchantDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MerchantDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MerchantDetails> findMerchantDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MerchantDetails list by filter:", query);
        return merchantDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MerchantDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MerchantDetails> filterMerchantDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MerchantDetails list by filter", query);
        return merchantDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMerchantDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return merchantDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMerchantDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = MerchantDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> merchantDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of MerchantDetails instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMerchantDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MerchantDetails");
		return merchantDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMerchantDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return merchantDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MerchantDetailsService instance
	 */
	protected void setMerchantDetailsService(MerchantDetailsService service) {
		this.merchantDetailsService = service;
	}

}

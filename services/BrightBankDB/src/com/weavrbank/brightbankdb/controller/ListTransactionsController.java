/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.ListTransactions;
import com.weavrbank.brightbankdb.service.ListTransactionsService;


/**
 * Controller object for domain model class ListTransactions.
 * @see ListTransactions
 */
@RestController("BrightBankDB.ListTransactionsController")
@Api(value = "ListTransactionsController", description = "Exposes APIs to work with ListTransactions resource.")
@RequestMapping("/BrightBankDB/ListTransactions")
public class ListTransactionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListTransactionsController.class);

    @Autowired
	@Qualifier("BrightBankDB.ListTransactionsService")
	private ListTransactionsService listTransactionsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ListTransactions instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransactions createListTransactions(@RequestBody ListTransactions listTransactions) {
		LOGGER.debug("Create ListTransactions with information: {}" , listTransactions);

		listTransactions = listTransactionsService.create(listTransactions);
		LOGGER.debug("Created ListTransactions with information: {}" , listTransactions);

	    return listTransactions;
	}

    @ApiOperation(value = "Returns the ListTransactions instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransactions getListTransactions(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ListTransactions with id: {}" , id);

        ListTransactions foundListTransactions = listTransactionsService.getById(id);
        LOGGER.debug("ListTransactions details with id: {}" , foundListTransactions);

        return foundListTransactions;
    }

    @ApiOperation(value = "Updates the ListTransactions instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransactions editListTransactions(@PathVariable("id") Integer id, @RequestBody ListTransactions listTransactions) {
        LOGGER.debug("Editing ListTransactions with id: {}" , listTransactions.getId());

        listTransactions.setId(id);
        listTransactions = listTransactionsService.update(listTransactions);
        LOGGER.debug("ListTransactions details with id: {}" , listTransactions);

        return listTransactions;
    }
    
    @ApiOperation(value = "Partially updates the ListTransactions instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransactions patchListTransactions(@PathVariable("id") Integer id, @RequestBody @MapTo(ListTransactions.class) Map<String, Object> listTransactionsPatch) {
        LOGGER.debug("Partially updating ListTransactions with id: {}" , id);

        ListTransactions listTransactions = listTransactionsService.partialUpdate(id, listTransactionsPatch);
        LOGGER.debug("ListTransactions details after partial update: {}" , listTransactions);

        return listTransactions;
    }

    @ApiOperation(value = "Deletes the ListTransactions instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteListTransactions(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ListTransactions with id: {}" , id);

        ListTransactions deletedListTransactions = listTransactionsService.delete(id);

        return deletedListTransactions != null;
    }

    /**
     * @deprecated Use {@link #findListTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ListTransactions instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransactions> searchListTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListTransactions list by query filter:{}", (Object) queryFilters);
        return listTransactionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ListTransactions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransactions> findListTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListTransactions list by filter:", query);
        return listTransactionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ListTransactions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransactions> filterListTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListTransactions list by filter", query);
        return listTransactionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportListTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listTransactionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportListTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ListTransactions.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> listTransactionsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ListTransactions instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countListTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListTransactions");
		return listTransactionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getListTransactionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return listTransactionsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListTransactionsService instance
	 */
	protected void setListTransactionsService(ListTransactionsService service) {
		this.listTransactionsService = service;
	}

}

/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.GoalTransactions;
import com.weavrbank.brightbankdb.service.GoalTransactionsService;


/**
 * Controller object for domain model class GoalTransactions.
 * @see GoalTransactions
 */
@RestController("BrightBankDB.GoalTransactionsController")
@Api(value = "GoalTransactionsController", description = "Exposes APIs to work with GoalTransactions resource.")
@RequestMapping("/BrightBankDB/GoalTransactions")
public class GoalTransactionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GoalTransactionsController.class);

    @Autowired
	@Qualifier("BrightBankDB.GoalTransactionsService")
	private GoalTransactionsService goalTransactionsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GoalTransactions instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GoalTransactions createGoalTransactions(@RequestBody GoalTransactions goalTransactions) {
		LOGGER.debug("Create GoalTransactions with information: {}" , goalTransactions);

		goalTransactions = goalTransactionsService.create(goalTransactions);
		LOGGER.debug("Created GoalTransactions with information: {}" , goalTransactions);

	    return goalTransactions;
	}

    @ApiOperation(value = "Returns the GoalTransactions instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GoalTransactions getGoalTransactions(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GoalTransactions with id: {}" , id);

        GoalTransactions foundGoalTransactions = goalTransactionsService.getById(id);
        LOGGER.debug("GoalTransactions details with id: {}" , foundGoalTransactions);

        return foundGoalTransactions;
    }

    @ApiOperation(value = "Updates the GoalTransactions instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GoalTransactions editGoalTransactions(@PathVariable("id") Integer id, @RequestBody GoalTransactions goalTransactions) {
        LOGGER.debug("Editing GoalTransactions with id: {}" , goalTransactions.getId());

        goalTransactions.setId(id);
        goalTransactions = goalTransactionsService.update(goalTransactions);
        LOGGER.debug("GoalTransactions details with id: {}" , goalTransactions);

        return goalTransactions;
    }
    
    @ApiOperation(value = "Partially updates the GoalTransactions instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GoalTransactions patchGoalTransactions(@PathVariable("id") Integer id, @RequestBody @MapTo(GoalTransactions.class) Map<String, Object> goalTransactionsPatch) {
        LOGGER.debug("Partially updating GoalTransactions with id: {}" , id);

        GoalTransactions goalTransactions = goalTransactionsService.partialUpdate(id, goalTransactionsPatch);
        LOGGER.debug("GoalTransactions details after partial update: {}" , goalTransactions);

        return goalTransactions;
    }

    @ApiOperation(value = "Deletes the GoalTransactions instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGoalTransactions(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GoalTransactions with id: {}" , id);

        GoalTransactions deletedGoalTransactions = goalTransactionsService.delete(id);

        return deletedGoalTransactions != null;
    }

    /**
     * @deprecated Use {@link #findGoalTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GoalTransactions instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GoalTransactions> searchGoalTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GoalTransactions list by query filter:{}", (Object) queryFilters);
        return goalTransactionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GoalTransactions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GoalTransactions> findGoalTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GoalTransactions list by filter:", query);
        return goalTransactionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GoalTransactions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GoalTransactions> filterGoalTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GoalTransactions list by filter", query);
        return goalTransactionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGoalTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return goalTransactionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGoalTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GoalTransactions.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> goalTransactionsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GoalTransactions instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGoalTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GoalTransactions");
		return goalTransactionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGoalTransactionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return goalTransactionsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GoalTransactionsService instance
	 */
	protected void setGoalTransactionsService(GoalTransactionsService service) {
		this.goalTransactionsService = service;
	}

}

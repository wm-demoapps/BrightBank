/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.weavrbank.brightbankdb.ListTransaction;
import com.weavrbank.brightbankdb.service.ListTransactionService;


/**
 * Controller object for domain model class ListTransaction.
 * @see ListTransaction
 */
@RestController("BrightBankDB.ListTransactionController")
@Api(value = "ListTransactionController", description = "Exposes APIs to work with ListTransaction resource.")
@RequestMapping("/BrightBankDB/ListTransaction")
public class ListTransactionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListTransactionController.class);

    @Autowired
	@Qualifier("BrightBankDB.ListTransactionService")
	private ListTransactionService listTransactionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ListTransaction instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransaction createListTransaction(@RequestBody ListTransaction listTransaction) {
		LOGGER.debug("Create ListTransaction with information: {}" , listTransaction);

		listTransaction = listTransactionService.create(listTransaction);
		LOGGER.debug("Created ListTransaction with information: {}" , listTransaction);

	    return listTransaction;
	}

    @ApiOperation(value = "Returns the ListTransaction instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransaction getListTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ListTransaction with id: {}" , id);

        ListTransaction foundListTransaction = listTransactionService.getById(id);
        LOGGER.debug("ListTransaction details with id: {}" , foundListTransaction);

        return foundListTransaction;
    }

    @ApiOperation(value = "Updates the ListTransaction instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransaction editListTransaction(@PathVariable("id") Integer id, @RequestBody ListTransaction listTransaction) {
        LOGGER.debug("Editing ListTransaction with id: {}" , listTransaction.getId());

        listTransaction.setId(id);
        listTransaction = listTransactionService.update(listTransaction);
        LOGGER.debug("ListTransaction details with id: {}" , listTransaction);

        return listTransaction;
    }
    
    @ApiOperation(value = "Partially updates the ListTransaction instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ListTransaction patchListTransaction(@PathVariable("id") Integer id, @RequestBody @MapTo(ListTransaction.class) Map<String, Object> listTransactionPatch) {
        LOGGER.debug("Partially updating ListTransaction with id: {}" , id);

        ListTransaction listTransaction = listTransactionService.partialUpdate(id, listTransactionPatch);
        LOGGER.debug("ListTransaction details after partial update: {}" , listTransaction);

        return listTransaction;
    }

    @ApiOperation(value = "Deletes the ListTransaction instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteListTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ListTransaction with id: {}" , id);

        ListTransaction deletedListTransaction = listTransactionService.delete(id);

        return deletedListTransaction != null;
    }

    /**
     * @deprecated Use {@link #findListTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ListTransaction instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransaction> searchListTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListTransactions list by query filter:{}", (Object) queryFilters);
        return listTransactionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ListTransaction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransaction> findListTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListTransactions list by filter:", query);
        return listTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ListTransaction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ListTransaction> filterListTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListTransactions list by filter", query);
        return listTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportListTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listTransactionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportListTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ListTransaction.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> listTransactionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ListTransaction instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countListTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListTransactions");
		return listTransactionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getListTransactionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return listTransactionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListTransactionService instance
	 */
	protected void setListTransactionService(ListTransactionService service) {
		this.listTransactionService = service;
	}

}

/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.weavrbank.brightbankdb.models.query.*;

@Service
public class BrightBankDBQueryExecutorServiceImpl implements BrightBankDBQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrightBankDBQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("BrightBankDBWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "BrightBankDBTransactionManager", readOnly = true)
    @Override
    public Page<QrGoalTransactionSummryByGoalResponse> executeQrGoalTransactionSummryByGoal(Integer goalId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("goal_id", goalId);

        return queryExecutor.executeNamedQuery("qrGoalTransactionSummryByGoal", params, QrGoalTransactionSummryByGoalResponse.class, pageable);
    }

    @Transactional(value = "BrightBankDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQrGoalTransactionSummryByGoal(Integer goalId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("goal_id", goalId);

        QueryProcedureInput<QrGoalTransactionSummryByGoalResponse> queryInput = new QueryProcedureInput<>("qrGoalTransactionSummryByGoal", params, QrGoalTransactionSummryByGoalResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "BrightBankDBTransactionManager", readOnly = true)
    @Override
    public Page<QrWealthGoalsListResponse> executeQrWealthGoalsList(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        return queryExecutor.executeNamedQuery("qrWealthGoalsList", params, QrWealthGoalsListResponse.class, pageable);
    }

    @Transactional(value = "BrightBankDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQrWealthGoalsList(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        QueryProcedureInput<QrWealthGoalsListResponse> queryInput = new QueryProcedureInput<>("qrWealthGoalsList", params, QrWealthGoalsListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}

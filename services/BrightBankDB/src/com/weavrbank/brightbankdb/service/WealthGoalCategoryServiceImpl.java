/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.weavrbank.brightbankdb.WealthGoalCategory;
import com.weavrbank.brightbankdb.WealthGoals;


/**
 * ServiceImpl object for domain model class WealthGoalCategory.
 *
 * @see WealthGoalCategory
 */
@Service("BrightBankDB.WealthGoalCategoryService")
@Validated
@EntityService(entityClass = WealthGoalCategory.class, serviceId = "BrightBankDB")
public class WealthGoalCategoryServiceImpl implements WealthGoalCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WealthGoalCategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("BrightBankDB.WealthGoalsService")
    private WealthGoalsService wealthGoalsService;

    @Autowired
    @Qualifier("BrightBankDB.WealthGoalCategoryDao")
    private WMGenericDao<WealthGoalCategory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<WealthGoalCategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory create(WealthGoalCategory wealthGoalCategory) {
        LOGGER.debug("Creating a new WealthGoalCategory with information: {}", wealthGoalCategory);

        WealthGoalCategory wealthGoalCategoryCreated = this.wmGenericDao.create(wealthGoalCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(wealthGoalCategoryCreated);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory getById(Integer wealthgoalcategoryId) {
        LOGGER.debug("Finding WealthGoalCategory by id: {}", wealthgoalcategoryId);
        return this.wmGenericDao.findById(wealthgoalcategoryId);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory findById(Integer wealthgoalcategoryId) {
        LOGGER.debug("Finding WealthGoalCategory by id: {}", wealthgoalcategoryId);
        try {
            return this.wmGenericDao.findById(wealthgoalcategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No WealthGoalCategory found with id: {}", wealthgoalcategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public List<WealthGoalCategory> findByMultipleIds(List<Integer> wealthgoalcategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding WealthGoalCategories by ids: {}", wealthgoalcategoryIds);

        return this.wmGenericDao.findByMultipleIds(wealthgoalcategoryIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory getByName(String name) {
        Map<String, Object> nameMap = new HashMap<>();
        nameMap.put("name", name);

        LOGGER.debug("Finding WealthGoalCategory by unique keys: {}", nameMap);
        return this.wmGenericDao.findByUniqueKey(nameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory update(WealthGoalCategory wealthGoalCategory) {
        LOGGER.debug("Updating WealthGoalCategory with information: {}", wealthGoalCategory);

        this.wmGenericDao.update(wealthGoalCategory);
        this.wmGenericDao.refresh(wealthGoalCategory);

        return wealthGoalCategory;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory partialUpdate(Integer wealthgoalcategoryId, Map<String, Object>wealthGoalCategoryPatch) {
        LOGGER.debug("Partially Updating the WealthGoalCategory with id: {}", wealthgoalcategoryId);

        WealthGoalCategory wealthGoalCategory = getById(wealthgoalcategoryId);

        try {
            ObjectReader wealthGoalCategoryReader = this.objectMapper.reader().forType(WealthGoalCategory.class).withValueToUpdate(wealthGoalCategory);
            wealthGoalCategory = wealthGoalCategoryReader.readValue(this.objectMapper.writeValueAsString(wealthGoalCategoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", wealthGoalCategoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        wealthGoalCategory = update(wealthGoalCategory);

        return wealthGoalCategory;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public WealthGoalCategory delete(Integer wealthgoalcategoryId) {
        LOGGER.debug("Deleting WealthGoalCategory with id: {}", wealthgoalcategoryId);
        WealthGoalCategory deleted = this.wmGenericDao.findById(wealthgoalcategoryId);
        if (deleted == null) {
            LOGGER.debug("No WealthGoalCategory found with id: {}", wealthgoalcategoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), WealthGoalCategory.class.getSimpleName(), wealthgoalcategoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public void delete(WealthGoalCategory wealthGoalCategory) {
        LOGGER.debug("Deleting WealthGoalCategory with {}", wealthGoalCategory);
        this.wmGenericDao.delete(wealthGoalCategory);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<WealthGoalCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all WealthGoalCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<WealthGoalCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all WealthGoalCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service BrightBankDB for table WealthGoalCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service BrightBankDB for table WealthGoalCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<WealthGoals> findAssociatedWealthGoalses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated wealthGoalses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("wealthGoalCategory.id = '" + id + "'");

        return wealthGoalsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service WealthGoalsService instance
     */
    protected void setWealthGoalsService(WealthGoalsService service) {
        this.wealthGoalsService = service;
    }

}

/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.weavrbank.brightbankdb.AccountPreferences;


/**
 * ServiceImpl object for domain model class AccountPreferences.
 *
 * @see AccountPreferences
 */
@Service("BrightBankDB.AccountPreferencesService")
@Validated
@EntityService(entityClass = AccountPreferences.class, serviceId = "BrightBankDB")
public class AccountPreferencesServiceImpl implements AccountPreferencesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountPreferencesServiceImpl.class);


    @Autowired
    @Qualifier("BrightBankDB.AccountPreferencesDao")
    private WMGenericDao<AccountPreferences, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AccountPreferences, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences create(AccountPreferences accountPreferences) {
        LOGGER.debug("Creating a new AccountPreferences with information: {}", accountPreferences);

        AccountPreferences accountPreferencesCreated = this.wmGenericDao.create(accountPreferences);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(accountPreferencesCreated);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences getById(String accountpreferencesId) {
        LOGGER.debug("Finding AccountPreferences by id: {}", accountpreferencesId);
        return this.wmGenericDao.findById(accountpreferencesId);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences findById(String accountpreferencesId) {
        LOGGER.debug("Finding AccountPreferences by id: {}", accountpreferencesId);
        try {
            return this.wmGenericDao.findById(accountpreferencesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AccountPreferences found with id: {}", accountpreferencesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public List<AccountPreferences> findByMultipleIds(List<String> accountpreferencesIds, boolean orderedReturn) {
        LOGGER.debug("Finding AccountPreferences by ids: {}", accountpreferencesIds);

        return this.wmGenericDao.findByMultipleIds(accountpreferencesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences update(AccountPreferences accountPreferences) {
        LOGGER.debug("Updating AccountPreferences with information: {}", accountPreferences);

        this.wmGenericDao.update(accountPreferences);
        this.wmGenericDao.refresh(accountPreferences);

        return accountPreferences;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences partialUpdate(String accountpreferencesId, Map<String, Object>accountPreferencesPatch) {
        LOGGER.debug("Partially Updating the AccountPreferences with id: {}", accountpreferencesId);

        AccountPreferences accountPreferences = getById(accountpreferencesId);

        try {
            ObjectReader accountPreferencesReader = this.objectMapper.reader().forType(AccountPreferences.class).withValueToUpdate(accountPreferences);
            accountPreferences = accountPreferencesReader.readValue(this.objectMapper.writeValueAsString(accountPreferencesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", accountPreferencesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        accountPreferences = update(accountPreferences);

        return accountPreferences;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public AccountPreferences delete(String accountpreferencesId) {
        LOGGER.debug("Deleting AccountPreferences with id: {}", accountpreferencesId);
        AccountPreferences deleted = this.wmGenericDao.findById(accountpreferencesId);
        if (deleted == null) {
            LOGGER.debug("No AccountPreferences found with id: {}", accountpreferencesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AccountPreferences.class.getSimpleName(), accountpreferencesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public void delete(AccountPreferences accountPreferences) {
        LOGGER.debug("Deleting AccountPreferences with {}", accountPreferences);
        this.wmGenericDao.delete(accountPreferences);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<AccountPreferences> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccountPreferences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<AccountPreferences> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccountPreferences");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service BrightBankDB for table AccountPreferences to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service BrightBankDB for table AccountPreferences to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

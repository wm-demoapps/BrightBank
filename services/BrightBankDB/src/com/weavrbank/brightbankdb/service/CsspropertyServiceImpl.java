/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.weavrbank.brightbankdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.weavrbank.brightbankdb.Cssproperty;
import com.weavrbank.brightbankdb.Themedetail;


/**
 * ServiceImpl object for domain model class Cssproperty.
 *
 * @see Cssproperty
 */
@Service("BrightBankDB.CsspropertyService")
@Validated
@EntityService(entityClass = Cssproperty.class, serviceId = "BrightBankDB")
public class CsspropertyServiceImpl implements CsspropertyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsspropertyServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("BrightBankDB.ThemedetailService")
    private ThemedetailService themedetailService;

    @Autowired
    @Qualifier("BrightBankDB.CsspropertyDao")
    private WMGenericDao<Cssproperty, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Cssproperty, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty create(Cssproperty cssproperty) {
        LOGGER.debug("Creating a new Cssproperty with information: {}", cssproperty);

        Cssproperty csspropertyCreated = this.wmGenericDao.create(cssproperty);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(csspropertyCreated);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty getById(Integer csspropertyId) {
        LOGGER.debug("Finding Cssproperty by id: {}", csspropertyId);
        return this.wmGenericDao.findById(csspropertyId);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty findById(Integer csspropertyId) {
        LOGGER.debug("Finding Cssproperty by id: {}", csspropertyId);
        try {
            return this.wmGenericDao.findById(csspropertyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Cssproperty found with id: {}", csspropertyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public List<Cssproperty> findByMultipleIds(List<Integer> csspropertyIds, boolean orderedReturn) {
        LOGGER.debug("Finding Cssproperties by ids: {}", csspropertyIds);

        return this.wmGenericDao.findByMultipleIds(csspropertyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty update(Cssproperty cssproperty) {
        LOGGER.debug("Updating Cssproperty with information: {}", cssproperty);

        this.wmGenericDao.update(cssproperty);
        this.wmGenericDao.refresh(cssproperty);

        return cssproperty;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty partialUpdate(Integer csspropertyId, Map<String, Object>csspropertyPatch) {
        LOGGER.debug("Partially Updating the Cssproperty with id: {}", csspropertyId);

        Cssproperty cssproperty = getById(csspropertyId);

        try {
            ObjectReader csspropertyReader = this.objectMapper.reader().forType(Cssproperty.class).withValueToUpdate(cssproperty);
            cssproperty = csspropertyReader.readValue(this.objectMapper.writeValueAsString(csspropertyPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", csspropertyPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cssproperty = update(cssproperty);

        return cssproperty;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public Cssproperty delete(Integer csspropertyId) {
        LOGGER.debug("Deleting Cssproperty with id: {}", csspropertyId);
        Cssproperty deleted = this.wmGenericDao.findById(csspropertyId);
        if (deleted == null) {
            LOGGER.debug("No Cssproperty found with id: {}", csspropertyId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Cssproperty.class.getSimpleName(), csspropertyId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "BrightBankDBTransactionManager")
    @Override
    public void delete(Cssproperty cssproperty) {
        LOGGER.debug("Deleting Cssproperty with {}", cssproperty);
        this.wmGenericDao.delete(cssproperty);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Cssproperty> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cssproperties");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Cssproperty> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cssproperties");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service BrightBankDB for table Cssproperty to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service BrightBankDB for table Cssproperty to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "BrightBankDBTransactionManager")
    @Override
    public Page<Themedetail> findAssociatedThemedetails(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated themedetails");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("cssproperty.id = '" + id + "'");

        return themedetailService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ThemedetailService instance
     */
    protected void setThemedetailService(ThemedetailService service) {
        this.themedetailService = service;
    }

}

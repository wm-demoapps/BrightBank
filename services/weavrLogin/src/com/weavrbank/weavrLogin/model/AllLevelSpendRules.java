/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.   <!-- ReDoc-Inject: <security-definitions> --> 
 *
 * OpenAPI spec version: 3.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.weavrbank.weavrLogin.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
/**
 * AllLevelSpendRules
 */

public class AllLevelSpendRules {
  @JsonProperty("allowAtm")
  private Boolean allowAtm = null;

  @JsonProperty("profileLevelSpendRules")
  private ProfileLevelSpendRules profileLevelSpendRules = null;

  @JsonProperty("allowECommerce")
  private Boolean allowECommerce = null;

  @JsonProperty("cardLevelSpendRules")
  private CardLevelSpendRules cardLevelSpendRules = null;

  @JsonProperty("blockedMerchantCategories")
  private List<String> blockedMerchantCategories = null;

  @JsonProperty("allowedMerchantIds")
  private List<String> allowedMerchantIds = null;

  @JsonProperty("blockedMerchantCountries")
  private List<String> blockedMerchantCountries = null;

  @JsonProperty("allowCashback")
  private Boolean allowCashback = null;

  @JsonProperty("spendLimit")
  private List<SpendLimit> spendLimit = null;

  @JsonProperty("blockedMerchantIds")
  private List<String> blockedMerchantIds = null;

  @JsonProperty("maxTransactionAmount")
  private Long maxTransactionAmount = null;

  @JsonProperty("allowedMerchantCategories")
  private List<String> allowedMerchantCategories = null;

  @JsonProperty("allowedMerchantCountries")
  private List<String> allowedMerchantCountries = null;

  @JsonProperty("identityLevelSpendRules")
  private IdentityLevelSpendRules identityLevelSpendRules = null;

  @JsonProperty("minTransactionAmount")
  private Long minTransactionAmount = null;

  @JsonProperty("allowCreditAuthorisations")
  private Boolean allowCreditAuthorisations = null;

  @JsonProperty("allowContactless")
  private Boolean allowContactless = null;

  public AllLevelSpendRules allowAtm(Boolean allowAtm) {
    this.allowAtm = allowAtm;
    return this;
  }

   /**
   * Indicates if an ATM Withdrawal transaction is allowed on the card. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowAtm\&quot; instead.
   * @return allowAtm
  **/
  public Boolean isAllowAtm() {
    return allowAtm;
  }

  public void setAllowAtm(Boolean allowAtm) {
    this.allowAtm = allowAtm;
  }

  public AllLevelSpendRules profileLevelSpendRules(ProfileLevelSpendRules profileLevelSpendRules) {
    this.profileLevelSpendRules = profileLevelSpendRules;
    return this;
  }

   /**
   * Get profileLevelSpendRules
   * @return profileLevelSpendRules
  **/
  public ProfileLevelSpendRules getProfileLevelSpendRules() {
    return profileLevelSpendRules;
  }

  public void setProfileLevelSpendRules(ProfileLevelSpendRules profileLevelSpendRules) {
    this.profileLevelSpendRules = profileLevelSpendRules;
  }

  public AllLevelSpendRules allowECommerce(Boolean allowECommerce) {
    this.allowECommerce = allowECommerce;
    return this;
  }

   /**
   * Indicates if an online transaction is allowed on the card. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowECommerce\&quot; instead.
   * @return allowECommerce
  **/
  public Boolean isAllowECommerce() {
    return allowECommerce;
  }

  public void setAllowECommerce(Boolean allowECommerce) {
    this.allowECommerce = allowECommerce;
  }

  public AllLevelSpendRules cardLevelSpendRules(CardLevelSpendRules cardLevelSpendRules) {
    this.cardLevelSpendRules = cardLevelSpendRules;
    return this;
  }

   /**
   * Get cardLevelSpendRules
   * @return cardLevelSpendRules
  **/
  public CardLevelSpendRules getCardLevelSpendRules() {
    return cardLevelSpendRules;
  }

  public void setCardLevelSpendRules(CardLevelSpendRules cardLevelSpendRules) {
    this.cardLevelSpendRules = cardLevelSpendRules;
  }

  public AllLevelSpendRules blockedMerchantCategories(List<String> blockedMerchantCategories) {
    this.blockedMerchantCategories = blockedMerchantCategories;
    return this;
  }

  public AllLevelSpendRules addBlockedMerchantCategoriesItem(String blockedMerchantCategoriesItem) {
    if (this.blockedMerchantCategories == null) {
      this.blockedMerchantCategories = new ArrayList<>();
    }
    this.blockedMerchantCategories.add(blockedMerchantCategoriesItem);
    return this;
  }

   /**
   * Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;blockedMerchantCategories\&quot; instead.
   * @return blockedMerchantCategories
  **/
  public List<String> getBlockedMerchantCategories() {
    return blockedMerchantCategories;
  }

  public void setBlockedMerchantCategories(List<String> blockedMerchantCategories) {
    this.blockedMerchantCategories = blockedMerchantCategories;
  }

  public AllLevelSpendRules allowedMerchantIds(List<String> allowedMerchantIds) {
    this.allowedMerchantIds = allowedMerchantIds;
    return this;
  }

  public AllLevelSpendRules addAllowedMerchantIdsItem(String allowedMerchantIdsItem) {
    if (this.allowedMerchantIds == null) {
      this.allowedMerchantIds = new ArrayList<>();
    }
    this.allowedMerchantIds.add(allowedMerchantIdsItem);
    return this;
  }

   /**
   * Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowedMerchantIds\&quot; instead.
   * @return allowedMerchantIds
  **/
  public List<String> getAllowedMerchantIds() {
    return allowedMerchantIds;
  }

  public void setAllowedMerchantIds(List<String> allowedMerchantIds) {
    this.allowedMerchantIds = allowedMerchantIds;
  }

  public AllLevelSpendRules blockedMerchantCountries(List<String> blockedMerchantCountries) {
    this.blockedMerchantCountries = blockedMerchantCountries;
    return this;
  }

  public AllLevelSpendRules addBlockedMerchantCountriesItem(String blockedMerchantCountriesItem) {
    if (this.blockedMerchantCountries == null) {
      this.blockedMerchantCountries = new ArrayList<>();
    }
    this.blockedMerchantCountries.add(blockedMerchantCountriesItem);
    return this;
  }

   /**
   * Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;blockedMerchantCountries\&quot; instead.
   * @return blockedMerchantCountries
  **/
  public List<String> getBlockedMerchantCountries() {
    return blockedMerchantCountries;
  }

  public void setBlockedMerchantCountries(List<String> blockedMerchantCountries) {
    this.blockedMerchantCountries = blockedMerchantCountries;
  }

  public AllLevelSpendRules allowCashback(Boolean allowCashback) {
    this.allowCashback = allowCashback;
    return this;
  }

   /**
   * Indicates if a cashback transaction at a physical terminal is allowed on the card. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowCashback\&quot; instead.
   * @return allowCashback
  **/
  public Boolean isAllowCashback() {
    return allowCashback;
  }

  public void setAllowCashback(Boolean allowCashback) {
    this.allowCashback = allowCashback;
  }

  public AllLevelSpendRules spendLimit(List<SpendLimit> spendLimit) {
    this.spendLimit = spendLimit;
    return this;
  }

  public AllLevelSpendRules addSpendLimitItem(SpendLimit spendLimitItem) {
    if (this.spendLimit == null) {
      this.spendLimit = new ArrayList<>();
    }
    this.spendLimit.add(spendLimitItem);
    return this;
  }

   /**
   * The total amount of funds that can be spent using this card, in a given time interval. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;spendLimit\&quot; instead.
   * @return spendLimit
  **/
  public List<SpendLimit> getSpendLimit() {
    return spendLimit;
  }

  public void setSpendLimit(List<SpendLimit> spendLimit) {
    this.spendLimit = spendLimit;
  }

  public AllLevelSpendRules blockedMerchantIds(List<String> blockedMerchantIds) {
    this.blockedMerchantIds = blockedMerchantIds;
    return this;
  }

  public AllLevelSpendRules addBlockedMerchantIdsItem(String blockedMerchantIdsItem) {
    if (this.blockedMerchantIds == null) {
      this.blockedMerchantIds = new ArrayList<>();
    }
    this.blockedMerchantIds.add(blockedMerchantIdsItem);
    return this;
  }

   /**
   * Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;blockedMerchantIds\&quot; instead.
   * @return blockedMerchantIds
  **/
  public List<String> getBlockedMerchantIds() {
    return blockedMerchantIds;
  }

  public void setBlockedMerchantIds(List<String> blockedMerchantIds) {
    this.blockedMerchantIds = blockedMerchantIds;
  }

  public AllLevelSpendRules maxTransactionAmount(Long maxTransactionAmount) {
    this.maxTransactionAmount = maxTransactionAmount;
    return this;
  }

   /**
   * The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;maxTransactionAmount\&quot; instead.
   * @return maxTransactionAmount
  **/
  public Long getMaxTransactionAmount() {
    return maxTransactionAmount;
  }

  public void setMaxTransactionAmount(Long maxTransactionAmount) {
    this.maxTransactionAmount = maxTransactionAmount;
  }

  public AllLevelSpendRules allowedMerchantCategories(List<String> allowedMerchantCategories) {
    this.allowedMerchantCategories = allowedMerchantCategories;
    return this;
  }

  public AllLevelSpendRules addAllowedMerchantCategoriesItem(String allowedMerchantCategoriesItem) {
    if (this.allowedMerchantCategories == null) {
      this.allowedMerchantCategories = new ArrayList<>();
    }
    this.allowedMerchantCategories.add(allowedMerchantCategoriesItem);
    return this;
  }

   /**
   * Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowedMerchantCategories\&quot; instead.
   * @return allowedMerchantCategories
  **/
  public List<String> getAllowedMerchantCategories() {
    return allowedMerchantCategories;
  }

  public void setAllowedMerchantCategories(List<String> allowedMerchantCategories) {
    this.allowedMerchantCategories = allowedMerchantCategories;
  }

  public AllLevelSpendRules allowedMerchantCountries(List<String> allowedMerchantCountries) {
    this.allowedMerchantCountries = allowedMerchantCountries;
    return this;
  }

  public AllLevelSpendRules addAllowedMerchantCountriesItem(String allowedMerchantCountriesItem) {
    if (this.allowedMerchantCountries == null) {
      this.allowedMerchantCountries = new ArrayList<>();
    }
    this.allowedMerchantCountries.add(allowedMerchantCountriesItem);
    return this;
  }

   /**
   * Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowedMerchantCountries\&quot; instead.
   * @return allowedMerchantCountries
  **/
  public List<String> getAllowedMerchantCountries() {
    return allowedMerchantCountries;
  }

  public void setAllowedMerchantCountries(List<String> allowedMerchantCountries) {
    this.allowedMerchantCountries = allowedMerchantCountries;
  }

  public AllLevelSpendRules identityLevelSpendRules(IdentityLevelSpendRules identityLevelSpendRules) {
    this.identityLevelSpendRules = identityLevelSpendRules;
    return this;
  }

   /**
   * Get identityLevelSpendRules
   * @return identityLevelSpendRules
  **/
  public IdentityLevelSpendRules getIdentityLevelSpendRules() {
    return identityLevelSpendRules;
  }

  public void setIdentityLevelSpendRules(IdentityLevelSpendRules identityLevelSpendRules) {
    this.identityLevelSpendRules = identityLevelSpendRules;
  }

  public AllLevelSpendRules minTransactionAmount(Long minTransactionAmount) {
    this.minTransactionAmount = minTransactionAmount;
    return this;
  }

   /**
   * The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;minTransactionAmount\&quot; instead.
   * @return minTransactionAmount
  **/
  public Long getMinTransactionAmount() {
    return minTransactionAmount;
  }

  public void setMinTransactionAmount(Long minTransactionAmount) {
    this.minTransactionAmount = minTransactionAmount;
  }

  public AllLevelSpendRules allowCreditAuthorisations(Boolean allowCreditAuthorisations) {
    this.allowCreditAuthorisations = allowCreditAuthorisations;
    return this;
  }

   /**
   * Indicates if a the card can receive a credit transaction. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowCashback\&quot; instead.
   * @return allowCreditAuthorisations
  **/
  public Boolean isAllowCreditAuthorisations() {
    return allowCreditAuthorisations;
  }

  public void setAllowCreditAuthorisations(Boolean allowCreditAuthorisations) {
    this.allowCreditAuthorisations = allowCreditAuthorisations;
  }

  public AllLevelSpendRules allowContactless(Boolean allowContactless) {
    this.allowContactless = allowContactless;
    return this;
  }

   /**
   * Indicates if a contactless transaction is allowed on the card. This field is deprecated - use \&quot;cardLevelSpendRules\&quot;.\&quot;allowContactless\&quot; instead.
   * @return allowContactless
  **/
  public Boolean isAllowContactless() {
    return allowContactless;
  }

  public void setAllowContactless(Boolean allowContactless) {
    this.allowContactless = allowContactless;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllLevelSpendRules AllLevelSpendRules = (AllLevelSpendRules) o;
    return Objects.equals(this.allowAtm, AllLevelSpendRules.allowAtm) &&
        Objects.equals(this.profileLevelSpendRules, AllLevelSpendRules.profileLevelSpendRules) &&
        Objects.equals(this.allowECommerce, AllLevelSpendRules.allowECommerce) &&
        Objects.equals(this.cardLevelSpendRules, AllLevelSpendRules.cardLevelSpendRules) &&
        Objects.equals(this.blockedMerchantCategories, AllLevelSpendRules.blockedMerchantCategories) &&
        Objects.equals(this.allowedMerchantIds, AllLevelSpendRules.allowedMerchantIds) &&
        Objects.equals(this.blockedMerchantCountries, AllLevelSpendRules.blockedMerchantCountries) &&
        Objects.equals(this.allowCashback, AllLevelSpendRules.allowCashback) &&
        Objects.equals(this.spendLimit, AllLevelSpendRules.spendLimit) &&
        Objects.equals(this.blockedMerchantIds, AllLevelSpendRules.blockedMerchantIds) &&
        Objects.equals(this.maxTransactionAmount, AllLevelSpendRules.maxTransactionAmount) &&
        Objects.equals(this.allowedMerchantCategories, AllLevelSpendRules.allowedMerchantCategories) &&
        Objects.equals(this.allowedMerchantCountries, AllLevelSpendRules.allowedMerchantCountries) &&
        Objects.equals(this.identityLevelSpendRules, AllLevelSpendRules.identityLevelSpendRules) &&
        Objects.equals(this.minTransactionAmount, AllLevelSpendRules.minTransactionAmount) &&
        Objects.equals(this.allowCreditAuthorisations, AllLevelSpendRules.allowCreditAuthorisations) &&
        Objects.equals(this.allowContactless, AllLevelSpendRules.allowContactless);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAtm, profileLevelSpendRules, allowECommerce, cardLevelSpendRules, blockedMerchantCategories, allowedMerchantIds, blockedMerchantCountries, allowCashback, spendLimit, blockedMerchantIds, maxTransactionAmount, allowedMerchantCategories, allowedMerchantCountries, identityLevelSpendRules, minTransactionAmount, allowCreditAuthorisations, allowContactless);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllLevelSpendRules {\n");
    
    sb.append("    allowAtm: ").append(toIndentedString(allowAtm)).append("\n");
    sb.append("    profileLevelSpendRules: ").append(toIndentedString(profileLevelSpendRules)).append("\n");
    sb.append("    allowECommerce: ").append(toIndentedString(allowECommerce)).append("\n");
    sb.append("    cardLevelSpendRules: ").append(toIndentedString(cardLevelSpendRules)).append("\n");
    sb.append("    blockedMerchantCategories: ").append(toIndentedString(blockedMerchantCategories)).append("\n");
    sb.append("    allowedMerchantIds: ").append(toIndentedString(allowedMerchantIds)).append("\n");
    sb.append("    blockedMerchantCountries: ").append(toIndentedString(blockedMerchantCountries)).append("\n");
    sb.append("    allowCashback: ").append(toIndentedString(allowCashback)).append("\n");
    sb.append("    spendLimit: ").append(toIndentedString(spendLimit)).append("\n");
    sb.append("    blockedMerchantIds: ").append(toIndentedString(blockedMerchantIds)).append("\n");
    sb.append("    maxTransactionAmount: ").append(toIndentedString(maxTransactionAmount)).append("\n");
    sb.append("    allowedMerchantCategories: ").append(toIndentedString(allowedMerchantCategories)).append("\n");
    sb.append("    allowedMerchantCountries: ").append(toIndentedString(allowedMerchantCountries)).append("\n");
    sb.append("    identityLevelSpendRules: ").append(toIndentedString(identityLevelSpendRules)).append("\n");
    sb.append("    minTransactionAmount: ").append(toIndentedString(minTransactionAmount)).append("\n");
    sb.append("    allowCreditAuthorisations: ").append(toIndentedString(allowCreditAuthorisations)).append("\n");
    sb.append("    allowContactless: ").append(toIndentedString(allowContactless)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

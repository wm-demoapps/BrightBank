/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.   <!-- ReDoc-Inject: <security-definitions> --> 
 *
 * OpenAPI spec version: 3.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.weavrbank.weavrLogin.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * ManagedCardRequest
 */

public class ManagedCardRequest {
  @JsonProperty("mode")
  private String mode = null;

  @JsonProperty("nameOnCard")
  private String nameOnCard = null;

  @JsonProperty("profileId")
  private String profileId = null;

  @JsonProperty("digitalWallets")
  private DigitalWallets digitalWallets = null;

  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("billingAddress")
  private Address billingAddress = null;

  @JsonProperty("friendlyName")
  private String friendlyName = null;

  @JsonProperty("cardholderMobileNumber")
  private String cardholderMobileNumber = null;

  public ManagedCardRequest mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The card can be created in prepaid mode or debit mode.  - A prepaid mode card has its own balance and can have funds transferred to or from it. - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit. 
   * @return mode
  **/
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public ManagedCardRequest nameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
    return this;
  }

   /**
   * The card holder&#x27;s name for the card.  This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card. 
   * @return nameOnCard
  **/
  public String getNameOnCard() {
    return nameOnCard;
  }

  public void setNameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
  }

  public ManagedCardRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

   /**
   * Get profileId
   * @return profileId
  **/
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }

  public ManagedCardRequest digitalWallets(DigitalWallets digitalWallets) {
    this.digitalWallets = digitalWallets;
    return this;
  }

   /**
   * Get digitalWallets
   * @return digitalWallets
  **/
  public DigitalWallets getDigitalWallets() {
    return digitalWallets;
  }

  public void setDigitalWallets(DigitalWallets digitalWallets) {
    this.digitalWallets = digitalWallets;
  }

  public ManagedCardRequest tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public ManagedCardRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public ManagedCardRequest friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

   /**
   * The friendly name for the card.
   * @return friendlyName
  **/
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }

  public ManagedCardRequest cardholderMobileNumber(String cardholderMobileNumber) {
    this.cardholderMobileNumber = cardholderMobileNumber;
    return this;
  }

   /**
   * The mobile number including country code of the card holder.  For transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase. 
   * @return cardholderMobileNumber
  **/
  public String getCardholderMobileNumber() {
    return cardholderMobileNumber;
  }

  public void setCardholderMobileNumber(String cardholderMobileNumber) {
    this.cardholderMobileNumber = cardholderMobileNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedCardRequest ManagedCardRequest = (ManagedCardRequest) o;
    return Objects.equals(this.mode, ManagedCardRequest.mode) &&
        Objects.equals(this.nameOnCard, ManagedCardRequest.nameOnCard) &&
        Objects.equals(this.profileId, ManagedCardRequest.profileId) &&
        Objects.equals(this.digitalWallets, ManagedCardRequest.digitalWallets) &&
        Objects.equals(this.tag, ManagedCardRequest.tag) &&
        Objects.equals(this.billingAddress, ManagedCardRequest.billingAddress) &&
        Objects.equals(this.friendlyName, ManagedCardRequest.friendlyName) &&
        Objects.equals(this.cardholderMobileNumber, ManagedCardRequest.cardholderMobileNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, nameOnCard, profileId, digitalWallets, tag, billingAddress, friendlyName, cardholderMobileNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedCardRequest {\n");
    
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    nameOnCard: ").append(toIndentedString(nameOnCard)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    digitalWallets: ").append(toIndentedString(digitalWallets)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    cardholderMobileNumber: ").append(toIndentedString(cardholderMobileNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

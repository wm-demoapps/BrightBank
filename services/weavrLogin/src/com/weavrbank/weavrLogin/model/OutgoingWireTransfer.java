/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.   <!-- ReDoc-Inject: <security-definitions> --> 
 *
 * OpenAPI spec version: 3.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.weavrbank.weavrLogin.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.weavrbank.weavrLogin.model.OutgoingWireTransferSourceInstrument;
/**
 * OutgoingWireTransfer
 */

public class OutgoingWireTransfer {
  @JsonProperty("profileId")
  private String profileId = null;

  @JsonProperty("transferAmount")
  private CurrencyAmount transferAmount = null;

  @JsonProperty("destination")
  private OutgoingWireTransferBeneficiary destination = null;

  @JsonProperty("creationTimestamp")
  private Long creationTimestamp = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("state")
  private String state = null;

  /**
   * The wire transfer rails used, from SEPA, Faster Payments or SWIFT.
   */
  public enum TypeEnum {
    SEPA("SEPA"),
    FASTER_PAYMENTS("FASTER_PAYMENTS"),
    SWIFT("SWIFT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("sourceInstrument")
  private OutgoingWireTransferSourceInstrument sourceInstrument = null;

  @JsonProperty("rejectedInfo")
  private String rejectedInfo = null;

  public OutgoingWireTransfer profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

   /**
   * Get profileId
   * @return profileId
  **/
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }

  public OutgoingWireTransfer transferAmount(CurrencyAmount transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

   /**
   * Get transferAmount
   * @return transferAmount
  **/
  public CurrencyAmount getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(CurrencyAmount transferAmount) {
    this.transferAmount = transferAmount;
  }

  public OutgoingWireTransfer destination(OutgoingWireTransferBeneficiary destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  public OutgoingWireTransferBeneficiary getDestination() {
    return destination;
  }

  public void setDestination(OutgoingWireTransferBeneficiary destination) {
    this.destination = destination;
  }

  public OutgoingWireTransfer creationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

   /**
   * The time when the transaction was created, expressed in Epoch timestamp using millisecond precision.
   * @return creationTimestamp
  **/
  public Long getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }

  public OutgoingWireTransfer description(String description) {
    this.description = description;
    return this;
  }

   /**
   *  Transaction description.
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public OutgoingWireTransfer id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of an Outgoing Wire Transfer transaction.
   * @return id
  **/
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public OutgoingWireTransfer tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public OutgoingWireTransfer state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public OutgoingWireTransfer type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The wire transfer rails used, from SEPA, Faster Payments or SWIFT.
   * @return type
  **/
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public OutgoingWireTransfer sourceInstrument(OutgoingWireTransferSourceInstrument sourceInstrument) {
    this.sourceInstrument = sourceInstrument;
    return this;
  }

   /**
   * Get sourceInstrument
   * @return sourceInstrument
  **/
  public OutgoingWireTransferSourceInstrument getSourceInstrument() {
    return sourceInstrument;
  }

  public void setSourceInstrument(OutgoingWireTransferSourceInstrument sourceInstrument) {
    this.sourceInstrument = sourceInstrument;
  }

  public OutgoingWireTransfer rejectedInfo(String rejectedInfo) {
    this.rejectedInfo = rejectedInfo;
    return this;
  }

   /**
   * Get rejectedInfo
   * @return rejectedInfo
  **/
  public String getRejectedInfo() {
    return rejectedInfo;
  }

  public void setRejectedInfo(String rejectedInfo) {
    this.rejectedInfo = rejectedInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutgoingWireTransfer OutgoingWireTransfer = (OutgoingWireTransfer) o;
    return Objects.equals(this.profileId, OutgoingWireTransfer.profileId) &&
        Objects.equals(this.transferAmount, OutgoingWireTransfer.transferAmount) &&
        Objects.equals(this.destination, OutgoingWireTransfer.destination) &&
        Objects.equals(this.creationTimestamp, OutgoingWireTransfer.creationTimestamp) &&
        Objects.equals(this.description, OutgoingWireTransfer.description) &&
        Objects.equals(this.id, OutgoingWireTransfer.id) &&
        Objects.equals(this.tag, OutgoingWireTransfer.tag) &&
        Objects.equals(this.state, OutgoingWireTransfer.state) &&
        Objects.equals(this.type, OutgoingWireTransfer.type) &&
        Objects.equals(this.sourceInstrument, OutgoingWireTransfer.sourceInstrument) &&
        Objects.equals(this.rejectedInfo, OutgoingWireTransfer.rejectedInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileId, transferAmount, destination, creationTimestamp, description, id, tag, state, type, sourceInstrument, rejectedInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutgoingWireTransfer {\n");
    
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceInstrument: ").append(toIndentedString(sourceInstrument)).append("\n");
    sb.append("    rejectedInfo: ").append(toIndentedString(rejectedInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.   <!-- ReDoc-Inject: <security-definitions> --> 
 *
 * OpenAPI spec version: 3.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.weavrbank.weavrLogin.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * ManagedCard
 */

public class ManagedCard {
  @JsonProperty("expiryMmyy")
  private String expiryMmyy = null;

  @JsonProperty("externalHandle")
  private String externalHandle = null;

  /**
   * The type of card:   - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.   - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals. 
   */
  public enum TypeEnum {
    VIRTUAL("VIRTUAL"),
    PHYSICAL("PHYSICAL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("cardholderMobileNumber")
  private String cardholderMobileNumber = null;

  @JsonProperty("startMmyy")
  private String startMmyy = null;

  @JsonProperty("mode")
  private String mode = null;

  @JsonProperty("physicalCardDetails")
  private PhysicalCardDetails physicalCardDetails = null;

  @JsonProperty("cardNumberLastFour")
  private String cardNumberLastFour = null;

  @JsonProperty("nameOnCard")
  private String nameOnCard = null;

  /**
   * The card classification determines whether the card is from Consumer or Corporate BINs.
   */
  public enum CardLevelClassificationEnum {
    CONSUMER("CONSUMER"),
    CORPORATE("CORPORATE");

    private String value;

    CardLevelClassificationEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CardLevelClassificationEnum fromValue(String input) {
      for (CardLevelClassificationEnum b : CardLevelClassificationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("cardLevelClassification")
  private CardLevelClassificationEnum cardLevelClassification = null;

  @JsonProperty("creationTimestamp")
  private Long creationTimestamp = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("state")
  private ManagedInstrumentState state = null;

  /**
   * The card scheme, or brand of the card.
   */
  public enum CardBrandEnum {
    MASTERCARD("MASTERCARD"),
    VISA("VISA");

    private String value;

    CardBrandEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CardBrandEnum fromValue(String input) {
      for (CardBrandEnum b : CardBrandEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("cardBrand")
  private CardBrandEnum cardBrand = null;

  @JsonProperty("expiryPeriodMonths")
  private Integer expiryPeriodMonths = null;

  @JsonProperty("friendlyName")
  private String friendlyName = null;

  @JsonProperty("cvv")
  private SensitiveCvv cvv = null;

  @JsonProperty("digitalWallets")
  private DigitalWallets digitalWallets = null;

  /**
   * Indicates how card will be handled once it is close to expiring.   - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.   - NO_RENEW: Once the expiry date is reached, the card is destroyed. 
   */
  public enum RenewalTypeEnum {
    AUTO_RENEW("AUTO_RENEW"),
    NO_RENEW("NO_RENEW");

    private String value;

    RenewalTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RenewalTypeEnum fromValue(String input) {
      for (RenewalTypeEnum b : RenewalTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("renewalType")
  private RenewalTypeEnum renewalType = null;

  @JsonProperty("profileId")
  private String profileId = null;

  @JsonProperty("cardNumberFirstSix")
  private String cardNumberFirstSix = null;

  @JsonProperty("billingAddress")
  private Address billingAddress = null;

  @JsonProperty("cardNumber")
  private SensitiveCardNumber cardNumber = null;

  public ManagedCard expiryMmyy(String expiryMmyy) {
    this.expiryMmyy = expiryMmyy;
    return this;
  }

   /**
   * The end date of this card, in MMYY format.
   * @return expiryMmyy
  **/
  public String getExpiryMmyy() {
    return expiryMmyy;
  }

  public void setExpiryMmyy(String expiryMmyy) {
    this.expiryMmyy = expiryMmyy;
  }

  public ManagedCard externalHandle(String externalHandle) {
    this.externalHandle = externalHandle;
    return this;
  }

   /**
   * A uniquely generated code used to identify a card.  This code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket. 
   * @return externalHandle
  **/
  public String getExternalHandle() {
    return externalHandle;
  }

  public void setExternalHandle(String externalHandle) {
    this.externalHandle = externalHandle;
  }

  public ManagedCard type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of card:   - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.   - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals. 
   * @return type
  **/
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ManagedCard cardholderMobileNumber(String cardholderMobileNumber) {
    this.cardholderMobileNumber = cardholderMobileNumber;
    return this;
  }

   /**
   * The mobile number including country code of the card holder, needed for 3DS challenge.
   * @return cardholderMobileNumber
  **/
  public String getCardholderMobileNumber() {
    return cardholderMobileNumber;
  }

  public void setCardholderMobileNumber(String cardholderMobileNumber) {
    this.cardholderMobileNumber = cardholderMobileNumber;
  }

  public ManagedCard startMmyy(String startMmyy) {
    this.startMmyy = startMmyy;
    return this;
  }

   /**
   * The start date of this card, in MMYY format.
   * @return startMmyy
  **/
  public String getStartMmyy() {
    return startMmyy;
  }

  public void setStartMmyy(String startMmyy) {
    this.startMmyy = startMmyy;
  }

  public ManagedCard mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The mode with which this card was created:  - A prepaid mode card has its own balance and can have funds transferred to or from it. - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit. 
   * @return mode
  **/
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public ManagedCard physicalCardDetails(PhysicalCardDetails physicalCardDetails) {
    this.physicalCardDetails = physicalCardDetails;
    return this;
  }

   /**
   * Get physicalCardDetails
   * @return physicalCardDetails
  **/
  public PhysicalCardDetails getPhysicalCardDetails() {
    return physicalCardDetails;
  }

  public void setPhysicalCardDetails(PhysicalCardDetails physicalCardDetails) {
    this.physicalCardDetails = physicalCardDetails;
  }

  public ManagedCard cardNumberLastFour(String cardNumberLastFour) {
    this.cardNumberLastFour = cardNumberLastFour;
    return this;
  }

   /**
   * The last four digits of the card number.
   * @return cardNumberLastFour
  **/
  public String getCardNumberLastFour() {
    return cardNumberLastFour;
  }

  public void setCardNumberLastFour(String cardNumberLastFour) {
    this.cardNumberLastFour = cardNumberLastFour;
  }

  public ManagedCard nameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
    return this;
  }

   /**
   * The name on card. If the card is a physical card, this is printed on the card.
   * @return nameOnCard
  **/
  public String getNameOnCard() {
    return nameOnCard;
  }

  public void setNameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
  }

  public ManagedCard cardLevelClassification(CardLevelClassificationEnum cardLevelClassification) {
    this.cardLevelClassification = cardLevelClassification;
    return this;
  }

   /**
   * The card classification determines whether the card is from Consumer or Corporate BINs.
   * @return cardLevelClassification
  **/
  public CardLevelClassificationEnum getCardLevelClassification() {
    return cardLevelClassification;
  }

  public void setCardLevelClassification(CardLevelClassificationEnum cardLevelClassification) {
    this.cardLevelClassification = cardLevelClassification;
  }

  public ManagedCard creationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

   /**
   * The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision.
   * @return creationTimestamp
  **/
  public Long getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }

  public ManagedCard currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ManagedCard id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of the card.
   * @return id
  **/
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ManagedCard tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public ManagedCard state(ManagedInstrumentState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  public ManagedInstrumentState getState() {
    return state;
  }

  public void setState(ManagedInstrumentState state) {
    this.state = state;
  }

  public ManagedCard cardBrand(CardBrandEnum cardBrand) {
    this.cardBrand = cardBrand;
    return this;
  }

   /**
   * The card scheme, or brand of the card.
   * @return cardBrand
  **/
  public CardBrandEnum getCardBrand() {
    return cardBrand;
  }

  public void setCardBrand(CardBrandEnum cardBrand) {
    this.cardBrand = cardBrand;
  }

  public ManagedCard expiryPeriodMonths(Integer expiryPeriodMonths) {
    this.expiryPeriodMonths = expiryPeriodMonths;
    return this;
  }

   /**
   * The validity timeframe of the card, in months.
   * @return expiryPeriodMonths
  **/
  public Integer getExpiryPeriodMonths() {
    return expiryPeriodMonths;
  }

  public void setExpiryPeriodMonths(Integer expiryPeriodMonths) {
    this.expiryPeriodMonths = expiryPeriodMonths;
  }

  public ManagedCard friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

   /**
   * The friendly name given to the card.
   * @return friendlyName
  **/
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }

  public ManagedCard cvv(SensitiveCvv cvv) {
    this.cvv = cvv;
    return this;
  }

   /**
   * Get cvv
   * @return cvv
  **/
  public SensitiveCvv getCvv() {
    return cvv;
  }

  public void setCvv(SensitiveCvv cvv) {
    this.cvv = cvv;
  }

  public ManagedCard digitalWallets(DigitalWallets digitalWallets) {
    this.digitalWallets = digitalWallets;
    return this;
  }

   /**
   * Get digitalWallets
   * @return digitalWallets
  **/
  public DigitalWallets getDigitalWallets() {
    return digitalWallets;
  }

  public void setDigitalWallets(DigitalWallets digitalWallets) {
    this.digitalWallets = digitalWallets;
  }

  public ManagedCard renewalType(RenewalTypeEnum renewalType) {
    this.renewalType = renewalType;
    return this;
  }

   /**
   * Indicates how card will be handled once it is close to expiring.   - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.   - NO_RENEW: Once the expiry date is reached, the card is destroyed. 
   * @return renewalType
  **/
  public RenewalTypeEnum getRenewalType() {
    return renewalType;
  }

  public void setRenewalType(RenewalTypeEnum renewalType) {
    this.renewalType = renewalType;
  }

  public ManagedCard profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

   /**
   * Get profileId
   * @return profileId
  **/
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }

  public ManagedCard cardNumberFirstSix(String cardNumberFirstSix) {
    this.cardNumberFirstSix = cardNumberFirstSix;
    return this;
  }

   /**
   * The first six digits of the card number.
   * @return cardNumberFirstSix
  **/
  public String getCardNumberFirstSix() {
    return cardNumberFirstSix;
  }

  public void setCardNumberFirstSix(String cardNumberFirstSix) {
    this.cardNumberFirstSix = cardNumberFirstSix;
  }

  public ManagedCard billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public ManagedCard cardNumber(SensitiveCardNumber cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Get cardNumber
   * @return cardNumber
  **/
  public SensitiveCardNumber getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(SensitiveCardNumber cardNumber) {
    this.cardNumber = cardNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedCard ManagedCard = (ManagedCard) o;
    return Objects.equals(this.expiryMmyy, ManagedCard.expiryMmyy) &&
        Objects.equals(this.externalHandle, ManagedCard.externalHandle) &&
        Objects.equals(this.type, ManagedCard.type) &&
        Objects.equals(this.cardholderMobileNumber, ManagedCard.cardholderMobileNumber) &&
        Objects.equals(this.startMmyy, ManagedCard.startMmyy) &&
        Objects.equals(this.mode, ManagedCard.mode) &&
        Objects.equals(this.physicalCardDetails, ManagedCard.physicalCardDetails) &&
        Objects.equals(this.cardNumberLastFour, ManagedCard.cardNumberLastFour) &&
        Objects.equals(this.nameOnCard, ManagedCard.nameOnCard) &&
        Objects.equals(this.cardLevelClassification, ManagedCard.cardLevelClassification) &&
        Objects.equals(this.creationTimestamp, ManagedCard.creationTimestamp) &&
        Objects.equals(this.currency, ManagedCard.currency) &&
        Objects.equals(this.id, ManagedCard.id) &&
        Objects.equals(this.tag, ManagedCard.tag) &&
        Objects.equals(this.state, ManagedCard.state) &&
        Objects.equals(this.cardBrand, ManagedCard.cardBrand) &&
        Objects.equals(this.expiryPeriodMonths, ManagedCard.expiryPeriodMonths) &&
        Objects.equals(this.friendlyName, ManagedCard.friendlyName) &&
        Objects.equals(this.cvv, ManagedCard.cvv) &&
        Objects.equals(this.digitalWallets, ManagedCard.digitalWallets) &&
        Objects.equals(this.renewalType, ManagedCard.renewalType) &&
        Objects.equals(this.profileId, ManagedCard.profileId) &&
        Objects.equals(this.cardNumberFirstSix, ManagedCard.cardNumberFirstSix) &&
        Objects.equals(this.billingAddress, ManagedCard.billingAddress) &&
        Objects.equals(this.cardNumber, ManagedCard.cardNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiryMmyy, externalHandle, type, cardholderMobileNumber, startMmyy, mode, physicalCardDetails, cardNumberLastFour, nameOnCard, cardLevelClassification, creationTimestamp, currency, id, tag, state, cardBrand, expiryPeriodMonths, friendlyName, cvv, digitalWallets, renewalType, profileId, cardNumberFirstSix, billingAddress, cardNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedCard {\n");
    
    sb.append("    expiryMmyy: ").append(toIndentedString(expiryMmyy)).append("\n");
    sb.append("    externalHandle: ").append(toIndentedString(externalHandle)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cardholderMobileNumber: ").append(toIndentedString(cardholderMobileNumber)).append("\n");
    sb.append("    startMmyy: ").append(toIndentedString(startMmyy)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    physicalCardDetails: ").append(toIndentedString(physicalCardDetails)).append("\n");
    sb.append("    cardNumberLastFour: ").append(toIndentedString(cardNumberLastFour)).append("\n");
    sb.append("    nameOnCard: ").append(toIndentedString(nameOnCard)).append("\n");
    sb.append("    cardLevelClassification: ").append(toIndentedString(cardLevelClassification)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    expiryPeriodMonths: ").append(toIndentedString(expiryPeriodMonths)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    cvv: ").append(toIndentedString(cvv)).append("\n");
    sb.append("    digitalWallets: ").append(toIndentedString(digitalWallets)).append("\n");
    sb.append("    renewalType: ").append(toIndentedString(renewalType)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    cardNumberFirstSix: ").append(toIndentedString(cardNumberFirstSix)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

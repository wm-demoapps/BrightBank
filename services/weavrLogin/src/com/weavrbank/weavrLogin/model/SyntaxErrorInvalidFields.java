/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.   <!-- ReDoc-Inject: <security-definitions> --> 
 *
 * OpenAPI spec version: 3.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.weavrbank.weavrLogin.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
/**
 * SyntaxErrorInvalidFields
 */

public class SyntaxErrorInvalidFields {
  @JsonProperty("fieldName")
  private String fieldName = null;

  @JsonProperty("params")
  private List<String> params = null;

  /**
   * Gets or Sets error
   */
  public enum ErrorEnum {
    REQUIRED("REQUIRED"),
    HAS_TEXT("HAS_TEXT"),
    REQUIRES("REQUIRES"),
    SIZE("SIZE"),
    RANGE("RANGE"),
    IN("IN"),
    NOT_IN("NOT_IN"),
    REGEX("REGEX"),
    EXACTLY("EXACTLY"),
    AT_LEAST("AT_LEAST"),
    AT_MOST("AT_MOST"),
    ALL_OR_NONE("ALL_OR_NONE");

    private String value;

    ErrorEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ErrorEnum fromValue(String input) {
      for (ErrorEnum b : ErrorEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("error")
  private ErrorEnum error = null;

  public SyntaxErrorInvalidFields fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public SyntaxErrorInvalidFields params(List<String> params) {
    this.params = params;
    return this;
  }

  public SyntaxErrorInvalidFields addParamsItem(String paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  public List<String> getParams() {
    return params;
  }

  public void setParams(List<String> params) {
    this.params = params;
  }

  public SyntaxErrorInvalidFields error(ErrorEnum error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  public ErrorEnum getError() {
    return error;
  }

  public void setError(ErrorEnum error) {
    this.error = error;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyntaxErrorInvalidFields SyntaxError_invalidFields = (SyntaxErrorInvalidFields) o;
    return Objects.equals(this.fieldName, SyntaxError_invalidFields.fieldName) &&
        Objects.equals(this.params, SyntaxError_invalidFields.params) &&
        Objects.equals(this.error, SyntaxError_invalidFields.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, params, error);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyntaxErrorInvalidFields {\n");
    
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

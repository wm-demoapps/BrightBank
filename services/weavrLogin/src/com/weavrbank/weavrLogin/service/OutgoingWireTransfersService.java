package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface OutgoingWireTransfersService {

  /**
   * Create an outgoing wire transfer transaction
   * Transfers funds from managed accounts to an external bank account.  The Outgoing Wire Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).  Note that even if the transaction is created successfully, you still need to check its state in order to determine if it is pending completion of an authentication challenge by the user.  
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /outgoing_wire_transfers")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void outgoingWireTransferCreate(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Get an outgoing wire transfer transaction
   * Retrieves the outgoing wire transfer identified by the &#x60;id&#x60; path parameter.
    * @param id The unique identifier of the Outgoing Wire Transfer transaction. (required)
   */
  @RequestLine("GET /outgoing_wire_transfers/{id}")
  @Headers({
    "Accept: ",  })
  void outgoingWireTransferGet(@Param("id") String id);

  /**
   * Issue a one-time password that can be used to verify an outgoing wire transfer
   * Starts the verification process for an outgoing wire transfer in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/otp/{channel}&#x60; endpoint.  You should only start this process if the outgoing wire transfer &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;.  _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the Outgoing Wire Transfer transaction. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /outgoing_wire_transfers/{id}/challenges/otp/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void outgoingWireTransferSCAChallenge(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Issue a push notification that can be used to verify an outgoing wire transfer
   * Starts the verification process for an outgoing wire transfer in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/push/{channel}&#x60; endpoint.  You should only start this process if the outgoing wire transfer &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;. 
    * @param id The unique identifier of the Outgoing Wire Transfer transaction. (required)
    * @param channel  (required)
   */
  @RequestLine("POST /outgoing_wire_transfers/{id}/challenges/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void outgoingWireTransferSCAChallengePush(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Verify an outgoing wire transfer using a one-time password
   * Completes the verification process for an outgoing wire transfer.  If the outcome of the verification is successful, the outgoing wire transfer transaction is executed.  _Note that on the Sandbox Environment, text messages are not sent and the &#x60;verificationCode&#x60; is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the Outgoing Wire Transfer transaction. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /outgoing_wire_transfers/{id}/challenges/otp/{channel}/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void outgoingWireTransferSCAVerify(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Get all outgoing wire transfer transactions
   * Retrieves all the outgoing wire transfer transactions performed by the logged-in identity.
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param profileId Filter by the managed account/card profile. Leave out to fetch all managed accounts/card. (optional)
    * @param instrument Filter by the source instrument id (which must be a managed account). (optional)
    * @param sourceInstrument_id Filter by the source instrument id. Must be specified when &#x60;source.type&#x60; is provided. (optional)
    * @param sourceInstrument_type Filter by the source instrument type. Must be specified when &#x60;source.id&#x60; is provided. (optional)
    * @param state Filter by the outgoing wire transfer state. Leave out to fetch all states. (optional)
    * @param createdFrom Filter for outgoing wire transfer transactions created after &#x60;createdFrom&#x60; timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions. (optional)
    * @param createdTo Filter for Outgoing Wire Transfer transactions created before &#x60;createdTo&#x60; timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions. (optional)
    * @param tag Filter by the outgoing wire transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)
   */
  @RequestLine("GET /outgoing_wire_transfers?offset={offset}&limit={limit}&profileId={profileId}&instrument={instrument}&sourceInstrument.id={sourceInstrument_id}&sourceInstrument.type={sourceInstrument_type}&state={state}&createdFrom={createdFrom}&createdTo={createdTo}&tag={tag}")
  @Headers({
    "Accept: ",  })
  void outgoingWireTransfersGet(@Param("offset") Integer offset, @Param("limit") Integer limit, @Param("profileId") Object profileId, @Param("instrument") Object instrument, @Param("sourceInstrument_id") Object sourceInstrument_id, @Param("sourceInstrument_type") Object sourceInstrument_type, @Param("state") List state, @Param("createdFrom") Long createdFrom, @Param("createdTo") Long createdTo, @Param("tag") String tag);


    /**
     * Get all outgoing wire transfer transactions
     * Retrieves all the outgoing wire transfer transactions performed by the logged-in identity.
     * Note, this is equivalent to the other <code>outgoingWireTransfersGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link OutgoingWireTransfersGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>profileId - Filter by the managed account/card profile. Leave out to fetch all managed accounts/card. (optional)</li>
     *   <li>instrument - Filter by the source instrument id (which must be a managed account). (optional)</li>
     *   <li>sourceInstrument_id - Filter by the source instrument id. Must be specified when &#x60;source.type&#x60; is provided. (optional)</li>
     *   <li>sourceInstrument_type - Filter by the source instrument type. Must be specified when &#x60;source.id&#x60; is provided. (optional)</li>
     *   <li>state - Filter by the outgoing wire transfer state. Leave out to fetch all states. (optional)</li>
     *   <li>createdFrom - Filter for outgoing wire transfer transactions created after &#x60;createdFrom&#x60; timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions. (optional)</li>
     *   <li>createdTo - Filter for Outgoing Wire Transfer transactions created before &#x60;createdTo&#x60; timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions. (optional)</li>
     *   <li>tag - Filter by the outgoing wire transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /outgoing_wire_transfers?offset={offset}&limit={limit}&profileId={profileId}&instrument={instrument}&sourceInstrument.id={sourceInstrument_id}&sourceInstrument.type={sourceInstrument_type}&state={state}&createdFrom={createdFrom}&createdTo={createdTo}&tag={tag}")
    @Headers({
    "Accept: ",    })
    void outgoingWireTransfersGet
    (@QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

}

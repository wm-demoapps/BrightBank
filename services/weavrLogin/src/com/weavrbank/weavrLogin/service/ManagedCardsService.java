package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;
import com.weavrbank.weavrLogin.model.ManagedCardRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface ManagedCardsService {

  /**
   * Assign a managed card
   * If your application requires anonymous cards, Weavr will create a pool of cards that are initially not assigned to any identity. This operation assigns one such previously created managed card from the card pool to the logged-in consumer or corporate identity. 
   */
  @RequestLine("POST /managed_cards/assign")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardAssign();

  /**
   * Block a managed card
   * Blocks the managed card identified by the &#x60;id&#x60; path parameter. This is a reversible action and the card can be unblocked using the _managedCardUnblock_ operation.
    * @param id The unique identifier of a managed card. (required)
   */
  @RequestLine("POST /managed_cards/{id}/block")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardBlock(@Param("id") String id);

  /**
   * Create a managed card
   * Creates a managed card for the consumer or corporate identity. The Managed Card Profile (configured in the Multi Portal) specified determines the behaviour and restrictions that the managed card will have. 
    * @param body  (optional)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /managed_cards")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void managedCardCreate(ManagedCardRequest body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Get a managed card
   * Returns all details of the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id The unique identifier of a card. (required)
   */
  @RequestLine("GET /managed_cards/{id}")
  @Headers({
    "Accept: ",  })
  void managedCardGet(@Param("id") String id);

  /**
   * Activate a physical card
   * Activates the physical card identified by the &#x60;id&#x60; path paramter.
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/activate")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalActivate(@Param("id") String id);

  /**
   * Reset contactless limit for a physical card
   * For security purposes, the cardholder needs to provide the PIN after a number of contactless purchases. Use this operation to reset the physical card&#x27;s contactless limit. The contactless limit can only be reset for physical cards having the wearable form factor. 
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/contactless_limit/reset")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalContactlessLimitReset(@Param("id") String id);

  /**
   * Get PIN for a physical card
   * Retrieves the PIN of the physical card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("GET /managed_cards/{id}/physical/pin")
  @Headers({
    "Accept: ",  })
  void managedCardPhysicalPinGet(@Param("id") String id);

  /**
   * Unblock PIN for a physical card
   * Physical cards can be marked as &#x60;pinBlocked&#x60; if there are too many failed PIN attempts.  Use this operation to unblock a PIN so that the card can be used again. 
    * @param id  (required)
   */
  @RequestLine("PATCH /managed_cards/{id}/physical/pin/unblock")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalPinUnBlock(@Param("id") String id);

  /**
   * Replace a damaged physical card
   * Report as damaged, and replace the physical card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/replace_damaged")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalReplaceDamaged(@Param("id") String id);

  /**
   * Replace a lost or stolen physical card
   * Issue a replacement for the physical card, identified by the &#x60;id&#x60; path parameter, that has already been reported as lost or stolen.  Any funds (that are not blocked pending a purchase for a previous authorisation) remaining on the card will be automatically transferred to the new replacement card. 
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/replace_lost_stolen")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalReplaceLostOrStolen(@Param("id") String id);

  /**
   * Report a physical card as lost
   * Report the physical card identified by the &#x60;id&#x60; path parameter as lost. This will deactivate the instrument and a new card will need to be requested.
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/report_lost")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalReportLost(@Param("id") String id);

  /**
   * Report a physical card as stolen
   * Report the physical card identified by the &#x60;id&#x60; path parameter as stolen. This will destroy the instrument and a new replacement card will need to be requested.  Once a replacement is requested, any funds remaining on this destroyed card will be transferred to the replacement card.\&quot; 
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical/report_stolen")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalReportStolen(@Param("id") String id);

  /**
   * Upgrade a card to physical
   * Upgrades the virtual card identified by the &#x60;id&#x60; path parameter to physical.  Before cards can be upgraded, a physcial card programme must be set up and the card profile configuration updated accordingly. 
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/physical")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardPhysicalUpgrade(@Param("id") String id);

  /**
   * Remove a managed card
   * Destroys the managed card identified by the &#x60;id&#x60; path parameter. Unlike block, this action is not reversible.  A managed card must be empty before it can be destroyed using this operation. 
    * @param id The unique identifier of a managed card. (required)
   */
  @RequestLine("POST /managed_cards/{id}/remove")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardRemove(@Param("id") String id);

  /**
   * Create spend rules for a managed card
   * Create the spend rules associated with the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("POST /managed_cards/{id}/spend_rules")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardSpendRulesCreate(@Param("id") String id);

  /**
   * Delete all spend rules for a managed card
   * Remove all spend rules associated with the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("DELETE /managed_cards/{id}/spend_rules")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardSpendRulesDelete(@Param("id") String id);

  /**
   * Get all spend rules for a managed card
   * Fetch the list of spend rules associated with the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("GET /managed_cards/{id}/spend_rules")
  @Headers({
    "Accept: ",  })
  void managedCardSpendRulesGet(@Param("id") String id);

  /**
   * Set spend rules for a managed card
   * Set the spend rules associated with the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("PUT /managed_cards/{id}/spend_rules")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardSpendRulesSet(@Param("id") String id);

  /**
   * Update spend rules for a managed card
   * Must be user after a POST, to update individual spend rules associated with the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id  (required)
   */
  @RequestLine("PATCH /managed_cards/{id}/spend_rules")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardSpendRulesUpdate(@Param("id") String id);

  /**
   * Get a managed card statement
   * Returns a list of transactions against the managed card identified by the &#x60;id&#x60; path parameter, matching the criteria provided in the request.
    * @param id The unique identifier of a managed card. (required)
    * @param accept A request parameter specifying the type of response the client would like. Must be one of &#x60;application/json&#x60;, &#x60;application/pdf&#x60; or &#x60;text/csv&#x60;.  The default response type (&#x60;application/json&#x60;) will be returned if specified incorrectly or not specified.  (optional)
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param orderByTimestamp Orders the result in ascending or descending order.   - ASC: Ascending order, oldest transactions first.   - DESC: Descending order, most recent transactions first.  If not specified, the transactions will be returned in descending order.  (optional)
    * @param fromTimestamp Filter for transactions having transaction timestamp after &#x60;fromTimestamp&#x60;. Timestamp is expressed in Epoch timestamp using millisecond precision. (optional)
    * @param toTimestamp Filter for transactions having transaction timestamp before the &#x60;toTimestamp&#x60;. Timestamp is expressed in Epoch timestamp using millisecond precision. (optional)
   */
  @RequestLine("GET /managed_cards/{id}/statement?offset={offset}&limit={limit}&orderByTimestamp={orderByTimestamp}&fromTimestamp={fromTimestamp}&toTimestamp={toTimestamp}")
  @Headers({
    "Accept: ",
    "accept: {accept}"  })
  void managedCardStatement(@Param("id") String id, @Param("accept") String accept, @Param("offset") Integer offset, @Param("limit") Integer limit, @Param("orderByTimestamp") String orderByTimestamp, @Param("fromTimestamp") Long fromTimestamp, @Param("toTimestamp") Long toTimestamp);


    /**
     * Get a managed card statement
     * Returns a list of transactions against the managed card identified by the &#x60;id&#x60; path parameter, matching the criteria provided in the request.
     * Note, this is equivalent to the other <code>managedCardStatement</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link ManagedCardStatementQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param id The unique identifier of a managed card. (required)
     * @param accept A request parameter specifying the type of response the client would like. Must be one of &#x60;application/json&#x60;, &#x60;application/pdf&#x60; or &#x60;text/csv&#x60;.  The default response type (&#x60;application/json&#x60;) will be returned if specified incorrectly or not specified.  (optional)
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>orderByTimestamp - Orders the result in ascending or descending order.   - ASC: Ascending order, oldest transactions first.   - DESC: Descending order, most recent transactions first.  If not specified, the transactions will be returned in descending order.  (optional)</li>
     *   <li>fromTimestamp - Filter for transactions having transaction timestamp after &#x60;fromTimestamp&#x60;. Timestamp is expressed in Epoch timestamp using millisecond precision. (optional)</li>
     *   <li>toTimestamp - Filter for transactions having transaction timestamp before the &#x60;toTimestamp&#x60;. Timestamp is expressed in Epoch timestamp using millisecond precision. (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /managed_cards/{id}/statement?offset={offset}&limit={limit}&orderByTimestamp={orderByTimestamp}&fromTimestamp={fromTimestamp}&toTimestamp={toTimestamp}")
    @Headers({
    "Accept: ",
        "accept: {accept}"    })
    void managedCardStatement
    (@Param("id") String id, @Param("accept") String accept, @QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

  /**
   * Unblock a managed card
   * Unblocks the managed card identified by the &#x60;id&#x60; path parameter. The managed card must have &#x60;state.blockedReason&#x60; as &#x60;USER&#x60; so that it can be unblocked. If the managed card was blocked by &#x60;SYSTEM&#x60;, users cannot unblock it. 
    * @param id The unique identifier of the managed card. (required)
   */
  @RequestLine("POST /managed_cards/{id}/unblock")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardUnblock(@Param("id") String id);

  /**
   * Update a managed card
   * Update the details of the managed card identified by the &#x60;id&#x60; path parameter.
    * @param id The unique identifier of a card. (required)
   */
  @RequestLine("PATCH /managed_cards/{id}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void managedCardUpdate(@Param("id") String id);

  /**
   * Get all managed cards
   * Fetch cards matching the search criteria provided.
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param profileId Filter by the managed account/card profile. Leave out to fetch all managed accounts/card. (optional)
    * @param friendlyName Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.  The exact name must be provided, as wildcards are not supported.  (optional)
    * @param state  (optional)
    * @param state_blockedReason  (optional)
    * @param state_destroyedReason  (optional)
    * @param currency Filter by the managed account/card currency.  Currencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.  (optional)
    * @param type Filter by the type of the card. (optional)
    * @param externalHandle Search by the card&#x27;s &#x60;externalHandle&#x60;. (optional)
    * @param cardNumberFirstSix Filter by first six digits of the card. (optional)
    * @param cardNumberLastFour Filter by last four digits of the card. (optional)
    * @param createdFrom Filter for managed accounts/cards created after &#x60;createdFrom&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards. (optional)
    * @param createdTo Filter for managed accounts/cards created before &#x60;createdTo&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards. (optional)
    * @param mode Filter by card mode (prepaid mode or debit mode). (optional)
    * @param tag Filter by the managed account/card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts/card. (optional)
    * @param parentManagedAccountId Filter by the Id of the parent managed account associated with the card. This is applicable only for debit mode cards. (optional)
    * @param manufacturingState  (optional)
   */
  @RequestLine("GET /managed_cards?offset={offset}&limit={limit}&profileId={profileId}&friendlyName={friendlyName}&state={state}&state.blockedReason={state_blockedReason}&state.destroyedReason={state_destroyedReason}&currency={currency}&type={type}&externalHandle={externalHandle}&cardNumberFirstSix={cardNumberFirstSix}&cardNumberLastFour={cardNumberLastFour}&createdFrom={createdFrom}&createdTo={createdTo}&mode={mode}&tag={tag}&parentManagedAccountId={parentManagedAccountId}&manufacturingState={manufacturingState}")
  @Headers({
    "Accept: ",  })
  void managedCardsGet(@Param("offset") Integer offset, @Param("limit") Integer limit, @Param("profileId") Object profileId, @Param("friendlyName") String friendlyName, @Param("state") List state, @Param("state_blockedReason") List state_blockedReason, @Param("state_destroyedReason") List state_destroyedReason, @Param("currency") Object currency, @Param("type") String type, @Param("externalHandle") String externalHandle, @Param("cardNumberFirstSix") String cardNumberFirstSix, @Param("cardNumberLastFour") String cardNumberLastFour, @Param("createdFrom") Long createdFrom, @Param("createdTo") Long createdTo, @Param("mode") String mode, @Param("tag") String tag, @Param("parentManagedAccountId") String parentManagedAccountId, @Param("manufacturingState") List manufacturingState);


    /**
     * Get all managed cards
     * Fetch cards matching the search criteria provided.
     * Note, this is equivalent to the other <code>managedCardsGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link ManagedCardsGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>profileId - Filter by the managed account/card profile. Leave out to fetch all managed accounts/card. (optional)</li>
     *   <li>friendlyName - Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.  The exact name must be provided, as wildcards are not supported.  (optional)</li>
     *   <li>state -  (optional)</li>
     *   <li>state_blockedReason -  (optional)</li>
     *   <li>state_destroyedReason -  (optional)</li>
     *   <li>currency - Filter by the managed account/card currency.  Currencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.  (optional)</li>
     *   <li>type - Filter by the type of the card. (optional)</li>
     *   <li>externalHandle - Search by the card&#x27;s &#x60;externalHandle&#x60;. (optional)</li>
     *   <li>cardNumberFirstSix - Filter by first six digits of the card. (optional)</li>
     *   <li>cardNumberLastFour - Filter by last four digits of the card. (optional)</li>
     *   <li>createdFrom - Filter for managed accounts/cards created after &#x60;createdFrom&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards. (optional)</li>
     *   <li>createdTo - Filter for managed accounts/cards created before &#x60;createdTo&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards. (optional)</li>
     *   <li>mode - Filter by card mode (prepaid mode or debit mode). (optional)</li>
     *   <li>tag - Filter by the managed account/card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts/card. (optional)</li>
     *   <li>parentManagedAccountId - Filter by the Id of the parent managed account associated with the card. This is applicable only for debit mode cards. (optional)</li>
     *   <li>manufacturingState -  (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /managed_cards?offset={offset}&limit={limit}&profileId={profileId}&friendlyName={friendlyName}&state={state}&state.blockedReason={state_blockedReason}&state.destroyedReason={state_destroyedReason}&currency={currency}&type={type}&externalHandle={externalHandle}&cardNumberFirstSix={cardNumberFirstSix}&cardNumberLastFour={cardNumberLastFour}&createdFrom={createdFrom}&createdTo={createdTo}&mode={mode}&tag={tag}&parentManagedAccountId={parentManagedAccountId}&manufacturingState={manufacturingState}")
    @Headers({
    "Accept: ",    })
    void managedCardsGet
    (@QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

}

package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;
import com.weavrbank.weavrLogin.model.CorporatesBody;
import com.weavrbank.weavrLogin.model.CreatedCorporate;
import com.weavrbank.weavrLogin.model.EmailSendBody2;
import com.weavrbank.weavrLogin.model.EmailVerifyBody;
import com.weavrbank.weavrLogin.model.InlineResponse200;
import com.weavrbank.weavrLogin.model.InlineResponse409;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface CorporatesService {

  /**
   * Charge fee to a corporate
   * Charge a fee to the corporate identified by the auth token, based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.  The fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal. 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /corporates/fees/charge")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void corporateChargeFee(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Create a corporate
   * Create a corporate identity for a business customer.  The information provided must be accurate and will be passed on for KYB verification with our partner.
    * @param body  (required)
   * @return CreatedCorporate
   */
  @RequestLine("POST /corporates")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",  })
  CreatedCorporate corporateCreate(CorporatesBody body);

  /**
   * Get a corporate
   * Retrieve the details of the logged-in corporate.
   */
  @RequestLine("GET /corporates")
  @Headers({
    "Accept: ",  })
  void corporateGet();

  /**
   * Get KYB for a corporate
   * Returns the KYB status for the logged-in corporate.
   */
  @RequestLine("GET /corporates/kyb")
  @Headers({
    "Accept: ",  })
  void corporateKybGet();

  /**
   * Start KYB for a corporate
   * Corporates need to complete due diligence (KYB) before they can create instruments and perform transactions.  This operation initiates the due diligence process for the logged-in corporate.  Due Diligence is handled by a KYB provider - you will need to embed the KYB UI Component in your application so that the Corporate will be able to perform the KYB process.  To initialise the KYB UI Component, you need a &#x60;reference&#x60; that is given you in the response of this operation. 
   * @return InlineResponse200
   */
  @RequestLine("POST /corporates/kyb")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",  })
  InlineResponse200 corporateKybStart();

  /**
   * Send an email verification code to the root user
   * The first step in verifying a root user&#x27;s email. The root user whose email address is to be verified is sent an email containing a randomly generated code.  This code must then be provided in the _corporateRootUserEmailVerify_ operation to verify the root user&#x27;s email address.  _Note that on the Sandbox Environment, the &#x60;verificationCode&#x60; is always set to \\\&quot;123456\\\&quot;._ 
    * @param body  (required)
   */
  @RequestLine("POST /corporates/verification/email/send")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void corporateRootUserEmailVerificationCodeSend(EmailSendBody2 body);

  /**
   * Verify email of the root user
   * The second step in verifying the root user&#x27;s email. The randomly generated code sent to the root user via email, using the _corporateRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user&#x27;s email.  This is needed as part of the verification process for basic due diligence.  _Note that on the Sandbox Environment, the &#x60;verificationCode&#x60; is always set to \\\&quot;123456\\\&quot;._ 
    * @param body  (required)
   */
  @RequestLine("POST /corporates/verification/email/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void corporateRootUserEmailVerify(EmailVerifyBody body);

  /**
   * Update a corporate
   * Update the details of the logged-in corporate identity.  The following Corporate details are verified during due diligence (KYB) and cannot be updated via the API once the Corporate has been verified:   - Root User Name   - Root User Surname   - Root User Email   - Root User Mobile Country Code   - Root User Mobile Number  *If these details need to be changed after due diligence is completed, please contact Customer Support to restart the Due Diligence process.* 
   */
  @RequestLine("PATCH /corporates")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void corporateUpdate();

}

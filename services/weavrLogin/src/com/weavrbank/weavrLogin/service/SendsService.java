package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface SendsService {

  /**
   * Create a send transaction
   * Sends funds between managed accounts and managed cards belonging to *different* corporate or consumer identities.  The Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees). 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /sends")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void sendCreate(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Get a send transaction
   * Retrieve the send transaction identified by the &#x60;id&#x60; path parameter.
    * @param id The unique identifier of the Send transaction. (required)
   */
  @RequestLine("GET /sends/{id}")
  @Headers({
    "Accept: ",  })
  void sendGet(@Param("id") String id);

  /**
   * Issue a one-time password that can be used to verify a send
   * Starts the verification process for a send in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/otp/{channel}&#x60; endpoint.  You should only start this process if the send &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;.  _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the send transaction. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /sends/{id}/challenges/otp/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void sendSCAChallenge(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Issue a push notification that can be used to verify Send transaction
   * Starts the verification process for a Send in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/push/{channel}&#x60; endpoint.  You should only start this process if the Send transaction &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;. 
    * @param id The unique identifier of the send transaction. (required)
    * @param channel  (required)
   */
  @RequestLine("POST /sends/{id}/challenges/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void sendSCAChallengePush(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Verify a send using a one-time password
   * Completes the verification process for a Send.  If the outcome of the verification is successful, the send is executed.  _Note that on the Sandbox Environment, text messages are not sent and the &#x60;verificationCode&#x60; is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the send transaction. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /sends/{id}/challenges/otp/{channel}/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void sendSCAVerify(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Get all send transactions
   * Retrieves all the send transactions performed by the logged-in identity.
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param profileId Filter by the Send profile. Leave out to fetch all entries. (optional)
    * @param instrumentId Filter by the source instrument id. (optional)
    * @param source_id Filter by the source instrument id. Must be specified when &#x60;source.type&#x60; is provided. (optional)
    * @param source_type Filter by the source instrument type. Must be specified when &#x60;source.id&#x60; is provided. (optional)
    * @param state Filter by the Send transaction state. Leave out to fetch all states. (optional)
    * @param createdFrom Filter for send transactions created after &#x60;createdFrom&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions. (optional)
    * @param createdTo Filter for send transactions created before &#x60;createdTo&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions. (optional)
    * @param tag Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)
   */
  @RequestLine("GET /sends?offset={offset}&limit={limit}&profileId={profileId}&instrumentId={instrumentId}&source.id={source_id}&source.type={source_type}&state={state}&createdFrom={createdFrom}&createdTo={createdTo}&tag={tag}")
  @Headers({
    "Accept: ",  })
  void sendsGet(@Param("offset") Integer offset, @Param("limit") Integer limit, @Param("profileId") Object profileId, @Param("instrumentId") Object instrumentId, @Param("source_id") Object source_id, @Param("source_type") Object source_type, @Param("state") List state, @Param("createdFrom") Long createdFrom, @Param("createdTo") Long createdTo, @Param("tag") String tag);


    /**
     * Get all send transactions
     * Retrieves all the send transactions performed by the logged-in identity.
     * Note, this is equivalent to the other <code>sendsGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link SendsGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>profileId - Filter by the Send profile. Leave out to fetch all entries. (optional)</li>
     *   <li>instrumentId - Filter by the source instrument id. (optional)</li>
     *   <li>source_id - Filter by the source instrument id. Must be specified when &#x60;source.type&#x60; is provided. (optional)</li>
     *   <li>source_type - Filter by the source instrument type. Must be specified when &#x60;source.id&#x60; is provided. (optional)</li>
     *   <li>state - Filter by the Send transaction state. Leave out to fetch all states. (optional)</li>
     *   <li>createdFrom - Filter for send transactions created after &#x60;createdFrom&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions. (optional)</li>
     *   <li>createdTo - Filter for send transactions created before &#x60;createdTo&#x60; timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions. (optional)</li>
     *   <li>tag - Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /sends?offset={offset}&limit={limit}&profileId={profileId}&instrumentId={instrumentId}&source.id={source_id}&source.type={source_type}&state={state}&createdFrom={createdFrom}&createdTo={createdTo}&tag={tag}")
    @Headers({
    "Accept: ",    })
    void sendsGet
    (@QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

}

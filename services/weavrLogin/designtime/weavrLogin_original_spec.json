{"openapi":"3.1.0","info":{"version":"3.29.0","title":"Weavr Multi Product API","x-logo":{"url":"https://storage.googleapis.com/weavr-cdn/weavr_logo-new.png","backgroundColor":"#FFFFFF","altText":"Weavr"},"description":"Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.\n\nBy integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.\n\n# Authentication\nEach request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).\n\nAlmost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n","contact":{"name":"Weavr","url":"https://weavr.io"}},"servers":[{"description":"Weavr Sandbox Environment","url":"https://sandbox.weavr.io/multi"}],"tags":[{"name":"Access","description":"Manage authentication for your users."},{"name":"Passwords","description":"Manage your users' passwords."},{"name":"Additional Factors","description":"Manage additional strong customer authentication factors for your users.  \n"},{"name":"Authorised Users","description":"Corporate and Consumer identities can invite authorised users to access their account. Once on-boarded, authorised users can create and manage instruments and transactions on behalf of the identity they are on-boarded with.\n\nIn case of **Corporate Identities**, authorised users are typically employees who have access to company's banking products such as cards and bank accounts.\n\nIn case of **Consumer Identities**, authorised users are typically children/teens whose parents want them to have access to banking products such as cards and bank accounts.\n\nNote that `/users` endpoints are to be used only for performing operations related to authorised users - getting or updating the details of _root_ users is to be done via the respective `/consumers` or `/corporates` endpoints.\n"},{"name":"Corporates","description":"Corporates are identities representing companies. Once on-boarded, Corporates can create and manage their own instruments via your application."},{"name":"Consumers","description":"Consumers are identities representing individuals. Once on-boarded, Consumers can create and manage their own instruments via your application."},{"name":"Managed Accounts","description":"Managed Accounts are a type of financial instrument offered by Weavr.\n\nThey hold funds for their owner, and can be upgraded to IBANs so as to receive and send funds to instruments outside of the Weavr Platform, via Wire Transfers.\n\nManaged accounts can also be used as source and destination instruments in the `transfer` and `send` transactions.\n"},{"name":"Managed Cards","description":"Managed Cards are a type of financial instrument offered by Weavr.\n\nYou can create virtual or physical cards that are issued to the consumer or corporate identity.\n\nA card created in prepaid mode has its own balance, whereas a card created in debit mode does not have its own balance but taps into the balance of its parent managed account.\n"},{"name":"Sends","description":"The Send transaction is used to send funds between managed accounts and managed cards belonging to different identities. \n"},{"name":"Transfers","description":"The Transfer transaction is used to transfer funds between managed accounts and managed cards belonging to same identity.\n"},{"name":"Outgoing Wire Transfers","description":"The Outgoing Wire Transfer transaction is used to transfer funds from managed accounts to an external bank account.\n"}],"x-tagGroups":[{"name":"User Authentication","tags":["Access","Passwords","Additional Factors"]},{"name":"Identities","tags":["Corporates","Consumers"]},{"name":"User Management","tags":["Authorised Users"]},{"name":"Instruments","tags":["Managed Accounts","Managed Cards"]},{"name":"Transactions","tags":["Sends","Transfers","Outgoing Wire Transfers"]}],"paths":{"/login_with_password":{"post":{"tags":["Access"],"description":"Authenticate a user with the `email` and `password` that they provided when registering.\n\nGiven that the user credentials are correct, this returns a `token` that can then be used to authorise\nother secured operations. In case the password is expired, a temporary `token` is returned, which can be used\nsolely for updating the password.\n\nThe token returned is valid for 5 minutes from last activity.\n","summary":"Login with password","operationId":"loginWithPassword","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email","password"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"token":{"type":"string","description":"An authorisation token (valid for 5 minutes from last activity) identifying the user to be used in the `auth_token` authorization header for secured operations."},"tokenType":{"$ref":"#/components/schemas/TokenType"},"identity":{"description":"The identity to which the logged-in user belongs to.","$ref":"#/components/schemas/IdentityId"},"credentials":{"description":"The unique identifier for the logged-in user.","$ref":"#/components/schemas/TypeId"}}}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"description":"The authentication credentials are not found or are incorrect."},"409":{"$ref":"#/components/responses/LoginWithPasswordConflict"},"423":{"$ref":"#/components/responses/Locked"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/identities":{"get":{"tags":["Access"],"description":"Retrieves a list of identities available to the holder of the token.","summary":"Get user identities","operationId":"userIdentities","responses":{"200":{"$ref":"#/components/responses/UserIdentitiesGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserIdentitiesConflict"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/stepup/challenges/otp/{channel}":{"post":{"tags":["Access"],"description":"Initiates the step-up token process by sending an SMS with an one-time-password to a device belonging to the logged-in user that was previously enrolled through `/authentication_factors/otp/{channel}` endpoint.\n\nThis process is required for endpoints that require a step-up token to complete the call.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n","summary":"Issue a one-time password that can be used to step-up a token","operationId":"stepupSCAChallenge","parameters":[{"$ref":"#/components/parameters/channel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/StepUpSCAChallengeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/stepup/challenges/otp/{channel}/verify":{"post":{"tags":["Access"],"description":"Completes the verification process for a step up token.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n","summary":"Verify a step-up token using a one-time password","operationId":"stepupSCAVerify","parameters":[{"$ref":"#/components/parameters/channel"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["verificationCode"],"type":"object","properties":{"verificationCode":{"description":"The code received by the user on the device.","$ref":"#/components/schemas/Nonce"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/StepUpSCAVerifyConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/stepup/challenges/push/{channel}":{"post":{"tags":["Access"],"description":"Initiates the step-up token process by submitting a push notification to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the token step-up isn't already in flight.\n","summary":"Issue a push notification that can be used to step-up a token","operationId":"stepupSCAChallengePush","parameters":[{"$ref":"#/components/parameters/scaPushChannel"}],"responses":{"200":{"$ref":"#/components/responses/StepUpSCAChallengePushResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/StepUpSCAChallengePushConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/logout":{"post":{"tags":["Access"],"description":"Logs out the user and terminates the session identified by the `auth_token` in the Authorization Header.","summary":"Logout","operationId":"logout","responses":{"200":{"$ref":"#/components/responses/LogoutResponse"},"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/passwords/{user_id}/create":{"post":{"tags":["Passwords"],"description":"Create a new password for the user identified by the `user_id` path parameter.","summary":"Create a password","operationId":"passwordCreate","parameters":[{"$ref":"#/components/parameters/userId"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["password"],"type":"object","properties":{"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"passwordInfo":{"$ref":"#/components/schemas/PasswordInfo"},"token":{"type":"string","description":"The authorisation token to be used in the Authorization header for secured operations."}}}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/CreatePasswordConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/passwords/update":{"post":{"tags":["Passwords"],"description":"Update the password for the logged-in user.","summary":"Update a password","operationId":"passwordUpdate","requestBody":{"$ref":"#/components/requestBodies/PasswordUpdateRequest"},"responses":{"200":{"$ref":"#/components/responses/PasswordResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/PasswordUpdateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/passwords/validate":{"post":{"tags":["Passwords"],"description":"Check that a password adheres to all complexity checks.","summary":"Validate a password","operationId":"passwordValidate","requestBody":{"$ref":"#/components/requestBodies/PasswordValidateRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/PasswordValidateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/passwords/lost_password/start":{"post":{"tags":["Passwords"],"description":"Initiate the lost password process.\n\nIf the email address provided is associated with an active user, an email will be sent, containing a URL that redirects the user to change their password.\nThe URL contains request parameters for all of the parameters required to change the password for the user via the `/passwords/lost_password/resume` POST endpoint.\n","summary":"Initiate lost password process","operationId":"lostPasswordInitiate","requestBody":{"$ref":"#/components/requestBodies/EmailRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/LostPasswordInitiateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/passwords/lost_password/resume":{"post":{"tags":["Passwords"],"description":"This is the second and final step in updating the password of a user who forgot their password.","summary":"Resume lost password process","operationId":"lostPasswordResume","requestBody":{"$ref":"#/components/requestBodies/LostPasswordResumeRequest"},"responses":{"200":{"$ref":"#/components/responses/TokenResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/LostPasswordResumeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/authentication_factors":{"get":{"tags":["Additional Factors"],"description":"Retrieves the list of authentication factors that can be used to verify the logged-in user.","summary":"Get user authentication factors","operationId":"authFactorsGet","responses":{"200":{"$ref":"#/components/responses/AuthFactorsGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/authentication_factors/otp/{channel}":{"post":{"tags":["Additional Factors"],"description":"This is the first step in enrolling the logged-in user's mobile device, where a one-time password is sent to the device.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n","summary":"Enrol a user device for authentication using one-time passwords","operationId":"enrolDeviceUsingOtpStepOne","parameters":[{"$ref":"#/components/parameters/channel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/EnrolDeviceUsingOtpStepOneConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[],"auth_token":[]}]}},"/authentication_factors/otp/{channel}/verify":{"post":{"tags":["Additional Factors"],"description":"The second step in enrolling the logged-in user (root or authorised user) to use one-time-passwords to enable verification of transactions.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always set to \\\"123456\\\"._\n","summary":"Verify enrolment of a user device for authentication using one-time passwords","operationId":"enrolDeviceUsingOtpStepTwo","parameters":[{"$ref":"#/components/parameters/channel"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["verificationCode"],"type":"object","properties":{"verificationCode":{"description":"The code received by the user on the device.","$ref":"#/components/schemas/Nonce"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/EnrolDeviceUsingOtpStepTwoConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[],"auth_token":[]}]}},"/authentication_factors/push/{channel}":{"post":{"tags":["Additional Factors"],"description":"This is the first step in enrolling the logged-in user's mobile device, where a push notification is sent to the device.\n","summary":"Enrol a user device for authentication using push notifications","operationId":"enrolDeviceUsingPush","parameters":[{"$ref":"#/components/parameters/scaPushChannel"}],"responses":{"200":{"$ref":"#/components/responses/EnrolDeviceUsingPushResponse"},"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/EnrolDeviceUsingPushConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[],"auth_token":[]}]}},"/access_token":{"post":{"tags":["Access"],"description":"Acquire a `Bearer` token granting you access to securely perform delegated access operations on behalf of the given `identity`.\n\nThe token representing the identity should be included in the `Authorization` header of all requests to endpoints representing Delegated Access operations.\n","summary":"Acquire a new access token","operationId":"requestAccessToken","requestBody":{"$ref":"#/components/requestBodies/AccessTokenRequest"},"responses":{"200":{"$ref":"#/components/responses/AccessTokenResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"description":"The auth token is not specified or is incorrect."},"423":{"$ref":"#/components/responses/Locked"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[],"auth_token":[]}]}},"/users":{"post":{"tags":["Authorised Users"],"description":"Creates a user linked to the logged-in corporate or consumer identity.\n\nOnce on-boarded, users have access to all instruments (cards and accounts) of the identity.\n\nApplication-specific permissions to limit what each user can view and do need to be implemented in your application.\n","summary":"Create a user","operationId":"userCreate","requestBody":{"$ref":"#/components/requestBodies/UserCreateRequest"},"responses":{"200":{"$ref":"#/components/responses/UserResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Authorised Users"],"description":"Fetches all authorised users associated with the corporate or consumer identity the logged-in user belongs to.","summary":"Get all users","operationId":"usersGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/active"},{"$ref":"#/components/parameters/email"}],"responses":{"200":{"$ref":"#/components/responses/UsersGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/users/{user_id}":{"get":{"tags":["Authorised Users"],"description":"Retrieves the user identified by the `user_id` path parameter.","summary":"Get a user","operationId":"userGetById","parameters":[{"$ref":"#/components/parameters/userId"}],"responses":{"200":{"$ref":"#/components/responses/UserResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Authorised Users"],"description":"Update the details of a user identified by the `user_id` in the the path parameter.\n\nOnly the fields that are specified in the request body will be updated. All other fields will remain unchanged.\n","summary":"Update a user","operationId":"userUpdate","parameters":[{"$ref":"#/components/parameters/userId"}],"requestBody":{"$ref":"#/components/requestBodies/UserPatchRequest"},"responses":{"200":{"$ref":"#/components/responses/UserResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserPatchConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/users/{user_id}/activate":{"post":{"tags":["Authorised Users"],"description":"Activate the user identified by the `user_id` path parameter.\n\nBy default, any new users created will be automatically activated. This operation needs to be used only if the user was previously de-activated using the _userDeactivate_ operation, or if the user was de-activated automatically after multiple incorrect login attempts.\n","summary":"Activate a user","operationId":"userActivate","parameters":[{"$ref":"#/components/parameters/userId"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/users/{user_id}/deactivate":{"post":{"tags":["Authorised Users"],"description":"De-activate the user identified by the `user_id` path parameter.\n\nDeactivated users cannot log in or execute any operations with their credentials.\n\nThis operations is not final and a user can be re-activated using the userActivate operation. Note that another active user would need to log in so as to re-activate the de-activated user.\n","summary":"Deactivate a user","operationId":"userDeactivate","parameters":[{"$ref":"#/components/parameters/userId"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/users/{user_id}/invite":{"post":{"tags":["Authorised Users"],"summary":"Send a user invite","operationId":"userInviteSend","description":"Once a user is created using the _userCreate_ operation, the user needs to setup his/her password.\n\nAn invitation needs to be sent to the user in order to be able to set up the password for the first time. The invitation email, which remains valid for 1 month, will contain a URL having all information required to setup the password via the _userInviteConsume_.\n","parameters":[{"$ref":"#/components/parameters/userIdExplode"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserInviteSendConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/users/{user_id}/invite/validate":{"post":{"tags":["Authorised Users"],"description":"Check if a user's invite is still valid. This operation is useful to avoid having the user fill in a form only to be held by a validation issue (eg. expired invite).","summary":"Validate a user invite","operationId":"userInviteValidate","parameters":[{"$ref":"#/components/parameters/userIdExplode"}],"requestBody":{"$ref":"#/components/requestBodies/UserInviteValidateRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserInviteValidateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/users/{user_id}/invite/consume":{"post":{"tags":["Authorised Users"],"description":"Consumes an invitation perviously sent to the user via _userInviteSend_. This is needed so that the invited user sets up the password.\n\n_Note that on the Sandbox Environment, the `inviteCode` is always set to \\\"123456\\\"._\n","summary":"Consume a user invite","operationId":"userInviteConsume","parameters":[{"$ref":"#/components/parameters/userIdExplode"}],"requestBody":{"$ref":"#/components/requestBodies/UserInviteConsumeRequest"},"responses":{"200":{"$ref":"#/components/responses/TokenResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/UserInviteConsumeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/users/verification/email/send":{"post":{"tags":["Authorised Users"],"description":"The first step in verifying an authorised user's email. The authorised user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _authorisedUserEmailVerify_ operation to verify the authorised user's email address.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n","summary":"Send an email verification code to the authorised user","operationId":"authorisedUserEmailVerificationCodeSend","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["EMAIL_NOT_FOUND"]}}}}}},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/users/verification/email/verify":{"post":{"tags":["Authorised Users"],"description":"The second step in verifying the authorised user's email. The randomly generated code sent to the authorised user via\nemail, using the _authorisedUserEmailVerificationCodeSend_ operation, is submitted here to verify the authorised user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n","summary":"Verify email of the authorised user","operationId":"authorisedUserEmailVerify","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email","verificationCode"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"verificationCode":{"$ref":"#/components/schemas/VerificationCode"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["VERIFICATION_CODE_INVALID"]}}}}}},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"description":"Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}},"security":[{"api_key":[]}]}},"/users/kyc":{"post":{"tags":["Authorised Users"],"description":"Perform the kyc for a corporate user.\n","summary":"Start KYC for the user","operationId":"userKyc","responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"required":["reference"],"type":"object","properties":{"reference":{"type":"string","pattern":"^[0-9]+$","description":"The reference required to initialise the KYB UI Component."}}}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["EMAIL_NOT_VERIFIED","MOBILE_NOT_VERIFIED","KYC_ALREADY_APPROVED","KYC_PENDING_REVIEW","KYC_REJECTED","KYB_IDENTITY_NOT_APPROVED"]}}}}}},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"description":"Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}},"security":[{"api_key":[]}]}},"/corporates":{"post":{"tags":["Corporates"],"description":"Create a corporate identity for a business customer.  The information provided must be accurate and will be passed on for KYB verification with our partner.","summary":"Create a corporate","operationId":"corporateCreate","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","rootUser","company","acceptedTerms","ipAddress","baseCurrency"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"required":["name","surname","email","mobile","companyPosition"],"type":"object","description":"The root user needs to be a director or a legal representative of the corporate that is being onboarded - this user cannot be deactivated.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC as part of the Corporate's due diligence process.\n","properties":{"name":{"maxLength":50,"type":"string","description":"The first name of the root user."},"surname":{"maxLength":50,"type":"string","description":"The last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"companyPosition":{"$ref":"#/components/schemas/CompanyPosition"},"dateOfBirth":{"description":"Date of birth of the root user.","$ref":"#/components/schemas/Date"}}},"company":{"required":["name","type","registrationCountry"],"type":"object","description":"The details associated with the company being on-boarded. The details provided need to match exactly with the details provided during KYB. ","properties":{"type":{"$ref":"#/components/schemas/CompanyType"},"businessAddress":{"$ref":"#/components/schemas/Address"},"name":{"maxLength":100,"type":"string","description":"The registered name of the company."},"registrationNumber":{"maxLength":20,"minLength":1,"type":"string","description":"The registration number of the company."},"registrationCountry":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"The country of company registration, in ISO 3166 alpha-2 format."}}},"industry":{"$ref":"#/components/schemas/Industry"},"sourceOfFunds":{"$ref":"#/components/schemas/CorporateSourceOfFunds"},"sourceOfFundsOther":{"type":"string","description":"Description of source of funds in case `OTHER` was chosen.","deprecated":true},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the corporate root user has accepted the terms and conditions."},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the corporate user doing the registration."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."}}}}}},"responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedCorporate"}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/CorporateCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]},"get":{"tags":["Corporates"],"description":"Retrieve the details of the logged-in corporate.","summary":"Get a corporate","operationId":"corporateGet","responses":{"200":{"$ref":"#/components/responses/CorporateResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Corporates"],"description":"Update the details of the logged-in corporate identity.\n\nThe following Corporate details are verified during due diligence (KYB) and cannot be updated via the API once the Corporate has been verified:\n  - Root User Name\n  - Root User Surname\n  - Root User Email\n  - Root User Mobile Country Code\n  - Root User Mobile Number\n\n*If these details need to be changed after due diligence is completed, please contact Customer Support to restart the Due Diligence process.*\n","summary":"Update a corporate","operationId":"corporateUpdate","requestBody":{"$ref":"#/components/requestBodies/CorporateUpdateRequest"},"responses":{"200":{"$ref":"#/components/responses/CorporateResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/CorporateUpdateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/corporates/verification/email/send":{"post":{"tags":["Corporates"],"description":"The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _corporateRootUserEmailVerify_ operation to verify the root user's email address.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n","summary":"Send an email verification code to the root user","operationId":"corporateRootUserEmailVerificationCodeSend","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/EmailVerificationConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/corporates/verification/email/verify":{"post":{"tags":["Corporates"],"description":"The second step in verifying the root user's email. The randomly generated code sent to the root user via\nemail, using the _corporateRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n","summary":"Verify email of the root user","operationId":"corporateRootUserEmailVerify","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email","verificationCode"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"verificationCode":{"$ref":"#/components/schemas/VerificationCode"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/VerifyConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/corporates/kyb":{"post":{"tags":["Corporates"],"description":"Corporates need to complete due diligence (KYB) before they can create instruments and perform transactions.\n\nThis operation initiates the due diligence process for the logged-in corporate.\n\nDue Diligence is handled by a KYB provider - you will need to embed the KYB UI Component in your application so that the Corporate will be able to perform the KYB process.\n\nTo initialise the KYB UI Component, you need a `reference` that is given you in the response of this operation.\n","summary":"Start KYB for a corporate","operationId":"corporateKybStart","responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"required":["reference"],"type":"object","properties":{"reference":{"type":"string","pattern":"^[0-9]+$","description":"The reference required to initialise the KYB UI Component."}}}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["KYB_ALREADY_APPROVED","KYB_PERMANENTLY_REJECTED","KYB_PENDING_REVIEW"]}}}}}},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Corporates"],"description":"Returns the KYB status for the logged-in corporate.","summary":"Get KYB for a corporate","operationId":"corporateKybGet","responses":{"200":{"$ref":"#/components/responses/CorporateKybGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/corporates/fees/charge":{"post":{"tags":["Corporates"],"description":"Charge a fee to the corporate identified by the auth token, based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n","summary":"Charge fee to a corporate","operationId":"corporateChargeFee","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/ChargeFeeRequest"},"responses":{"200":{"$ref":"#/components/responses/ChargeFeeResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ChargeFeeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/consumers":{"post":{"tags":["Consumers"],"description":"Create a Consumer Identity to represent an Individual.\n\nThe information provided must be accurate as it will be passed on for KYC verification with our partner.\n\n*Incorrect information may incur a re-processing fee.*\n","summary":"Create a consumer","operationId":"consumerCreate","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","rootUser","ipAddress","acceptedTerms"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"$ref":"#/components/schemas/RootUserRequest"},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the user doing the registration."},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the consumer has accepted the terms and conditions."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"The fee group which the consumer is bound to. Fee groups provide the possibility of different fees to users under the same profile. If fee groups are not required, ignore this field."},"sourceOfFunds":{"$ref":"#/components/schemas/ConsumerSourceOfFunds"},"sourceOfFundsOther":{"deprecated":true,"type":"string","description":"Description of source of funds in case `OTHER` was chosen."}}}}}},"responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Consumer"}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ConsumerCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]},"get":{"tags":["Consumers"],"description":"Retrieve the details of the logged-in Consumer.","summary":"Get a consumer","operationId":"consumerGet","responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Consumer"}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Consumers"],"description":"Update the details of the logged-in consumer identity.\n\nIf the Consumer root user has already completed KYC, the following details cannot be updated:\n  - name\n  - surname\n  - email\n  - mobile Country Code\n  - mobile Number\n  - date of Birth\n  - address\n","summary":"Update a consumer","operationId":"consumerUpdate","requestBody":{"$ref":"#/components/requestBodies/ConsumerUpdateRequest"},"responses":{"200":{"$ref":"#/components/responses/ConsumerResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ConsumerUpdateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/consumers/verification/email/send":{"post":{"tags":["Consumers"],"description":"The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user's email address.\n\nNote that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\".\n","summary":"Send an email verification code to the root user","operationId":"consumerRootUserEmailVerificationCodeSend","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/EmailVerificationConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/consumers/verification/email/verify":{"post":{"tags":["Consumers"],"description":"The second step in verifying the root user's email. The randomly generated code sent to the root user via\nemail, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\"123456\\\".\n","summary":"Verify email of the root user","operationId":"consumerRootUserEmailVerify","requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["email","verificationCode"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"verificationCode":{"$ref":"#/components/schemas/VerificationCode"}}}}}},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/VerifyConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/consumers/kyc":{"post":{"tags":["Consumers"],"description":"Consumers need to complete due diligence (KYC) before they can create instruments and fund transaction.\n\nThis operation initiates the due diligence process for the logged-in consumer. \n\nThe level of KYC that will be required from the user can be provided as an optional parameter - if this is not provided, `KYC_LEVEL_2` will be assumed. \n\nDue Diligence is handled by a KYC provider, you will need to embed the KYC UI Component in your application to show the KYC screens to your users.\n\nTo initialise the KYC UI Component, you need a `reference` that is given to you in the response of this operation.\n","summary":"Start KYC for a consumer","operationId":"consumerKycStart","requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"kycLevel":{"$ref":"#/components/schemas/KycLevel","description":"The KYC level that the consumer will be assigned to, which determines the due diligence details that the user will need to provide."}}}}}},"responses":{"200":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"required":["reference","kycLevel"],"type":"object","properties":{"reference":{"type":"string","pattern":"^[0-9]+$","description":"The reference used to initialise the KYC UI Component."},"kycLevel":{"$ref":"#/components/schemas/KycLevel","description":"The KYC level assigned to the consumer."}}}}}},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ConsumerKycStartConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Consumers"],"description":"Returns the KYC status for the logged-in consumer.","summary":"Get KYC for a consumer","operationId":"consumerKycGet","responses":{"200":{"$ref":"#/components/responses/ConsumerKycGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/consumers/kyc_mobile_sumsub":{"post":{"tags":["Consumers"],"description":"Consumers need to complete due diligence (KYC) before they can create instruments and perform transactions.\nUse this call instead of `/consumers/kyc` only in case where the KYC is to be performed using a mobile device.\nThe level of KYC that will be required from the user can be provided as an optional parameter - if this is not \nprovided, `KYC_LEVEL_2` will be assumed. \nThe information returned in the response is to be used to integrate directly with Sumsub Mobile SDK.\n","summary":"Start consumer KYC on mobile","operationId":"consumerKycStartSumsubMobile","requestBody":{"$ref":"#/components/requestBodies/ConsumerKycLevelRequest"},"responses":{"200":{"$ref":"#/components/responses/ConsumerKycStartSumsubMobileResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ConsumerKycStartSumsubMobileConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/consumers/fees/charge":{"post":{"tags":["Consumers"],"description":"Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n","summary":"Charge fee to a consumer","operationId":"consumerChargeFee","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/ChargeFeeRequest"},"responses":{"200":{"$ref":"#/components/responses/ChargeFeeResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ChargeFeeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts":{"get":{"tags":["Managed Accounts"],"description":"Retrieves all managed accounts belonging to the logged-in identity.","summary":"Get all managed accounts","operationId":"managedAccountsGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/profileId"},{"$ref":"#/components/parameters/friendlyName"},{"$ref":"#/components/parameters/state"},{"$ref":"#/components/parameters/state_blockedReason"},{"$ref":"#/components/parameters/state_destroyedReason"},{"$ref":"#/components/parameters/currency"},{"$ref":"#/components/parameters/createdFrom"},{"$ref":"#/components/parameters/createdTo"},{"$ref":"#/components/parameters/tag"}],"responses":{"200":{"$ref":"#/components/responses/ManagedAccountsGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"post":{"tags":["Managed Accounts"],"description":"Creates a managed account for the consumer or corporate identity.\nThe Managed Account Profile (configured in the Multi Portal) specified determines the behavior and restrictions that the managed account will have.\"\n","summary":"Create a managed account","operationId":"managedAccountCreate","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/ManagedAccountCreateRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedAccountResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"409":{"$ref":"#/components/responses/ManagedAccountCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}":{"get":{"tags":["Managed Accounts"],"description":"Fetch the managed account identified by the `id` in path.","summary":"Get a managed account","operationId":"managedAccountGet","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Managed Account.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedAccountResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Managed Accounts"],"description":"Update the details for the managed account identified by the `id` in the path.","summary":"Update a managed account","operationId":"managedAccountUpdate","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the managed account.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedAccountUpdateRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedAccountResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}/iban":{"post":{"tags":["Managed Accounts"],"description":"Assign an IBAN to a Managed Account.\n\nIBANs enable managed accounts to receive and send funds via wire transfers.\n\nAssigning an IBAN to a Managed Account may be done asynchronously, in which case the `ManagedAccountIBAN.state` will be set to `PENDING_ALLOCATION` until bank details are ready to use.\n","summary":"Upgrade a managed account with IBAN","operationId":"managedAccountsIBANUpgrade","parameters":[{"name":"id","in":"path","required":true,"style":"simple","explode":false,"description":"The unique identifier of the Managed Account.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedAccountIBANResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedAccountsIBANUpgradeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Managed Accounts"],"description":"Fetch the IBAN details associated with the Managed Account identified by the `id` in the path.","summary":"Get a managed account IBAN","operationId":"managedAccountIBANGet","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedAccountIBANResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}/block":{"post":{"tags":["Managed Accounts"],"description":"Temporarily blocks a managed account.","summary":"Block a managed account","operationId":"managedAccountBlock","parameters":[{"name":"id","in":"path","description":"The unique identifier of the managed account.","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedAccountBlockConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}/unblock":{"post":{"tags":["Managed Accounts"],"description":"Unblocks the managed account identified by the `id` path parameter.\nThe managed account must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed account was blocked by `SYSTEM`, users cannot unblock it.\n","summary":"Unblock a managed account","operationId":"managedAccountUnblock","parameters":[{"name":"id","in":"path","description":"The unique identifier of the managed account.","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedAccountUnblockConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}/statement":{"get":{"tags":["Managed Accounts"],"description":"Returns a list of transactions against the managed account identified by the `id` path parameter, matching the criteria provided in the request.","summary":"Get a managed account statement","operationId":"managedAccountStatement","parameters":[{"name":"id","in":"path","description":"The unique identifier of the managed account.","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/accept"},{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/orderByTimestamp"},{"$ref":"#/components/parameters/fromTimestamp"},{"$ref":"#/components/parameters/toTimestamp"},{"$ref":"#/components/parameters/showFundMovementsOnly"}],"responses":{"200":{"$ref":"#/components/responses/ManagedAccountStatementResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_accounts/{id}/remove":{"post":{"tags":["Managed Accounts"],"description":"Destroys the managed account identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed account must be emptied from any remaining funds before it can be destroyed.\n","summary":"Remove a managed account","operationId":"managedAccountRemove","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the managed account.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedAccountRemoveConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards":{"post":{"tags":["Managed Cards"],"description":"Creates a managed card for the consumer or corporate identity.\nThe Managed Card Profile (configured in the Multi Portal) specified determines the behaviour and restrictions that the managed card will have.\n","summary":"Create a managed card","operationId":"managedCardCreate","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/ManagedCardConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Managed Cards"],"description":"Fetch cards matching the search criteria provided.","summary":"Get all managed cards","operationId":"managedCardsGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/profileId"},{"$ref":"#/components/parameters/friendlyName"},{"$ref":"#/components/parameters/state"},{"$ref":"#/components/parameters/state_blockedReason"},{"$ref":"#/components/parameters/state_destroyedReason"},{"$ref":"#/components/parameters/currency"},{"$ref":"#/components/parameters/card_type"},{"name":"externalHandle","in":"query","required":false,"description":"Search by the card's `externalHandle`.","schema":{"type":"string"}},{"name":"cardNumberFirstSix","in":"query","required":false,"description":"Filter by first six digits of the card.","schema":{"maxLength":6,"minLength":6,"pattern":"^[0-9]*$","type":"string"}},{"name":"cardNumberLastFour","in":"query","required":false,"description":"Filter by last four digits of the card.","schema":{"maxLength":4,"minLength":4,"pattern":"^[0-9]*$","type":"string"}},{"$ref":"#/components/parameters/createdFrom"},{"$ref":"#/components/parameters/createdTo"},{"name":"mode","in":"query","required":false,"description":"Filter by card mode (prepaid mode or debit mode).","schema":{"type":"string","enum":["DEBIT_MODE","PREPAID_MODE"]}},{"$ref":"#/components/parameters/tag"},{"name":"parentManagedAccountId","in":"query","required":false,"description":"Filter by the Id of the parent managed account associated with the card. This is applicable only for debit mode cards.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"name":"manufacturingState","in":"query","required":false,"schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/ManufacturingState"}}}],"responses":{"200":{"$ref":"#/components/responses/ManagedCardPageResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}":{"get":{"tags":["Managed Cards"],"description":"Returns all details of the managed card identified by the `id` path parameter.","summary":"Get a managed card","operationId":"managedCardGet","parameters":[{"name":"id","in":"path","description":"The unique identifier of a card.","required":true,"schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedCardResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Managed Cards"],"description":"Update the details of the managed card identified by the `id` path parameter.","summary":"Update a managed card","operationId":"managedCardUpdate","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of a card.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardUpdateRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardUpdateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/block":{"post":{"tags":["Managed Cards"],"description":"Blocks the managed card identified by the `id` path parameter. This is a reversible action and the card can be unblocked using the _managedCardUnblock_ operation.","summary":"Block a managed card","operationId":"managedCardBlock","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of a managed card.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardBlockConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/unblock":{"post":{"tags":["Managed Cards"],"description":"Unblocks the managed card identified by the `id` path parameter.\nThe managed card must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed card was blocked by `SYSTEM`, users cannot unblock it.\n","summary":"Unblock a managed card","operationId":"managedCardUnblock","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the managed card.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardUnblockConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/remove":{"post":{"tags":["Managed Cards"],"description":"Destroys the managed card identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed card must be empty before it can be destroyed using this operation.\n","summary":"Remove a managed card","operationId":"managedCardRemove","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of a managed card.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardRemoveConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/statement":{"get":{"tags":["Managed Cards"],"description":"Returns a list of transactions against the managed card identified by the `id` path parameter, matching the criteria provided in the request.","summary":"Get a managed card statement","operationId":"managedCardStatement","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of a managed card.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/accept"},{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"name":"orderByTimestamp","in":"query","required":false,"description":"Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n","schema":{"type":"string","enum":["ASC","DESC"]}},{"name":"fromTimestamp","in":"query","required":false,"description":"Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.","schema":{"type":"integer","format":"int64"}},{"name":"toTimestamp","in":"query","required":false,"description":"Filter for transactions having transaction timestamp before the `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedCardStatementResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/assign":{"post":{"tags":["Managed Cards"],"description":"If your application requires anonymous cards, Weavr will create a pool of cards that are initially not assigned to any identity.\nThis operation assigns one such previously created managed card from the card pool to the logged-in consumer or corporate identity.\n","summary":"Assign a managed card","operationId":"managedCardAssign","requestBody":{"$ref":"#/components/requestBodies/ManagedCardAssignRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"409":{"$ref":"#/components/responses/ManagedCardAssignConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/spend_rules":{"get":{"tags":["Managed Cards"],"summary":"Get all spend rules for a managed card","operationId":"managedCardSpendRulesGet","description":"Fetch the list of spend rules associated with the managed card identified by the `id` path parameter.","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedCardSpendRulesGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"put":{"deprecated":true,"tags":["Managed Cards"],"summary":"Set spend rules for a managed card","operationId":"managedCardSpendRulesSet","description":"Set the spend rules associated with the managed card identified by the `id` path parameter.","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardSpendRulesRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardSpendRulesSetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardSpendRulesSetConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"post":{"tags":["Managed Cards"],"summary":"Create spend rules for a managed card","operationId":"managedCardSpendRulesCreate","description":"Create the spend rules associated with the managed card identified by the `id` path parameter.","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/CardLevelSpendRulesRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardSpendRulesCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"patch":{"tags":["Managed Cards"],"summary":"Update spend rules for a managed card","operationId":"managedCardSpendRulesUpdate","description":"Must be user after a POST, to update individual spend rules associated with the managed card identified by the `id` path parameter.","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/CardLevelSpendRulesRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardSpendRulesUpdateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"delete":{"tags":["Managed Cards"],"summary":"Delete all spend rules for a managed card","operationId":"managedCardSpendRulesDelete","description":"Remove all spend rules associated with the managed card identified by the `id` path parameter.","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical":{"post":{"tags":["Managed Cards"],"description":"Upgrades the virtual card identified by the `id` path parameter to physical.\n\nBefore cards can be upgraded, a physcial card programme must be set up and the card profile configuration updated accordingly.\n","summary":"Upgrade a card to physical","operationId":"managedCardPhysicalUpgrade","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardPhysicalUpgradeRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalUpgradeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/activate":{"post":{"tags":["Managed Cards"],"description":"Activates the physical card identified by the `id` path paramter.","summary":"Activate a physical card","operationId":"managedCardPhysicalActivate","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardPhysicalActivateRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalActivateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/pin":{"get":{"tags":["Managed Cards"],"description":"Retrieves the PIN of the physical card identified by the `id` path parameter.","summary":"Get PIN for a physical card","operationId":"managedCardPhysicalPinGet","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/ManagedCardPhysicalPinGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalPinGetConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/pin/unblock":{"patch":{"tags":["Managed Cards"],"description":"Physical cards can be marked as `pinBlocked` if there are too many failed PIN attempts.\n\nUse this operation to unblock a PIN so that the card can be used again.\n","summary":"Unblock PIN for a physical card","operationId":"managedCardPhysicalPinUnBlock","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalPinUnBlockConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/replace_damaged":{"post":{"tags":["Managed Cards"],"description":"Report as damaged, and replace the physical card identified by the `id` path parameter.","summary":"Replace a damaged physical card","operationId":"managedCardPhysicalReplaceDamaged","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardPhysicalReplaceDamagedRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalReplaceDamagedConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/report_lost":{"post":{"tags":["Managed Cards"],"description":"Report the physical card identified by the `id` path parameter as lost. This will deactivate the instrument and a new card will need to be requested.","summary":"Report a physical card as lost","operationId":"managedCardPhysicalReportLost","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalReportLostConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/report_stolen":{"post":{"tags":["Managed Cards"],"description":"Report the physical card identified by the `id` path parameter as stolen. This will destroy the instrument and a new replacement card will need to be requested.\n\nOnce a replacement is requested, any funds remaining on this destroyed card will be transferred to the replacement card.\"\n","summary":"Report a physical card as stolen","operationId":"managedCardPhysicalReportStolen","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalReportStolenConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/managed_cards/{id}/physical/replace_lost_stolen":{"post":{"tags":["Managed Cards"],"description":"Issue a replacement for the physical card, identified by the `id` path parameter, that has already been reported as lost or stolen.\n\nAny funds (that are not blocked pending a purchase for a previous authorisation) remaining on the card will be automatically transferred to the new replacement card.\n","summary":"Replace a lost or stolen physical card","operationId":"managedCardPhysicalReplaceLostOrStolen","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"requestBody":{"$ref":"#/components/requestBodies/ManagedCardPhysicalReplaceLostOrStolenRequest"},"responses":{"200":{"$ref":"#/components/responses/ManagedCardGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalReplaceLostOrStolenConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"api_key":[]}]}},"/managed_cards/{id}/physical/contactless_limit/reset":{"post":{"tags":["Managed Cards"],"description":"For security purposes, the cardholder needs to provide the PIN after a number of contactless purchases. Use this operation to reset the physical card's contactless limit.\nThe contactless limit can only be reset for physical cards having the wearable form factor.\n","summary":"Reset contactless limit for a physical card","operationId":"managedCardPhysicalContactlessLimitReset","parameters":[{"name":"id","in":"path","required":true,"style":"simple","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"404":{"$ref":"#/components/responses/NotFound"},"409":{"$ref":"#/components/responses/ManagedCardPhysicalContactlessLimitResetConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/transfers":{"post":{"tags":["Transfers"],"description":"Transfers funds between managed accounts and managed cards belonging to the same corporate or consumer identity.\n\nThe Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n","summary":"Create a transfer transaction","operationId":"transferCreate","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/CreateTransferRequest"},"responses":{"200":{"$ref":"#/components/responses/TransferResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/TransferConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Transfers"],"description":"Retrieves all the transfer transactions performed by the logged-in identity.","summary":"Get all transfer transactions","operationId":"transfersGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/transferProfileId"},{"$ref":"#/components/parameters/instrumentId"},{"$ref":"#/components/parameters/transactionState"},{"$ref":"#/components/parameters/transferCreatedFrom"},{"$ref":"#/components/parameters/transferCreatedTo"},{"$ref":"#/components/parameters/transferTag"}],"responses":{"200":{"$ref":"#/components/responses/TransfersGetResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/transfers/{id}":{"get":{"tags":["Transfers"],"description":"Retrieve the transfer transaction identified by the `id` path parameter.","summary":"Get a transfer transaction","operationId":"transferGet","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Transfer transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/TransferResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/sends":{"post":{"tags":["Sends"],"description":"Sends funds between managed accounts and managed cards belonging to *different* corporate or consumer identities.\n\nThe Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n","summary":"Create a send transaction","operationId":"sendCreate","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/SendCreateRequest"},"responses":{"200":{"$ref":"#/components/responses/SendResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/SendCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Sends"],"description":"Retrieves all the send transactions performed by the logged-in identity.","summary":"Get all send transactions","operationId":"sendsGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/sendProfileId"},{"$ref":"#/components/parameters/instrumentId"},{"$ref":"#/components/parameters/sourceId"},{"$ref":"#/components/parameters/sourceType"},{"$ref":"#/components/parameters/sendState"},{"$ref":"#/components/parameters/sendCreatedFrom"},{"$ref":"#/components/parameters/sendCreatedTo"},{"$ref":"#/components/parameters/sendTag"}],"responses":{"200":{"$ref":"#/components/responses/SendsGetPageResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/sends/{id}":{"get":{"tags":["Sends"],"description":"Retrieve the send transaction identified by the `id` path parameter.","summary":"Get a send transaction","operationId":"sendGet","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Send transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/SendResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/sends/{id}/challenges/otp/{channel}":{"post":{"tags":["Sends"],"description":"Starts the verification process for a send in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.\n\nYou should only start this process if the send `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n","summary":"Issue a one-time password that can be used to verify a send","operationId":"sendSCAChallenge","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the send transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/channel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/SendSCAChallengeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/sends/{id}/challenges/otp/{channel}/verify":{"post":{"tags":["Sends"],"description":"Completes the verification process for a Send.\n\nIf the outcome of the verification is successful, the send is executed.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n","summary":"Verify a send using a one-time password","operationId":"sendSCAVerify","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the send transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/channel"}],"requestBody":{"$ref":"#/components/requestBodies/SCAVerifyRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/SendSCAVerifyConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/sends/{id}/challenges/push/{channel}":{"post":{"tags":["Sends"],"description":"Starts the verification process for a Send in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the Send transaction `state` is `PENDING_CHALLENGE`.\n","summary":"Issue a push notification that can be used to verify Send transaction","operationId":"sendSCAChallengePush","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the send transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/scaPushChannel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/SendSCAChallengePushConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/outgoing_wire_transfers":{"post":{"tags":["Outgoing Wire Transfers"],"summary":"Create an outgoing wire transfer transaction","operationId":"outgoingWireTransferCreate","description":"Transfers funds from managed accounts to an external bank account.\n\nThe Outgoing Wire Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n\nNote that even if the transaction is created successfully, you still need to check its state in order to determine if it is pending completion of an authentication challenge by the user. \n","parameters":[{"$ref":"#/components/parameters/idempotency-ref"}],"requestBody":{"$ref":"#/components/requestBodies/OutgoingWireTransferCreateRequest"},"responses":{"200":{"$ref":"#/components/responses/OutgoingWireTransferResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/OutgoingWireTransferCreateConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]},"get":{"tags":["Outgoing Wire Transfers"],"description":"Retrieves all the outgoing wire transfer transactions performed by the logged-in identity.","summary":"Get all outgoing wire transfer transactions","operationId":"outgoingWireTransfersGet","parameters":[{"$ref":"#/components/parameters/offset"},{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/profileId"},{"$ref":"#/components/parameters/owtInstrument"},{"$ref":"#/components/parameters/sourceInstrument_id"},{"$ref":"#/components/parameters/sourceInstrument_type"},{"$ref":"#/components/parameters/owtState"},{"name":"createdFrom","in":"query","required":false,"description":"Filter for outgoing wire transfer transactions created after `createdFrom` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.","schema":{"type":"integer","format":"int64"}},{"name":"createdTo","in":"query","required":false,"description":"Filter for Outgoing Wire Transfer transactions created before `createdTo` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.","schema":{"type":"integer","format":"int64"}},{"name":"tag","in":"query","required":false,"description":"Filter by the outgoing wire transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.","schema":{"type":"string"}}],"responses":{"200":{"$ref":"#/components/responses/OutgoingWireTransfersGetPageResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"}},"security":[{"auth_token":[],"api_key":[]}]}},"/outgoing_wire_transfers/{id}":{"get":{"tags":["Outgoing Wire Transfers"],"description":"Retrieves the outgoing wire transfer identified by the `id` path parameter.","summary":"Get an outgoing wire transfer transaction","operationId":"outgoingWireTransferGet","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Outgoing Wire Transfer transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}}],"responses":{"200":{"$ref":"#/components/responses/OutgoingWireTransferResponse"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/InstrumentForbidden"},"404":{"$ref":"#/components/responses/NotFound"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"}},"security":[{"auth_token":[],"api_key":[]}]}},"/outgoing_wire_transfers/{id}/challenges/otp/{channel}":{"post":{"tags":["Outgoing Wire Transfers"],"description":"Starts the verification process for an outgoing wire transfer in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.\n\nYou should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n","summary":"Issue a one-time password that can be used to verify an outgoing wire transfer","operationId":"outgoingWireTransferSCAChallenge","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Outgoing Wire Transfer transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/channel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/OutgoingWireTransferSCAChallengeConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/outgoing_wire_transfers/{id}/challenges/otp/{channel}/verify":{"post":{"tags":["Outgoing Wire Transfers"],"description":"Completes the verification process for an outgoing wire transfer.\n\nIf the outcome of the verification is successful, the outgoing wire transfer transaction is executed.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n","summary":"Verify an outgoing wire transfer using a one-time password","operationId":"outgoingWireTransferSCAVerify","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Outgoing Wire Transfer transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/channel"}],"requestBody":{"$ref":"#/components/requestBodies/SCAVerifyRequest"},"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"409":{"$ref":"#/components/responses/OutgoingWireTransferSCAVerifyConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}},"/outgoing_wire_transfers/{id}/challenges/push/{channel}":{"post":{"tags":["Outgoing Wire Transfers"],"description":"Starts the verification process for an outgoing wire transfer in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.\n","summary":"Issue a push notification that can be used to verify an outgoing wire transfer","operationId":"outgoingWireTransferSCAChallengePush","parameters":[{"name":"id","in":"path","required":true,"description":"The unique identifier of the Outgoing Wire Transfer transaction.","schema":{"type":"string","pattern":"^[0-9]+$"}},{"$ref":"#/components/parameters/scaPushChannel"}],"responses":{"204":{"$ref":"#/components/responses/NoContent"},"400":{"$ref":"#/components/responses/BadRequestError"},"401":{"$ref":"#/components/responses/Unauthorized"},"403":{"$ref":"#/components/responses/Forbidden"},"405":{"$ref":"#/components/responses/MethodNotAllowed"},"409":{"$ref":"#/components/responses/OutgoingWireTransferSCAChallengePushConflict"},"429":{"$ref":"#/components/responses/TooManyRequests"},"500":{"$ref":"#/components/responses/InternalServerError"},"503":{"$ref":"#/components/responses/ServiceUnavailable"},"default":{"$ref":"#/components/responses/Error"}},"security":[{"auth_token":[],"api_key":[]}]}}},"components":{"parameters":{"request-ref":{"name":"request-ref","in":"header","description":"A unique call reference included in every call, that enables the receiver to avoid duplicate handling of a webhook request (e.g. webhook was resent).","required":false,"schema":{"type":"string"}},"published-timestamp":{"name":"published-timestamp","in":"header","description":"The timestamp, expressed in Epoch timestamp using millisecond precision, when this event was published.","required":true,"style":"simple","explode":false,"schema":{"type":"integer","format":"int64"}},"signature":{"name":"signature","in":"header","description":"The signature to verify the authenticity of this request.  This is the base64 hash (HmacSHA256) of the `published-timestamp` using your API key.","required":true,"style":"simple","explode":false,"schema":{"type":"string"}},"channel":{"name":"channel","in":"path","required":true,"description":"The unique identifier for the channel.","schema":{"$ref":"#/components/schemas/SCAOtpChannel"}},"scaPushChannel":{"name":"channel","in":"path","required":true,"schema":{"$ref":"#/components/schemas/SCAPushChannel"}},"userId":{"name":"user_id","in":"path","required":true,"description":"The user id for which this password is created.","schema":{"$ref":"#/components/schemas/UserId"}},"offset":{"name":"offset","in":"query","required":false,"description":"The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results.","schema":{"minimum":0,"type":"integer","format":"int32"}},"limit":{"name":"limit","in":"query","required":false,"description":"The limit of the results for paging, starting at the offset. Limit is always capped at 100.","schema":{"maximum":100,"minimum":1,"type":"integer","format":"int32"}},"active":{"name":"active","in":"query","required":false,"description":"Filter for active or deactivated users. Leave out to fetch all users.","schema":{"type":"boolean"}},"email":{"name":"email","in":"query","required":false,"description":"Filter by the email address of the user.","schema":{"$ref":"#/components/schemas/Email"}},"userIdExplode":{"name":"user_id","in":"path","required":true,"description":"The unique identifier for the user.","style":"simple","explode":false,"schema":{"$ref":"#/components/schemas/UserId"}},"idempotency-ref":{"name":"idempotency-ref","in":"header","description":"A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours.","required":false,"schema":{"type":"string"}},"profileId":{"name":"profileId","in":"query","required":false,"description":"Filter by the managed account/card profile. Leave out to fetch all managed accounts/card.","schema":{"$ref":"#/components/schemas/ProfileId"}},"friendlyName":{"name":"friendlyName","in":"query","required":false,"description":"Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.\n\nThe exact name must be provided, as wildcards are not supported.\n","schema":{"minLength":1,"maxLength":50,"type":"string"}},"state":{"name":"state","in":"query","required":false,"schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/InstrumentState"}}},"state_blockedReason":{"name":"state.blockedReason","in":"query","required":false,"schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/BlockedReason"}}},"state_destroyedReason":{"name":"state.destroyedReason","in":"query","required":false,"schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/DestroyedReason"}}},"currency":{"name":"currency","in":"query","required":false,"description":"Filter by the managed account/card currency.\n\nCurrencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.\n","schema":{"$ref":"#/components/schemas/Currency"}},"createdFrom":{"name":"createdFrom","in":"query","required":false,"description":"Filter for managed accounts/cards created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.","schema":{"type":"integer","format":"int64"}},"createdTo":{"name":"createdTo","in":"query","required":false,"description":"Filter for managed accounts/cards created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.","schema":{"type":"integer","format":"int64"}},"tag":{"name":"tag","in":"query","required":false,"description":"Filter by the managed account/card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts/card.","schema":{"type":"string"}},"accept":{"name":"accept","in":"header","description":"A request parameter specifying the type of response the client would like. Must be one of `application/json`, `application/pdf` or `text/csv`.\n\nThe default response type (`application/json`) will be returned if specified incorrectly or not specified.\n","required":false,"schema":{"type":"string"}},"orderByTimestamp":{"name":"orderByTimestamp","in":"query","required":false,"description":"Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n","schema":{"type":"string","enum":["ASC","DESC"]}},"fromTimestamp":{"name":"fromTimestamp","in":"query","required":false,"description":"Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.","schema":{"type":"integer","format":"int64"}},"toTimestamp":{"name":"toTimestamp","in":"query","required":false,"description":"Filter for transactions having transaction timestamp before `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.","schema":{"type":"integer","format":"int64"}},"showFundMovementsOnly":{"name":"showFundMovementsOnly","in":"query","required":false,"description":"Returns only the entries which contain fund movements.","schema":{"type":"boolean"}},"card_type":{"name":"type","in":"query","required":false,"description":"Filter by the type of the card.","schema":{"type":"string","enum":["VIRTUAL","PHYSICAL"]}},"transferProfileId":{"name":"profileId","in":"query","required":false,"description":"Filter by the transfer profile. Leave out to fetch all transfer transactions.","schema":{"$ref":"#/components/schemas/ProfileId"}},"instrumentId":{"name":"instrumentId","in":"query","required":false,"description":"Filter by the source instrument id.","schema":{"$ref":"#/components/schemas/InstrumentId"}},"transactionState":{"name":"state","in":"query","required":false,"description":"Filter by the transfer transaction state. Leave out to fetch all states.","schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/TransactionState"}}},"transferCreatedFrom":{"name":"createdFrom","in":"query","required":false,"description":"Filter for transfer transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.","schema":{"type":"integer","format":"int64"}},"transferCreatedTo":{"name":"createdTo","in":"query","required":false,"description":"Filter for transfer transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.","schema":{"type":"integer","format":"int64"}},"transferTag":{"name":"tag","in":"query","required":false,"description":"Filter by the transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.","schema":{"type":"string"}},"sendProfileId":{"name":"profileId","in":"query","required":false,"description":"Filter by the Send profile. Leave out to fetch all entries.","schema":{"$ref":"#/components/schemas/ProfileId"}},"sourceId":{"name":"source.id","in":"query","required":false,"description":"Filter by the source instrument id. Must be specified when `source.type` is provided.","schema":{"$ref":"#/components/schemas/Id"}},"sourceType":{"name":"source.type","in":"query","required":false,"description":"Filter by the source instrument type. Must be specified when `source.id` is provided.","schema":{"$ref":"#/components/schemas/InstrumentType"}},"sendState":{"name":"state","in":"query","required":false,"description":"Filter by the Send transaction state. Leave out to fetch all states.","schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/SendState"}}},"sendCreatedFrom":{"name":"createdFrom","in":"query","required":false,"description":"Filter for send transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.","schema":{"type":"integer","format":"int64"}},"sendCreatedTo":{"name":"createdTo","in":"query","required":false,"description":"Filter for send transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.","schema":{"type":"integer","format":"int64"}},"sendTag":{"name":"tag","in":"query","required":false,"description":"Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.","schema":{"type":"string"}},"owtInstrument":{"name":"instrument","in":"query","required":false,"description":"Filter by the source instrument id (which must be a managed account).","schema":{"type":"object","properties":{"type":{"$ref":"#/components/schemas/SourceInstrumentType"},"id":{"$ref":"#/components/schemas/Id"}}}},"sourceInstrument_id":{"name":"sourceInstrument.id","in":"query","required":false,"description":"Filter by the source instrument id. Must be specified when `source.type` is provided.","schema":{"$ref":"#/components/schemas/Id"}},"sourceInstrument_type":{"name":"sourceInstrument.type","in":"query","required":false,"description":"Filter by the source instrument type. Must be specified when `source.id` is provided.","schema":{"$ref":"#/components/schemas/SourceInstrumentType"}},"owtState":{"name":"state","in":"query","required":false,"description":"Filter by the outgoing wire transfer state. Leave out to fetch all states.","schema":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/OutgoingWireTransferState"}}}},"requestBodies":{"LoginWithPasswordRequest":{"required":true,"content":{"application/json":{"schema":{"required":["email","password"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"SCAVerifyRequest":{"required":true,"content":{"application/json":{"schema":{"required":["verificationCode"],"type":"object","properties":{"verificationCode":{"description":"The code received by the user on the device.","$ref":"#/components/schemas/Nonce"}}}}}},"PasswordCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["password"],"type":"object","properties":{"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"PasswordUpdateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["oldPassword","newPassword"],"type":"object","properties":{"oldPassword":{"$ref":"#/components/schemas/SensitivePassword"},"newPassword":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"PasswordValidateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["password"],"type":"object","properties":{"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"EmailRequest":{"required":true,"content":{"application/json":{"schema":{"required":["email"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"}}}}}},"LostPasswordResumeRequest":{"required":true,"content":{"application/json":{"schema":{"required":["email","nonce","newPassword"],"type":"object","properties":{"nonce":{"$ref":"#/components/schemas/Nonce"},"email":{"$ref":"#/components/schemas/Email"},"newPassword":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"AccessTokenRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"identity":{"$ref":"#/components/schemas/IdentityId"}}}}}},"UserCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["email","name","surname"],"type":"object","properties":{"name":{"maxLength":20,"type":"string","description":"The first name of the user."},"surname":{"maxLength":20,"type":"string","description":"The last name of the user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the authorised user.","$ref":"#/components/schemas/Date"}}}}}},"UserPatchRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"name":{"maxLength":20,"type":"string","description":"The first name of the user."},"surname":{"maxLength":20,"type":"string","description":"The last name of the user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the authorised user.","$ref":"#/components/schemas/Date"}}}}}},"UserInviteValidateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["inviteCode"],"type":"object","properties":{"inviteCode":{"$ref":"#/components/schemas/Nonce"}}}}}},"UserInviteConsumeRequest":{"required":true,"content":{"application/json":{"schema":{"required":["inviteCode","password"],"type":"object","properties":{"inviteCode":{"$ref":"#/components/schemas/Nonce"},"password":{"$ref":"#/components/schemas/SensitivePassword"}}}}}},"CorporateCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","rootUser","company","acceptedTerms","ipAddress","baseCurrency"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"required":["name","surname","email","mobile","companyPosition"],"type":"object","description":"The root user needs to be a director or a legal representative of the corporate that is being onboarded - this user cannot be deactivated.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC as part of the Corporate's due diligence process.\n","properties":{"name":{"maxLength":50,"type":"string","description":"The first name of the root user."},"surname":{"maxLength":50,"type":"string","description":"The last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"companyPosition":{"$ref":"#/components/schemas/CompanyPosition"},"dateOfBirth":{"description":"Date of birth of the root user.","$ref":"#/components/schemas/Date"}}},"company":{"required":["name","type","registrationCountry"],"type":"object","description":"The details associated with the company being on-boarded. The details provided need to match exactly with the details provided during KYB. ","properties":{"type":{"$ref":"#/components/schemas/CompanyType"},"businessAddress":{"$ref":"#/components/schemas/Address"},"name":{"maxLength":100,"type":"string","description":"The registered name of the company."},"registrationNumber":{"maxLength":20,"minLength":1,"type":"string","description":"The registration number of the company."},"registrationCountry":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"The country of company registration, in ISO 3166 alpha-2 format."}}},"industry":{"$ref":"#/components/schemas/Industry"},"sourceOfFunds":{"$ref":"#/components/schemas/CorporateSourceOfFunds"},"sourceOfFundsOther":{"type":"string","description":"Description of source of funds in case `OTHER` was chosen.","deprecated":true},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the corporate root user has accepted the terms and conditions."},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the corporate user doing the registration."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."}}}}}},"CorporateUpdateRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"tag":{"$ref":"#/components/schemas/Tag"},"industry":{"$ref":"#/components/schemas/Industry"},"sourceOfFunds":{"$ref":"#/components/schemas/CorporateSourceOfFunds"},"sourceOfFundsOther":{"type":"string","deprecated":true,"description":"Description of source of funds in case `OTHER` was chosen."},"companyBusinessAddress":{"$ref":"#/components/schemas/Address"},"feeGroup":{"type":"string","description":"The fee group which the Corporate will be bound to. Do not specify this if you are not using fee groups."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"name":{"maxLength":20,"pattern":"^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$","type":"string","description":"The first name of the Corporate root user."},"surname":{"maxLength":20,"pattern":"^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$","type":"string","description":"The last name of the Corporate root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the authorised user.","$ref":"#/components/schemas/Date"},"resetMobileCounter":{"type":"boolean"}}}}}},"EmailVerifyRequest":{"required":true,"content":{"application/json":{"schema":{"required":["email","verificationCode"],"type":"object","properties":{"email":{"$ref":"#/components/schemas/Email"},"verificationCode":{"$ref":"#/components/schemas/VerificationCode"}}}}}},"ChargeFeeRequest":{"required":true,"content":{"application/json":{"schema":{"description":"The custom fee to be charged to the consumer/corporate.","$ref":"#/components/schemas/Fee"}}}},"ConsumerCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","rootUser","ipAddress","acceptedTerms"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"required":["name","surname","email","mobile","dateOfBirth"],"type":"object","description":"The root user represents the identity.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC, as part of the Consumer's due diligence process.\n","properties":{"name":{"type":"string","description":"The first name of the root user."},"surname":{"type":"string","description":"The last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the consumer root user.","$ref":"#/components/schemas/Date"},"occupation":{"$ref":"#/components/schemas/Occupation"},"address":{"description":"Address of the consumer root user.","$ref":"#/components/schemas/AddressWithNoRequiredFields"},"placeOfBirth":{"type":"string","description":"Place of birth of the consumer root user."},"nationality":{"description":"Nationality of the root user, in ISO 3166 alpha-2 format.\"","$ref":"#/components/schemas/Nationality"}}},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the user doing the registration."},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the consumer has accepted the terms and conditions."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"The fee group which the consumer is bound to. Fee groups provide the possibility of different fees to users under the same profile. If fee groups are not required, ignore this field."},"sourceOfFunds":{"$ref":"#/components/schemas/ConsumerSourceOfFunds"},"sourceOfFundsOther":{"deprecated":true,"type":"string","description":"Description of source of funds in case `OTHER` was chosen."}}}}}},"ConsumerUpdateRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"tag":{"$ref":"#/components/schemas/Tag"},"name":{"maxLength":20,"pattern":"^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$","type":"string","description":"The first name of the Consumer root user."},"surname":{"maxLength":20,"pattern":"^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$","type":"string","description":"The last name of the Consumer root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the consumer root user.","$ref":"#/components/schemas/Date"},"address":{"description":"Address of the consumer root user.","$ref":"#/components/schemas/AddressWithNoRequiredFields"},"feeGroup":{"type":"string","description":"The fee group which the consumer will be bound to. Do not specify this if you are not using fee groups."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"occupation":{"$ref":"#/components/schemas/Occupation"},"sourceOfFunds":{"$ref":"#/components/schemas/ConsumerSourceOfFunds"},"sourceOfFundsOther":{"deprecated":true,"type":"string","description":"Description of source of funds in case `OTHER` was chosen."},"placeOfBirth":{"type":"string","description":"The place of birth of the consumer root user."},"nationality":{"description":"Nationality of the consumer root user, in ISO 3166 alpha-2 format.","$ref":"#/components/schemas/Nationality"},"resetMobileCounter":{"type":"boolean"}}}}}},"ConsumerKycLevelRequest":{"content":{"application/json":{"schema":{"type":"object","properties":{"kycLevel":{"$ref":"#/components/schemas/KycLevel","description":"The KYC level that the consumer will be assigned to, which determines the due diligence details that the user will need to provide."}}}}}},"ManagedAccountCreateRequest":{"content":{"application/json":{"schema":{"required":["profileId","friendlyName","currency"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"friendlyName":{"type":"string","minLength":1,"maxLength":50,"description":"The friendly name to be given to the managed account."},"currency":{"$ref":"#/components/schemas/Currency"},"tag":{"$ref":"#/components/schemas/Tag"}}}}},"required":true},"ManagedAccountUpdateRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"tag":{"$ref":"#/components/schemas/Tag"},"friendlyName":{"maxLength":50,"minLength":1,"type":"string","description":"Updates the friendly name of the managed account. Leave blank if no change is needed."}}}}}},"ManagedCardRequest":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedCardRequest"}}}},"ManagedCardUpdateRequest":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"tag":{"$ref":"#/components/schemas/Tag"},"friendlyName":{"maxLength":50,"minLength":1,"type":"string","description":"Updates the friendly name of the card. Leave blank if no change is needed."},"cardholderMobileNumber":{"maxLength":20,"minLength":5,"pattern":"^\\\\+[0-9]+$","type":"string","description":"The mobile number including country code of the card holder, needed in case a 3DS challenge is required."},"billingAddress":{"description":"The billing address of the card holder. Merchants may request the billing address to be checked for online purchases.","$ref":"#/components/schemas/Address"},"deliveryAddress":{"description":"The delivery address set for the card holder. This is only applicable for physical cards.","$ref":"#/components/schemas/DeliveryAddress"},"deliveryMethod":{"$ref":"#/components/schemas/DeliveryMethod"},"digitalWallets":{"$ref":"#/components/schemas/DigitalWallets"}}}}}},"ManagedCardAssignRequest":{"required":true,"content":{"application/json":{"schema":{"required":["externalReference","activationCode","friendlyName","nameOnCard","billingAddress"],"type":"object","properties":{"externalReference":{"type":"string","description":"Unique code identifying a card."},"activationCode":{"type":"string","description":"The code to be used to activate the physical card. Depending on how the cards were created, this may be a code set upon creation, or it may be the same as the `externalReference`."},"friendlyName":{"minLength":1,"maxLength":50,"type":"string","description":"The friendly name given to the card."},"nameOnCard":{"maxLength":27,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"The name that will be printed on the card."},"nameOnCardLine2":{"maxLength":27,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"Line 2 of the 'name on card' field. This will be printed on the card."},"billingAddress":{"description":"The billing address set for the card holder, required for AVS checking.","$ref":"#/components/schemas/Address"},"cardholderMobileNumber":{"maxLength":20,"minLength":5,"pattern":"^\\\\+[0-9]+$","type":"string","description":"The mobile number including country code of the card holder, needed for 3DS challenge."}}}}}},"ManagedCardSpendRulesRequest":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedCardsSpendRules"}}}},"CardLevelSpendRulesRequest":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CardLevelSpendRules"}}}},"ManagedCardPhysicalUpgradeRequest":{"required":true,"content":{"application/json":{"schema":{"required":["activationCode","deliveryAddress"],"type":"object","properties":{"productReference":{"type":"string","description":"The product design reference to be used for this physical card.\n\nThis reference will be given to you once your physical card programme has been set up. If only one card programme is configured, this field can be left empty.\n"},"carrierType":{"type":"string","description":"The carrier type to be used for this physical card.\n\nThis reference will be given to you once your physical card carrier has been set up. If only one carrier is configured, this field can be left empty.\n"},"deliveryMethod":{"$ref":"#/components/schemas/DeliveryMethod"},"deliveryAddress":{"$ref":"#/components/schemas/DeliveryAddress"},"activationCode":{"maxLength":6,"pattern":"^[0-9]+$","type":"string","description":"The unique code to be used to activate the physical card."},"pin":{"$ref":"#/components/schemas/SensitivePin"},"nameOnCardLine2":{"maxLength":27,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"Line 2 of the 'name on card' field. This will be printed on the card."}}}}}},"ManagedCardPhysicalActivateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["activationCode"],"type":"object","properties":{"activationCode":{"maxLength":6,"pattern":"^[0-9]+$","type":"string","description":"The code, set up when upgrading the card, that allows the physical card to be activated."}}}}}},"ManagedCardPhysicalReplaceDamagedRequest":{"required":true,"content":{"application/json":{"schema":{"required":["activationCode"],"type":"object","properties":{"activationCode":{"description":"The code that will be used to activate the physical card replacement.","maxLength":6,"pattern":"^[0-9]+$","type":"string"}}}}}},"ManagedCardPhysicalReplaceLostOrStolenRequest":{"required":true,"content":{"application/json":{"schema":{"required":["activationCode"],"type":"object","properties":{"activationCode":{"maxLength":6,"pattern":"^[0-9]+$","type":"string","description":"A unique code to be used to activate the replacement physical card."}}}}}},"CreateTransferRequest":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","source","destination","destinationAmount"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"source":{"description":"The managed account or managed card from where the funds will be transferred.","$ref":"#/components/schemas/InstrumentId"},"destination":{"description":"The managed account or managed card to where the funds will be transferred.","$ref":"#/components/schemas/InstrumentId"},"destinationAmount":{"description":"The amount, in same currency as the source and destination instruments, to be transferred to the destination (exclusive of any fee amount that may be specified in the profile).","$ref":"#/components/schemas/CurrencyAmount"}}}}}},"SendCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["profileId","source","destination","destinationAmount"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"source":{"$ref":"#/components/schemas/InstrumentId"},"destination":{"$ref":"#/components/schemas/InstrumentId"},"destinationAmount":{"$ref":"#/components/schemas/CurrencyAmount"}}}}}},"OutgoingWireTransferCreateRequest":{"required":true,"content":{"application/json":{"schema":{"required":["destinationBeneficiary","profileId","sourceInstrument","transferAmount"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"sourceInstrument":{"description":"The managed account from which funds will be collected.","required":["type","id"],"type":"object","properties":{"type":{"type":"string","enum":["managed_accounts"]},"id":{"type":"string","pattern":"^[0-9]+$"}}},"transferAmount":{"description":"The amount, in same currency as source and destination, that was transferred from the source.","$ref":"#/components/schemas/CurrencyAmount"},"description":{"type":"string","description":"These details are passed to the beneficiary as the `reference` and the allowed length is dependent on the payment type:\n\n`SEPA` and `SWIFT` <= `35` characters\n\n`Faster Payments` <= `18` characters\n"},"destinationBeneficiary":{"$ref":"#/components/schemas/OutgoingWireTransferBeneficiary"}}}}}}},"responses":{"LoginWithPasswordResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"token":{"type":"string","description":"An authorisation token (valid for 5 minutes from last activity) identifying the user to be used in the `auth_token` authorization header for secured operations."},"tokenType":{"$ref":"#/components/schemas/TokenType"},"identity":{"description":"The identity to which the logged-in user belongs to.","$ref":"#/components/schemas/IdentityId"},"credentials":{"description":"The unique identifier for the logged-in user.","$ref":"#/components/schemas/TypeId"}}}}}},"BadRequestError":{"description":"Bad Request Error - Your request is invalid.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"message":{"maxLength":255,"type":"string","description":"When present helps to identify and fix the problem."},"syntaxErrors":{"$ref":"#/components/schemas/SyntaxError"}}}}}},"Unauthorized":{"description":"Unauthorized - Your credentials or access token are invalid.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"LoginWithPasswordConflict":{"description":"The user's password has expired. Use the returned temporary token to update their password via the  '_/passwords/update_' endpoint.","content":{"application/json":{"schema":{"type":"object","properties":{"token":{"type":"string","description":"Temporary authorisation token required to initiate the _passwordUpdate_ operation."}}}}}},"Locked":{"description":"Locked - Account is temporarily locked due to failed consecutive login attempts. Try again in 30 minutes.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"TooManyRequests":{"description":"Too many requests.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"},"x-ratelimit-limit":{"$ref":"#/components/headers/x-ratelimit-limit"},"x-ratelimit-reset":{"$ref":"#/components/headers/x-ratelimit-reset"}}},"InternalServerError":{"description":"Internal Server Error - There is a problem with the server. Please try again later.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"ServiceUnavailable":{"description":"Service Unavailable - We're temporarily offline for maintenance. Please try again later.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"Error":{"description":"Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"UserIdentitiesGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"array","description":"The list of identities available to user.","items":{"$ref":"#/components/schemas/UserIdentity"}}}}},"Forbidden":{"description":"Forbidden - Access to the requested resource or action is forbidden.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"NotFound":{"description":"Not found - The requested resource couldn't be found.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"UserIdentitiesConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["IDENTITY_TYPE_NOT_SUPPORTED"]}}}}}},"LoginWithIamResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"url":{"type":"string"}}}}}},"NoContent":{"description":"Success - No Content.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}}},"MethodNotAllowed":{"description":"Method Not Allowed - The request was received but has been rejected for the requested resource.","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"StepUpSCAChallengeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED"]}}}}}},"StepUpSCAVerifyConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","VERIFICATION_CODE_EXPIRED","VERIFICATION_CODE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED"]}}}}}},"StepUpSCAChallengePushResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The challenge id."}}}}}},"StepUpSCAChallengePushConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","CHALLENGE_LIMIT_EXCEEDED"]}}}}}},"LogoutResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"url":{"type":"string","description":"The logout url for third party auth providers."}}}}}},"PasswordResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"passwordInfo":{"$ref":"#/components/schemas/PasswordInfo"},"token":{"type":"string","description":"The authorisation token to be used in the Authorization header for secured operations."}}}}}},"CreatePasswordConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["UNRESOLVED_IDENTITY","PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE","PASSWORD_TOO_SHORT","PASSWORD_TOO_LONG","PASSWORD_TOO_SIMPLE","PASSWORD_KEY_ALREADY_IN_USE","PASSWORD_ALREADY_CREATED"]}}}}}},"PasswordUpdateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PASSWORD_ALREADY_USED","PASSWORD_TOO_SHORT","PASSWORD_TOO_LONG","PASSWORD_TOO_SIMPLE","PASSWORD_INCORRECT"]}}}}}},"PasswordValidateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["UNRESOLVED_IDENTITY","PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE","PASSWORD_TOO_SHORT","PASSWORD_TOO_LONG","PASSWORD_TOO_SIMPLE"]}}}}}},"LostPasswordInitiateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["MULTIPLE_ACCOUNTS_FOUND","ACCOUNT_NOT_FOUND"]}}}}}},"TokenResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenResponse"}}}},"LostPasswordResumeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INVALID_NONCE_OR_EMAIL","PASSWORD_ALREADY_USED","PASSWORD_TOO_SHORT","PASSWORD_TOO_LONG","PASSWORD_TOO_SIMPLE","PASSWORD_INCORRECT"]}}}}}},"AuthFactorsGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"factors":{"type":"array","description":"The list of challenge types the logged-in user is enrolled on.","items":{"$ref":"#/components/schemas/SCAFactor"}}}}}}},"EnrolDeviceUsingOtpStepOneConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["CHANNEL_NOT_SUPPORTED","CHANNEL_ALREADY_REGISTERED","MOBILE_NUMBER_NOT_AVAILABLE","MOBILE_NUMBER_INVALID","MOBILE_COUNTRY_NOT_SUPPORTED","CREDENTIALS_INACTIVE"]}}}}}},"EnrolDeviceUsingOtpStepTwoConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["CHANNEL_NOT_SUPPORTED","CHANNEL_ALREADY_REGISTERED","VERIFICATION_CODE_EXPIRED","VERIFICATION_CODE_INVALID","CREDENTIALS_INACTIVE"]}}}}}},"EnrolDeviceUsingPushResponse":{"description":"Success","content":{"application/json":{"schema":{"type":"object","properties":{"linkingCode":{"type":"string","description":"The code to link the device."}}}}}},"InstrumentForbidden":{"description":"Forbidden - Access to the requested resource or action is forbidden.","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STEP_UP_REQUIRED"]}}}}}},"EnrolDeviceUsingPushConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_READY","CHANNEL_ALREADY_REGISTERED","MOBILE_NUMBER_NOT_AVAILABLE","CHALLENGE_LIMIT_EXCEEDED","PASSCODE_NOT_SET","ENROLMENT_LIMIT_EXCEEDED","MOBILE_COUNTRY_NOT_SUPPORTED"]}}}}}},"AccessTokenResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"token":{"type":"string"},"identity":{"description":"The identity to which the logged-in user belongs to.","$ref":"#/components/schemas/IdentityId"},"credentials":{"description":"The unique identifier for the logged-in user.","$ref":"#/components/schemas/TypeId"}}}}}},"UserResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"UserCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["EMAIL_NOT_UNIQUE","MOBILE_NOT_UNIQUE","MOBILE_OR_COUNTRY_CODE_INVALID"]}}}}}},"UsersGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"users":{"type":"array","description":"The list of users matching the criteria specified.","items":{"$ref":"#/components/schemas/User"}},"count":{"type":"integer","description":"The total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"The total number of records returned in this response (always capped at 100).","format":"int32"}}}}}},"UserPatchConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["EMAIL_NOT_UNIQUE","MOBILE_NOT_UNIQUE","MOBILE_OR_COUNTRY_CODE_INVALID","MOBILE_NO_CHANGE_LIMIT_EXCEEDED"]}}}}}},"UserInviteSendConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INVITE_ALREADY_CONSUMED"]}}}}}},"UserInviteValidateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INVITE_OR_INVITE_CODE_INVALID"]}}}}}},"UserInviteConsumeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INVITE_OR_INVITE_CODE_INVALID","UNRESOLVED_IDENTITY","PASSWORD_ALREADY_USED","PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE","PASSWORD_TOO_SHORT","PASSWORD_TOO_LONG","PASSWORD_TOO_SIMPLE","PASSWORD_KEY_ALREADY_IN_USE","PASSWORD_ALREADY_CREATED"]}}}}}},"CreateCorporateResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedCorporate"}}}},"CorporateCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PAYMENT_MODEL_CONSTRAINTS_VIOLATED","PROFILE_NOT_FOUND","PROFILE_INACTIVE","ROOT_EMAIL_NOT_UNIQUE","CURRENCY_UNSUPPORTED","FEE_GROUP_INVALID","COUNTRY_INVALID","TERMS_NOT_ACCEPTED","MOBILE_OR_COUNTRY_CODE_INVALID","COUNTRY_UNSUPPORTED","ROOT_USER_INACTIVE","ROOT_EMAIL_NOT_VERIFIED","KYC_APPROVAL_MISSING","PROFILE_MISMATCH"]}}}}}},"CorporateResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Corporate"}}}},"CorporateUpdateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["FEE_GROUP_INVALID","COUNTRY_INVALID","EMAIL_NOT_UNIQUE","MOBILE_NOT_UNIQUE","ROOT_USER_ALREADY_VERIFIED","COUNTRY_UNSUPPORTED","MOBILE_OR_COUNTRY_CODE_INVALID","MOBILE_NO_CHANGE_LIMIT_EXCEEDED"]}}}}}},"EmailVerificationConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["EMAIL_NOT_FOUND"]}}}}}},"VerifyConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["VERIFICATION_CODE_INVALID"]}}}}}},"CorporateKybGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"kybStatus":{"description":"The effective due diligence status of the logged-in corporate user.","$ref":"#/components/schemas/KyiStatus"},"ongoingKybStatus":{"description":"The ongoing due diligence status of the logged-in corporate user.","$ref":"#/components/schemas/KyiStatus"}}}}}},"ChargeFeeResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChargeFee"}}}},"ChargeFeeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["UNRESOLVED_FEE_TYPE","UNRESOLVED_CURRENCY","UNRESOLVED_INSTRUMENT","FUNDS_INSUFFICIENT","IDENTITY_NOT_OWNER_OF_INSTRUMENT"]}}}}}},"ConsumerResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Consumer"}}}},"ConsumerCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PAYMENT_MODEL_CONSTRAINTS_VIOLATED","PROFILE_NOT_FOUND","PROFILE_INACTIVE","ROOT_EMAIL_NOT_UNIQUE","CURRENCY_UNSUPPORTED","FEE_GROUP_INVALID","COUNTRY_INVALID","TERMS_NOT_ACCEPTED","MOBILE_OR_COUNTRY_CODE_INVALID","COUNTRY_UNSUPPORTED"]}}}}}},"ConsumerUpdateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["FEE_GROUP_INVALID","COUNTRY_INVALID","CONSUMER_VERIFIED","EMAIL_NOT_UNIQUE","MOBILE_OR_COUNTRY_CODE_INVALID","COUNTRY_UNSUPPORTED","MOBILE_NO_CHANGE_LIMIT_EXCEEDED"]}}}}}},"ConsumerKycStartResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"required":["reference","kycLevel"],"type":"object","properties":{"reference":{"type":"string","pattern":"^[0-9]+$","description":"The reference used to initialise the KYC UI Component."},"kycLevel":{"$ref":"#/components/schemas/KycLevel","description":"The KYC level assigned to the consumer."}}}}}},"ConsumerKycStartConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["KYC_ALREADY_APPROVED","KYC_PENDING_REVIEW","KYC_REJECTED","KYC_LEVEL_NOT_ALLOWED"]}}}}}},"ConsumerKycGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","required":["fullDueDiligence","ongoingFullDueDiligence"],"properties":{"fullDueDiligence":{"description":"The status of the Due Diligence for the consumer.","$ref":"#/components/schemas/KyiStatus"},"kycLevel":{"description":"The customer's level of due diligence.","$ref":"#/components/schemas/KycLevel"},"ongoingFullDueDiligence":{"description":"The status of the ongoing Due Diligence process for the consumer","$ref":"#/components/schemas/KyiStatus"},"ongoingKycLevel":{"description":"The level of due diligence of the ongoing KYC process.","$ref":"#/components/schemas/KycLevel"}}}}}},"ConsumerKycStartSumsubMobileResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"verificationFlow":{"type":"string","description":"Name of verification flow, to be provided to Sumsub Mobile SDK."},"accessToken":{"type":"string","pattern":"^[0-9]+$","description":"The access token, to be provided to Sumsub Mobile SDK."},"identityType":{"type":"string","description":"Type of identity, to be provided to Sumsub Mobile SDK."},"externalUserId":{"type":"string","description":"The application user identifier."},"kycProviderKey":{"type":"string","description":"Sumsub key."},"kycLevel":{"$ref":"#/components/schemas/KycLevel","description":"The KYC level assigned to the consumer."}}}}}},"ConsumerKycStartSumsubMobileConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["KYC_ALREADY_APPROVED","KYC_PENDING_REVIEW","KYC_ALREADY_REJECTED","SOURCE_OF_FUNDS_MISSING","KYC_LEVEL_NOT_ALLOWED"]}}}}}},"ManagedAccountsGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"accounts":{"description":"The filtered managed accounts list.","type":"array","items":{"$ref":"#/components/schemas/ManagedAccount"}},"count":{"type":"integer","description":"The total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"The total number of records returned in this response (always capped at 100).","format":"int32"}}}}}},"ManagedAccountResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedAccount"}}}},"ManagedAccountCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PROFILE_NOT_FOUND","PROFILE_INACTIVE","MODEL_CONSTRAINTS_VIOLATED","CURRENCY_NOT_SUPPORTED_BY_PROFILE","PROVIDER_NOT_SUPPORTED_BY_PROFILE","INSTRUMENT_NOT_FOUND","OWNER_IDENTITY_NOT_VERIFIED","IDENTITY_LIMITS_EXCEEDED","PROGRAMME_LIMITS_EXCEEDED","INNOVATOR_LIMITS_EXCEEDED","SYSTEM_LIMITS_EXCEEDED"]}}}}}},"ManagedAccountIBANResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedAccountIBAN"}}}},"ManagedAccountsIBANUpgradeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_ALREADY_UPGRADED_TO_IBAN","INSTRUMENT_IS_NOT_ACTIVE","IBAN_ALLOCATION_EXCEEDED","IBAN_NOT_SUPPORTED","IBAN_ALREADY_REQUESTED","OWNER_NOT_VERIFIED"]}}}}}},"ManagedAccountBlockConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_INACTIVE","INSTRUMENT_ALREADY_BLOCKED","INSTRUMENT_DESTROYED"]}}}}}},"ManagedAccountUnblockConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_INACTIVE","INSTRUMENT_NOT_BLOCKED","INSTRUMENT_DESTROYED"]}}}}}},"ManagedAccountStatementResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Statement"}},"application/pdf":{"schema":{"type":"string","format":"binary"}},"text/csv":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/StatementEntry"}}}}},"ManagedAccountRemoveConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["BALANCE_NOT_ZERO","INSTRUMENT_ALREADY_REMOVED","INSTRUMENT_HAS_PENDING_ACTIONS","INSTRUMENT_HAS_LINKED_CARDS"]}}}}}},"ManagedCardResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedCard"}}}},"ManagedCardConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PAYMENT_MODEL_CONSTRAINTS_VIOLATED","PROFILE_NOT_FOUND","PROFILE_INACTIVE","CURRENCY_NOT_SUPPORTED_BY_PROFILE","PROVIDER_NOT_SUPPORTED_BY_PROFILE","INSTRUMENT_NOT_FOUND","COUNTRY_INVALID","OWNER_IDENTITY_NOT_VERIFIED","IDENTITY_LIMITS_EXCEEDED","PROGRAMME_LIMITS_EXCEEDED","INNOVATOR_LIMITS_EXCEEDED","SYSTEM_LIMITS_EXCEEDED","PARENT_MANAGED_ACCOUNT_NOT_ACTIVE","PARENT_MANAGED_ACCOUNT_NOT_FOUND","WALLETS_NOT_ENABLED","WALLET_ARTWORK_NOT_SPECIFIED","WALLET_ARTWORK_INVALID","IDENTITY_KYC_LEVEL_STEPUP_REQUIRED","PUSHPROVISIONING_NOT_ENABLED"]}}}}}},"ManagedCardPageResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"cards":{"type":"array","items":{"$ref":"#/components/schemas/ManagedCard"}},"count":{"type":"integer","description":"The total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"The total number of records returned in this response (always capped at 100).","format":"int32"}}}}}},"ManagedCardUpdateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_DESTROYED","INSTRUMENT_NOT_PHYSICAL","COUNTRY_INVALID","WALLETS_NOT_ENABLED","WALLET_ARTWORK_NOT_SPECIFIED","WALLET_ARTWORK_INVALID","PUSHPROVISIONING_NOT_ENABLED"]}}}}}},"ManagedCardBlockConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_ALREADY_BLOCKED","INSTRUMENT_DESTROYED","INSTRUMENT_MARKED_LOST_STOLEN"]}}}}}},"ManagedCardUnblockConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_BLOCKED","INSTRUMENT_DESTROYED","INSTRUMENT_MARKED_LOST_STOLEN"]}}}}}},"ManagedCardRemoveConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["BALANCE_NOT_ZERO","INSTRUMENT_ALREADY_REMOVED"]}}}}}},"ManagedCardStatementResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Statement"}},"text/csv":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/StatementEntry"}}}}},"ManagedCardGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedCard"}}}},"ManagedCardAssignConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["IDENTITY_NOT_VERIFIED","IDENTITY_NOT_ACTIVE","CARD_ALREADY_ASSIGNED","ACTIVATION_CODE_INVALID","INSTRUMENT_NOT_FOUND","PROFILE_NOT_FOUND","MODEL_CONSTRAINTS_VIOLATED","IDENTITY_KYC_LEVEL_STEPUP_REQUIRED"]}}}}}},"ManagedCardSpendRulesGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AllLevelSpendRules"}}}},"ManagedCardSpendRulesSetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ManagedCardsSpendRules"}}}},"ManagedCardSpendRulesSetConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY","SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD","SPEND_LIMIT_DUPLICATE_INTERVAL","SPEND_LIMIT_AMOUNT_INVALID"]}}}}}},"ManagedCardSpendRulesCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY","SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD","SPEND_LIMIT_DUPLICATE_INTERVAL","SPEND_LIMIT_AMOUNT_INVALID","SPEND_RULE_ALREADY_SET"]}}}}}},"ManagedCardSpendRulesUpdateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY","SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD","SPEND_LIMIT_DUPLICATE_INTERVAL","SPEND_LIMIT_AMOUNT_INVALID"]}}}}}},"ManagedCardPhysicalUpgradeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_ALREADY_UPGRADED_TO_PHYSICAL","CONFIG_ERROR_PRODUCT_REFERENCE","PRODUCT_REFERENCE_NOT_SPECIFIED","PRODUCT_REFERENCE_INVALID","CONFIG_ERROR_CARRIER_TYPE","CARRIER_TYPE_NOT_SPECIFIED","CARRIER_TYPE_INVALID","CONFIG_ERROR_CARD_BUREAU","INSTRUMENT_BLOCKED","INSTRUMENT_DESTROYED","PIN_INVALID_FORMAT","PARENT_MANAGED_ACCOUNT_BLOCKED"]}}}}}},"ManagedCardPhysicalActivateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","INSTRUMENT_ALREADY_ACTIVATED","ACTIVATION_CODE_INVALID","INSTRUMENT_BLOCKED","INSTRUMENT_DESTROYED"]}}}}}},"ManagedCardPhysicalPinGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"required":["pin"],"type":"object","properties":{"pin":{"$ref":"#/components/schemas/SensitivePin"}}}}}},"ManagedCardPhysicalPinGetConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","PHYSICAL_CARD_NOT_ACTIVATED","PIN_NOT_SET","PIN_TRIES_EXCEEDED","INSTRUMENT_BLOCKED","INSTRUMENT_DESTROYED"]}}}}}},"ManagedCardPhysicalPinUnBlockConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","PHYSICAL_CARD_NOT_ACTIVATED","INSTRUMENT_BLOCKED","INSTRUMENT_DESTROYED"]}}}}}},"ManagedCardPhysicalReplaceDamagedConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","PHYSICAL_CARD_NOT_ACTIVATED","INSTRUMENT_ALREADY_DESTROYED","INSTRUMENT_ALREADY_PENDING_REPLACEMENT","INSTRUMENT_MARKED_AS_LOST"]}}}}}},"ManagedCardPhysicalReportLostConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","INSTRUMENT_ALREADY_MARKED_LOST","INSTRUMENT_ALREADY_MARKED_STOLEN","INSTRUMENT_DESTROYED"]}}}}}},"ManagedCardPhysicalReportStolenConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","PHYSICAL_CARD_NOT_ACTIVATED","INSTRUMENT_ALREADY_MARKED_STOLEN","INSTRUMENT_ALREADY_MARKED_LOST","INSTRUMENT_DESTROYED"]}}}}}},"ManagedCardPhysicalReplaceLostOrStolenConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","INSTRUMENT_NOT_MARKED_LOST_OR_STOLEN","INSTRUMENT_DESTROYED","INSTRUMENT_ALREADY_REPLACED","PARENT_MANAGED_ACCOUNT_NOT_ACTIVE"]}}}}}},"ManagedCardPhysicalContactlessLimitResetConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["INSTRUMENT_NOT_PHYSICAL","PHYSICAL_CARD_NOT_ACTIVATED","INSTRUMENT_BLOCKED","INSTRUMENT_DESTROYED","PHYSICAL_CARD_TYPE_NOT_SUPPORTED"]}}}}}},"TransferResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Transfer"}}}},"TransferConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PROFILE_INACTIVE","MODEL_CONSTRAINTS_VIOLATED","INTERCEPTOR_DENIED_TRANSACTION","INSTRUMENT_DENIED_TRANSACTION","SOURCE_INSTRUMENT_DESTROYED","DESTINATION_INSTRUMENT_DESTROYED","FOREX_TRADE_DENIED_TRANSACTION","CURRENCY_MISMATCH","SOURCE_INSTRUMENT_BLOCKED","DESTINATION_INSTRUMENT_BLOCKED","FUNDS_INSUFFICIENT","AMOUNT_INVALID","SOURCE_NOT_FOUND","DESTINATION_NOT_FOUND","FEE_NOT_CONFIGURED_FOR_CURRENCY","DESTINATION_LIMIT_EXCEEDED","SOURCE_CANNOT_BE_DEBIT_MODE_CARD","DESTINATION_CANNOT_BE_DEBIT_MODE_CARD","TRANSFER_BETWEEN_INSTRUMENTS_UNSUPPORTED","SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT"]}}}}}},"TransfersGetResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"transfer":{"type":"array","items":{"$ref":"#/components/schemas/Transfer"}},"count":{"type":"integer","description":"Total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"Total number of records returned in this response.","format":"int32"}}}}}},"SendResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Send"}}}},"SendCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"required":["errorCode"],"type":"object","properties":{"errorCode":{"type":"string","enum":["PROFILE_INACTIVE","MODEL_CONSTRAINTS_VIOLATED","INTERCEPTOR_DENIED_TRANSACTION","INSTRUMENT_DENIED_TRANSACTION","FOREX_TRADE_DENIED_TRANSACTION","CURRENCY_MISMATCH","SOURCE_INSTRUMENT_BLOCKED","DESTINATION_INSTRUMENT_BLOCKED","SOURCE_NOT_FOUND","DESTINATION_NOT_FOUND","FEE_NOT_CONFIGURED_FOR_CURRENCY","DESTINATION_LIMIT_EXCEEDED","FUNDS_INSUFFICIENT","AMOUNT_INVALID","SOURCE_CANNOT_BE_DEBIT_MODE_CARD","DESTINATION_CANNOT_BE_DEBIT_MODE_CARD","SEND_TO_INSTRUMENT_UNSUPPORTED","SOURCE_INSTRUMENT_DESTROYED","DESTINATION_INSTRUMENT_DESTROYED","SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT","IDENTITY_KYC_LEVEL_STEPUP_REQUIRED","DESTINATION_BELONGS_TO_SAME_IDENTITY"]}}}}}},"SendsGetPageResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"send":{"type":"array","items":{"$ref":"#/components/schemas/Send"}},"count":{"type":"integer","description":"Total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"Total number of records returned in this response.","format":"int32"}}}}}},"SendSCAChallengeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","SCA_EXEMPTION_APPLIED"]}}}}}},"SendSCAVerifyConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","VERIFICATION_CODE_EXPIRED","VERIFICATION_CODE_INVALID","SCA_EXEMPTION_APPLIED"]}}}}}},"SendSCAChallengePushConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","CHALLENGE_LIMIT_EXCEEDED","SCA_EXEMPTION_APPLIED"]}}}}}},"OutgoingWireTransferResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OutgoingWireTransfer"}}}},"OutgoingWireTransferCreateConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["PROFILE_INACTIVE","MODEL_CONSTRAINTS_VIOLATED","INTERCEPTOR_DENIED_TRANSACTION","INSTRUMENT_DENIED_TRANSACTION","CURRENCY_MISMATCH","SOURCE_INSTRUMENT_BLOCKED","SOURCE_INSTRUMENT_DESTROYED","AMOUNT_INVALID","FUNDS_INSUFFICIENT","SOURCE_NOT_FOUND","FEE_NOT_CONFIGURED_FOR_CURRENCY","TYPE_NOT_SUPPORTED_BY_PROFILE","IDENTITY_KYC_LEVEL_STEPUP_REQUIRED"]}}}}}},"OutgoingWireTransfersGetPageResponse":{"description":"Success","headers":{"request-ref":{"$ref":"#/components/headers/request-ref"}},"content":{"application/json":{"schema":{"type":"object","properties":{"transfer":{"type":"array","items":{"$ref":"#/components/schemas/OutgoingWireTransfer"}},"count":{"type":"integer","description":"Total number of records (excluding the paging limit)","format":"int32"},"responseCount":{"type":"integer","description":"Total number of records returned in this response (always capped at 100).","format":"int32"}}}}}},"OutgoingWireTransferSCAChallengeConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"description":"Error codes:\n  * `STATE_INVALID` - The transaction no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of transaction.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of transaction.\n  * `SCA_EXEMPTION_APPLIED` - The transaction no longer requires additional verification, it was proceeded via PSD2 Regulation low value SCA exemption, it is either cancelled or completed.\n","type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","SCA_EXEMPTION_APPLIED"]}}}}}},"OutgoingWireTransferSCAVerifyConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","VERIFICATION_CODE_EXPIRED","VERIFICATION_CODE_INVALID","SCA_EXEMPTION_APPLIED"]}}}}}},"OutgoingWireTransferSCAChallengePushConflict":{"description":"Conflict","content":{"application/json":{"schema":{"type":"object","properties":{"errorCode":{"type":"string","enum":["STATE_INVALID","CHANNEL_NOT_SUPPORTED","CHANNEL_NOT_REGISTERED","CHALLENGE_LIMIT_EXCEEDED","SCA_EXEMPTION_APPLIED"]}}}}}}},"schemas":{"Email":{"type":"string","description":"E-mail Address of the user","format":"email"},"VerificationCode":{"type":"string","description":"A randomly generated one-time use code used to verify the user's email address or mobile number.","minLength":6,"maxLength":6,"pattern":"^[0-9]+$"},"Error":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"ManufacturingState":{"type":"string","description":"Information on the manufacturing of the physical card, as follows:\n  - REQUESTED: The upgrade of the card to physical has been requested.\n  - SENT_FOR_FULFILLMENT - The card has been sent for printing.\n  - DISPATCHED: The card has been manufactured and dispatched.\n  - DELIVERED: The card has been received and activated by the recipient.\n","enum":["REQUESTED","SENT_FOR_FULFILLMENT","DISPATCHED","DELIVERED"]},"CardAuthorisationEvent":{"required":["cardId","authorisationType","merchantData","owner","sourceAmount","transactionAmount","totalTransactionCost","transactionId","transactionTimestamp"],"type":"object","properties":{"cardId":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of the card on which an authorisation is being performed"},"transactionId":{"type":"string","pattern":"^[0-9]+$","description":"The id of this transaction, for reference."},"authorisationType":{"$ref":"#/components/schemas/CardAuthorisationDetailsAuthorisationType","description":"The type of authorisation (Debit or Credit)"},"sourceAmount":{"description":"The amount in the currency of the merchant.","$ref":"#/components/schemas/CurrencyAmount"},"transactionAmount":{"$ref":"#/components/schemas/CurrencyAmount","description":"The amount in the currency of the card."},"totalTransactionCost":{"$ref":"#/components/schemas/CurrencyAmount","description":"The total amount to be deducted in the currency of the card. This is the summation of the transaction amount, forex padding and forex fees."},"transactionTimestamp":{"type":"integer","description":"The timestamp of the transaction, using epoch timestamp with millisecond precision.","format":"int64"},"merchantData":{"$ref":"#/components/schemas/MerchantData","description":"Merchant related information"},"owner":{"$ref":"#/components/schemas/IdentityId","description":"The owner of the card"},"cardholderPresent":{"$ref":"#/components/schemas/CardHolderPresent","description":"Optional detail indicating if the card holder was present when the authorisation occurred."},"cardPresent":{"type":"boolean","description":"Optional detail indicating if the card was present when the authorisation occurred."},"authCode":{"maxLength":6,"minLength":1,"type":"string","description":"The authorisation code associated with this authorisation."},"forexPadding":{"description":"The forex padding amount, if any, that has been included in the transactionAmount.  Forex padding is extra amount blocked to cater for currency fluctuation.","$ref":"#/components/schemas/CurrencyAmount"},"forexFee":{"description":"The forex fee, if set, that is included in the transactionAmount.","$ref":"#/components/schemas/CurrencyAmount"},"mode":{"type":"string","description":"The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"}},"discriminator":{"propertyName":"mode","mapping":{"PREPAID_MODE":"#/components/schemas/PrepaidModeCardAuthorisationEvent","DEBIT_MODE":"#/components/schemas/DebitModeCardAuthorisationEvent"}}},"SCAOtpChannel":{"type":"string","enum":["SMS"],"description":"- \"SMS\": The one-time-password is sent as a text message\n"},"SCAPushChannel":{"type":"string","enum":["AUTHY","BIOMETRIC"],"description":"- \"AUTHY\": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)\n- \"BIOMETRIC\": The push notification is sent to the user's device\n"},"UserId":{"type":"string","pattern":"^[0-9]+$"},"ProfileId":{"type":"string","description":"The profile Id which a specific identity, instrument or transaction type is linked to.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n","pattern":"^[0-9]+$"},"InstrumentState":{"type":"string","description":"The state of the instrument indicating what it can and cannot do as follows:\n  - ACTIVE: The instrument is in an active state and can be used in transactions.\n  - BLOCKED: The instrument is temporarily blocked and cannot be used. Any funds on the instrument are also frozen. The `blockedReason` provides more information as to why it was blocked.\n  - DESTROYED: The instrument has been permanently destroyed. The `destroyReason` provides more information as to why it was destroyed.\n","enum":["ACTIVE","BLOCKED","DESTROYED"]},"BlockedReason":{"type":"string","description":"The reason why the instrument has been blocked:\n  - USER: The root, or an authorised user, of the identity owning the instrument has temporarily blocked the instrument.\n  - SYSTEM: The platform or an administrator of the platform has temporarily blocked the instrument.\n  - LOST: The instrument has been blocked because it was marked as lost.\n","enum":["USER","SYSTEM","LOST"]},"DestroyedReason":{"type":"string","description":"The reason why the instrument has been destroyed:\n  - SYSTEM: The platform or an administrator of the platform has destroyed the instrument.\n  - USER: The root, or an authorised user, of the identity owning the instrument has destroyed the instrument.\n  - LOST: The instrument was automatically destroyed as it was marked as lost.\n  - STOLEN: The instrument was automatically destroyed as it was marked as stolen.\n  - EXPIRED: The instrument was automatically destroyed as it expired.\n","enum":["SYSTEM","USER","LOST","STOLEN","EXPIRED"]},"Currency":{"type":"string","description":"The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.","maxLength":3,"minLength":3,"pattern":"^[A-Z]*$"},"InstrumentId":{"required":["id","type"],"type":"object","properties":{"id":{"$ref":"#/components/schemas/Id"},"type":{"$ref":"#/components/schemas/InstrumentType"}}},"TransactionState":{"type":"string","description":"Status of the transaction.","enum":["INITIALISED","COMPLETED","REJECTED","FAILED","PENDING"]},"Id":{"type":"string","pattern":"^[0-9]+$"},"InstrumentType":{"type":"string","enum":["managed_cards","managed_accounts"]},"SendState":{"type":"string","description":"The state of the send transaction, as follows:\n - INITIALISED: The initial state of a send transaction when SCA is not required.\n - PENDING_CHALLENGE: The send transaction requires verification before it can be initialised. Use the /sends/{id}/challenges/otp/{channel} API endpoint to start the verification process.\n - PENDING:  The transaction has exceeded the destination limit and is pending treasury approval.\n - APPROVED: The send transaction was approved.\n - COMPLETED: The send transaction has been completed.\n - REJECTED: The send transaction was rejected.\n - FAILED: There was an issue with the send transaction, and the transaction has failed.\n","enum":["INITIALISED","COMPLETED","REJECTED","FAILED","PENDING","PENDING_CHALLENGE","APPROVED"]},"SourceInstrumentType":{"type":"string","enum":["managed_accounts"]},"OutgoingWireTransferState":{"description":"The state of the Outgoing wire transfer transaction, as follows:\n  - PENDING_CHALLENGE: The wire transfer requires verification before it can be submitted. _Use the `/outgoing_wire_transfers/{id}/challenges/otp/{channel}` API endpoint to start the verification process._\n  - SUBMITTED: The wire transfer has been initiated over the selected route.\n  - REJECTED: The wire transfer submitted was rejected.\n  - APPROVED: The wire transfer submission was approved.\n  - FAILED: There was an issue with the wire transfer, and the transaction has failed.\n  - COMPLETED: The requested funds have been sent from the source instrument.\n","type":"string","enum":["PENDING_CHALLENGE","SUBMITTED","REJECTED","APPROVED","FAILED","COMPLETED"]},"SensitivePassword":{"type":"object","description":"The user's password or passcode used to log in a user.\nPasswords must be:\n  - between 8 and 30 characters\n  - include a lowercase character\n  - include an uppercase character\n  - include a digit and a special character\n  - different from any of the 5 last such passwords used.\n\nFor non-PCI compliant integrations, the password submitted must be **tokenised**.\n","required":["value"],"properties":{"value":{"maxLength":100,"type":"string","format":"password"}}},"Nonce":{"type":"string","description":"A randomly generated one-time use code.","maxLength":50,"pattern":"^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"},"IdentityId":{"required":["type","id"],"type":"object","properties":{"type":{"enum":["CONSUMER","CORPORATE"],"type":"string","description":"Indicates the identity type."},"id":{"type":"string","pattern":"^[0-9]+$","description":"The identifier for the identity."}}},"Mobile":{"required":["number","countryCode"],"type":"object","properties":{"countryCode":{"maxLength":6,"minLength":1,"type":"string","description":"The country code of the Corporate's root user mobile number (e.g. +44)."},"number":{"maxLength":15,"minLength":1,"pattern":"^[0-9]+$","type":"string","description":"The mobile number of the Corporate's root user - excluding country code."}}},"Date":{"required":["year","month","day"],"type":"object","properties":{"year":{"type":"integer","format":"int32","maximum":2100,"minimum":1900},"month":{"type":"integer","format":"int32","maximum":12,"minimum":1},"day":{"type":"integer","format":"int32","maximum":31,"minimum":1}}},"Tag":{"type":"string","description":"The tag field is a custom field that can be used to search and filter.","maxLength":50,"pattern":"^[a-zA-Z0-9_-]+$"},"CompanyPosition":{"type":"string","description":"The company position of the Corporate Root User.","enum":["DIRECTOR","AUTHORISED_REPRESENTATIVE"]},"CompanyType":{"type":"string","description":"Supported company types - if company type is not listed, please contact our support team to check if the company type can be supported.","enum":["SOLE_TRADER","LLC","PUBLIC_LIMITED_COMPANY","LIMITED_LIABILITY_PARTNERSHIP","NON_PROFIT_ORGANISATION"]},"Address":{"required":["addressLine1","city","postCode","country"],"type":"object","properties":{"addressLine1":{"maxLength":150,"type":"string","description":"The first line of the address."},"addressLine2":{"maxLength":150,"type":"string","description":"The second line of the address."},"city":{"maxLength":50,"type":"string","description":"The city of the address."},"postCode":{"maxLength":10,"pattern":"^[A-Za-z0-9 -]*$","type":"string","description":"The post cost associated with the address."},"state":{"maxLength":50,"type":"string","description":"The state of the address."},"country":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"The country of the address expressed in ISO 3166 alpha-2 format."}}},"Industry":{"type":"string","description":"The industry of the identity.","deprecated":true,"enum":["ACCOUNTING","AUDIT","FINANCE","PUBLIC_SECTOR_ADMINISTRATION","ART_ENTERTAINMENT","AUTO_AVIATION","BANKING_LENDING","BUSINESS_CONSULTANCY_LEGAL","CONSTRUCTION_REPAIR","EDUCATION_PROFESSIONAL_SERVICES","INFORMATIONAL_TECHNOLOGIES","TOBACCO_ALCOHOL","GAMING_GAMBLING","MEDICAL_SERVICES","MANUFACTURING","PR_MARKETING","PRECIOUS_GOODS_JEWELRY","NON_GOVERNMENTAL_ORGANIZATION","INSURANCE_SECURITY","RETAIL_WHOLESALE","TRAVEL_TOURISM","FREELANCER"]},"CorporateSourceOfFunds":{"type":"string","description":"The corporate's source of funds.","deprecated":true,"enum":["LABOUR_CONTRACT","CIVIL_CONTRACT","RENT","FUNDS_FROM_OTHER_AUXILIARY_SOURCES","SALE_OF_MOVABLE_ASSETS","SALE_OF_REAL_ESTATE","ORDINARY_BUSINESS_ACTIVITY","DIVIDENDS","LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS","LOAN_FROM_THIRD_PARTIES","SALE_OF_COMPANY_SHARES_BUSINESS","OTHER"]},"Fee":{"required":["feeType","source"],"type":"object","properties":{"feeType":{"type":"string","description":"The fee type as defined in the Multi Portal."},"source":{"description":"The instrument from where the fee should be deducted.","$ref":"#/components/schemas/InstrumentId"}}},"Occupation":{"type":"string","description":"The industry of the identity.","deprecated":true,"enum":["ACCOUNTING","AUDIT","FINANCE","PUBLIC_SECTOR_ADMINISTRATION","ART_ENTERTAINMENT","AUTO_AVIATION","BANKING_LENDING","BUSINESS_CONSULTANCY_LEGAL","CONSTRUCTION_REPAIR","EDUCATION_PROFESSIONAL_SERVICES","INFORMATIONAL_TECHNOLOGIES","TOBACCO_ALCOHOL","GAMING_GAMBLING","MEDICAL_SERVICES","MANUFACTURING","PR_MARKETING","PRECIOUS_GOODS_JEWELRY","NON_GOVERNMENTAL_ORGANIZATION","INSURANCE_SECURITY","RETAIL_WHOLESALE","TRAVEL_TOURISM","FREELANCER","STUDENT","UNEMPLOYED","RETIRED","OTHER"]},"AddressWithNoRequiredFields":{"type":"object","description":"The address, with none of the separate fields being set as required.","properties":{"addressLine1":{"type":"string","description":"The first line of the address."},"addressLine2":{"type":"string","description":"The second line of the address."},"city":{"type":"string","description":"The city of the address."},"postCode":{"maxLength":10,"pattern":"^[A-Za-z0-9 -]*$","type":"string","description":"The post cost associated with the address."},"state":{"maxLength":50,"type":"string","description":"The state of the address."},"country":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"The country of the address expressed in ISO 3166 alpha-2 format."}}},"Nationality":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"Nationality of the user - using ISO 3166 alpha-2."},"ConsumerSourceOfFunds":{"deprecated":true,"type":"string","description":"The consumer's source of funds.","enum":["PERSONAL_SAVINGS","FAMILY_SAVINGS","LABOUR_CONTRACT","CIVIL_CONTRACT","RENT","FUNDS_FROM_OTHER_AUXILIARY_SOURCES","SALE_OF_MOVABLE_ASSETS","SALE_OF_REAL_ESTATE","ORDINARY_BUSINESS_ACTIVITY","DIVIDENDS","LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS","LOAN_FROM_THIRD_PARTIES","INHERITANCE","SALE_OF_COMPANY_SHARES_BUSINESS","OTHER"]},"KycLevel":{"type":"string","description":"The KYC level, which determines what KYC information will be requested from the consumer:\n  - KYC_LEVEL_1: The most basic level of KYC required. \n  - KYC_LEVEL_2: Full due diligence level 2\n","enum":["KYC_LEVEL_1","KYC_LEVEL_2"]},"ManagedCardRequest":{"required":["profileId","friendlyName","nameOnCard","cardholderMobileNumber","billingAddress","mode"],"type":"object","properties":{"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"friendlyName":{"maxLength":50,"minLength":1,"type":"string","description":"The friendly name for the card."},"nameOnCard":{"maxLength":27,"minLength":1,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"The card holder's name for the card.\n\nThis may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.\n"},"cardholderMobileNumber":{"maxLength":20,"minLength":5,"pattern":"^\\\\+[0-9]+$","type":"string","description":"The mobile number including country code of the card holder.\n\nFor transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase.\n"},"billingAddress":{"description":"The billing address set for the card holder. This may be verified by merchants when the card is used online.","$ref":"#/components/schemas/Address"},"digitalWallets":{"description":"The Card Tokenisation details","$ref":"#/components/schemas/DigitalWallets"},"mode":{"type":"string","description":"The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"}},"discriminator":{"propertyName":"mode","mapping":{"PREPAID_MODE":"#/components/schemas/PrepaidModeCardRequest","DEBIT_MODE":"#/components/schemas/DebitModeCardRequest"}}},"DeliveryAddress":{"required":["name","surname","addressLine1","city","postCode","country"],"type":"object","description":"The delivery address where the physical card is delivered.","properties":{"name":{"maxLength":100,"type":"string"},"surname":{"maxLength":100,"type":"string"},"addressLine1":{"maxLength":50,"minLength":1,"type":"string"},"addressLine2":{"maxLength":50,"minLength":1,"type":"string"},"city":{"maxLength":20,"type":"string"},"postCode":{"maxLength":10,"pattern":"^[A-Za-z0-9 -]*$","type":"string"},"state":{"maxLength":50,"type":"string"},"country":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"Country of the identity in ISO 3166 alpha-2 format."}}},"DeliveryMethod":{"type":"string","description":"The delivery methods supported for delivering printed physical cards. If not specified, the STANDARD_DELIVERY method will be used.\n","enum":["STANDARD_DELIVERY","REGISTERED_MAIL","COURIER","FIRST_CLASS_MAIL"]},"DigitalWallets":{"type":"object","properties":{"pushProvisioningEnabled":{"type":"boolean","description":"Indicates whether the card is enabled for push provisioning in a digital wallet."},"walletsEnabled":{"type":"boolean","description":"Indicates whether the card is enabled for tokenisation in a digital wallet."},"artworkReference":{"type":"string","description":"The artwork reference that will be used if the card is enabled for tokenisation in a digital wallet."}}},"ManagedCardsSpendRules":{"allOf":[{"$ref":"#/components/schemas/BaseCardLevelSpendRules"},{"type":"object","properties":{"minTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no minimum transaction amount is to be set."},"maxTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set."}},"required":["allowedMerchantCategories","blockedMerchantCategories","allowedMerchantIds","blockedMerchantIds","allowContactless","allowAtm","allowECommerce","allowCashback","allowCreditAuthorisations","spendLimit"]}]},"CardLevelSpendRules":{"allOf":[{"$ref":"#/components/schemas/BaseCardLevelSpendRules"},{"type":"object","properties":{"minTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined."},"maxTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined."}}}]},"SensitivePin":{"type":"object","description":"The PIN used for in-person transactions done with physical cards.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.\n\nTo show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen.\n","required":["value"],"properties":{"value":{"minLength":4,"maxLength":24,"type":"string"}}},"CurrencyAmount":{"required":["currency","amount"],"type":"object","properties":{"currency":{"$ref":"#/components/schemas/Currency"},"amount":{"type":"integer","format":"int64","description":"The monetary amount, scaled to the lowest denomination of the currency.\n\nExample, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00.\n"}},"description":"The object representing a monetary amount in a particular currency."},"OutgoingWireTransferBeneficiary":{"required":["name","bankAccountDetails"],"type":"object","description":"Details of the beneficiary of the outgoing wire transfer.","properties":{"name":{"maxLength":200,"type":"string","description":"The beneficiary's full name."},"address":{"maxLength":150,"minLength":1,"type":"string","description":"The beneficiary's address."},"bankName":{"type":"string","description":"The beneficiary's bank name."},"bankAddress":{"maxLength":150,"minLength":1,"type":"string","description":"The beneficiary's bank address."},"bankCountry":{"type":"string","description":"The beneficiary's bank country."},"bankAccountDetails":{"description":"Details of the beneficiary bank account, depending on the type of transfer chosen.","oneOf":[{"$ref":"#/components/schemas/SepaBankDetails"},{"$ref":"#/components/schemas/FasterPaymentsBankDetails"}]}}},"TokenType":{"type":"string","description":"The auth token received can only be used to access the following endpoints:\n  - `/identities`\n  - `/access_token`\n","enum":["AUTH","ACCESS"]},"TypeId":{"required":["type","id"],"type":"object","properties":{"type":{"maxLength":50,"pattern":"^[a-zA-Z0-9_-]+$","type":"string","enum":["ROOT","USER"],"description":"The type of user."},"id":{"type":"string","pattern":"^[0-9]+$","description":"The identifier of the user."}}},"SyntaxError":{"type":"object","description":"Is returned as part of an HTTP error response whenever a syntax error is detected. A list of the fields together with their syntax error will be provided.","properties":{"invalidFields":{"type":"array","items":{"type":"object","properties":{"params":{"type":"array","items":{"type":"string"}},"fieldName":{"type":"string"},"error":{"type":"string","enum":["REQUIRED","HAS_TEXT","REQUIRES","SIZE","RANGE","IN","NOT_IN","REGEX","EXACTLY","AT_LEAST","AT_MOST","ALL_OR_NONE"]}}}}}},"UserIdentity":{"required":["id","name"],"type":"object","properties":{"id":{"description":"The unique identifier of the Corporate Identity.","$ref":"#/components/schemas/IdentityId"},"name":{"type":"string","description":"The name of the company."}}},"PasswordInfo":{"required":["identityId"],"type":"object","description":"Additional information related to the user's password.","properties":{"identityId":{"description":"The identity to which the user's password information belongs to.","$ref":"#/components/schemas/IdentityId"},"expiryDate":{"minimum":0,"type":"integer","format":"int64","description":"The millisecond timestamp indicating when the password will expire. If 0, then this password will not expire."}}},"TokenResponse":{"type":"object","properties":{"token":{"type":"string","description":"An authorisation token to be used in the Authorization header for secured operations."}}},"SCAFactor":{"type":"object","properties":{"type":{"$ref":"#/components/schemas/SCAChallengeType"},"status":{"$ref":"#/components/schemas/SCAFactorStatus"},"channel":{"$ref":"#/components/schemas/SCAChannel"}}},"User":{"required":["id","email","name","surname","identity","active"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of the user."},"identity":{"description":"The identity that the user belongs to.","$ref":"#/components/schemas/IdentityId"},"name":{"maxLength":100,"type":"string","description":"The first name of the user."},"surname":{"maxLength":100,"type":"string","description":"The last name of the user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"active":{"type":"boolean","description":"The state of the user. If the `active` attribute is false, then the user will not be able to log in."},"dateOfBirth":{"description":"Date of birth of the authorised user.","$ref":"#/components/schemas/Date"}}},"CreatedCorporate":{"allOf":[{"$ref":"#/components/schemas/Corporate"},{"type":"object","required":["rootUser"],"properties":{"rootUser":{"description":"The root user of the Corporate Identity.","$ref":"#/components/schemas/CreatedCorporateRootUser"}}}]},"Corporate":{"required":["id","profileId","rootUser","company","acceptedTerms","ipAddress","baseCurrency","creationTimestamp"],"type":"object","properties":{"id":{"description":"The unique identifier of the Corporate Identity.","$ref":"#/components/schemas/IdentityId"},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"description":"The root user of the Corporate Identity.","$ref":"#/components/schemas/CorporateRootUser"},"company":{"required":["name","type","countryOfRegistration"],"type":"object","properties":{"name":{"maxLength":100,"type":"string","description":"The registered name of the company."},"type":{"$ref":"#/components/schemas/CompanyType"},"registrationNumber":{"maxLength":20,"minLength":1,"type":"string","description":"The company registration number."},"registeredAddress":{"$ref":"#/components/schemas/LegalAddress"},"businessAddress":{"description":"The address where the business is based.","$ref":"#/components/schemas/Address"},"countryOfRegistration":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"The country of company registration in ISO 3166 alpha-2."},"incorporatedOn":{"description":"The company's date of incorporation","$ref":"#/components/schemas/Date"}}},"industry":{"$ref":"#/components/schemas/Industry"},"sourceOfFunds":{"$ref":"#/components/schemas/CorporateSourceOfFunds"},"sourceOfFundsOther":{"type":"string","description":"Description of source of funds in case `OTHER` was chosen.","deprecated":true},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the root user has accepted the terms and conditions."},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the user doing the registration."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when the Corporate was created, expressed in Epoch timestamp using millisecond precision."}}},"KyiStatus":{"type":"string","enum":["NOT_STARTED","INITIATED","PENDING_REVIEW","APPROVED","REJECTED"]},"ChargeFee":{"required":["transactionId","profileId","feeType","source","destination"],"type":"object","properties":{"transactionId":{"$ref":"#/components/schemas/TransactionId","description":"The unique identifier of the transaction."},"profileId":{"type":"string","description":"The profile Id which a specific identity, instrument or transaction type is linked to."},"feeType":{"type":"string","description":"The fee type as defined in the Multi Portal, and as sent in the request."},"source":{"$ref":"#/components/schemas/InstrumentId"},"availableBalanceAdjustment":{"$ref":"#/components/schemas/CurrencyAmount","description":"The object representing a monetary amount in a particular currency."},"state":{"$ref":"#/components/schemas/TransactionState","description":"The transaction entry state."},"creationTimestamp":{"type":"integer","format":"int64"}}},"Consumer":{"required":["id","profileId","rootUser","ipAddress","acceptedTerms","creationTimestamp"],"type":"object","properties":{"id":{"description":"The unique identifier of the Consumer Identity.","$ref":"#/components/schemas/IdentityId"},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"rootUser":{"description":"The root user of the Consumer Identity.","$ref":"#/components/schemas/ConsumerRootUser"},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when this consumer was created, expressed in Epoch timestamp using millisecond precision."},"ipAddress":{"maxLength":45,"minLength":5,"type":"string","description":"The IP address of the consumer user doing the registration."},"acceptedTerms":{"type":"boolean","description":"Must be set to *true* to indicate that the consumer root user has accepted the terms and conditions."},"baseCurrency":{"$ref":"#/components/schemas/Currency"},"feeGroup":{"type":"string","description":"The fee group which the consumer is bound to."},"sourceOfFunds":{"$ref":"#/components/schemas/ConsumerSourceOfFunds"},"sourceOfFundsOther":{"type":"string","description":"Description of source of funds in case `OTHER` was chosen.","deprecated":true}}},"ManagedAccount":{"required":["id","profileId","friendlyName","currency","balances","creationTimestamp","state"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of a Managed Account."},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"friendlyName":{"minLength":1,"maxLength":50,"type":"string","description":"The friendly name given to the managed account."},"currency":{"$ref":"#/components/schemas/Currency"},"balances":{"$ref":"#/components/schemas/ManagedInstrumentBalance"},"state":{"$ref":"#/components/schemas/ManagedInstrumentState"},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when the managed account was created, expressed in Epoch timestamp using millisecond precision."}}},"ManagedAccountIBAN":{"required":["state","bankAccountDetails"],"type":"object","properties":{"state":{"type":"string","description":"The state of the Managed Account's IBAN as follows:\n  - UNALLOCATED: The Managed Account has never been assigned an IBAN. Use the _managedAccountsIBANUpgrade_ operation to assign an IBAN to a Managed Account.\n  - PENDING_ALLOCATION: The IBAN is being allocated to the Managed Account.\n  - ALLOCATED: An IBAN is allocated to the Managed Account.\n","enum":["UNALLOCATED","PENDING_ALLOCATION","ALLOCATED"]},"bankAccountDetails":{"description":"A list of bank account details associated with the IBAN.\nMultiple details can be provided if multiple IBAN providers are supported by your payment model.","type":"array","items":{"required":["beneficiaryNameAndSurname","beneficiaryBank","beneficiaryBankAddress","type","details"],"type":"object","properties":{"beneficiaryNameAndSurname":{"type":"string","description":"The beneficiary name and surname details to be used when initiating a deposit onto the IBAN."},"beneficiaryBank":{"type":"string","description":"The beneficiary bank name to be used when initiating a deposit onto the IBAN."},"beneficiaryBankAddress":{"type":"string","description":"The beneficiary bank address to be used when initiating a deposit onto the IBAN."},"paymentReference":{"type":"string","description":"A reference required by the partner bank to execute a deposit on the managed account.\n\n\nIf provided, make sure that this is included as part of the wire transfer details when initiating a deposit.\n"},"details":{"description":"The bank details required to initiate a deposit on the managed account.\n\nThe details required to deposit on the IBAN vary depending on the wire transfer channel that will be used.\n","anyOf":[{"$ref":"#/components/schemas/SepaBankDetails"},{"$ref":"#/components/schemas/FasterPaymentsBankDetails"},{"$ref":"#/components/schemas/SwiftBankDetails"}]}}}}}},"Statement":{"type":"object","description":"The list of statement entries.","properties":{"entry":{"type":"array","items":{"$ref":"#/components/schemas/StatementEntry"}},"count":{"type":"integer","description":"The total number of records (excluding the paging limit).","format":"int32"},"responseCount":{"type":"integer","description":"The total number of records returned in this response.","format":"int32"}}},"StatementEntry":{"required":["transactionAmount","entryState","transactionId","processedTimestamp"],"type":"object","properties":{"transactionId":{"description":"The unique identifier of the transaction.","$ref":"#/components/schemas/TransactionId"},"entryState":{"$ref":"#/components/schemas/StatementEntryState"},"originalAmount":{"description":"The transaction amount as originally requested. The original amount currency may be different from the currency of the instrument.\n\nIn case of purchases, this will indicate the original currency and amount that the merchant requested.\n","$ref":"#/components/schemas/CurrencyAmount"},"forexRate":{"description":"If the `originalAmount` is in a different currency from the instrument's currency, the forex rate used will be provided.","$ref":"#/components/schemas/ScaledAmount"},"transactionAmount":{"description":"The transaction amount in the instrument's currency.","$ref":"#/components/schemas/CurrencyAmount"},"availableBalanceAdjustment":{"description":"The amount of funds credited or debited on the available balance of the instrument.","$ref":"#/components/schemas/CurrencyAmount"},"actualBalanceAdjustment":{"description":"The amount of funds credited or debited on the actual balance of the instrument.","$ref":"#/components/schemas/CurrencyAmount"},"balanceAfter":{"description":"The balance of the instrument after the transaction was executed.","$ref":"#/components/schemas/CurrencyAmount"},"availableBalanceAfter":{"description":"The available balance of the instrument after the transaction was executed.","$ref":"#/components/schemas/CurrencyAmount"},"actualBalanceAfter":{"description":"The actual balance of the instrument after the transaction was executed.","$ref":"#/components/schemas/CurrencyAmount"},"transactionFee":{"description":"The fee amount that was captured for you (Multi account owner). You can set fees to be taken during transactions in the Multi Portal.","$ref":"#/components/schemas/CurrencyAmount"},"cardholderFee":{"description":"The fee amount that was captured for you (Multi account owner). You can set fees to be taken during transactions in the Multi Portal. This field is deprecated - use `transactionFee` instead.","$ref":"#/components/schemas/CurrencyAmount"},"processedTimestamp":{"type":"integer","format":"int64","description":"The timestamp when the transaction was processed by the system, expressed in Epoch timestamp using millisecond precision."},"sourceAmount":{"description":"The source amount of the transaction, if the transaction involves forex.","$ref":"#/components/schemas/CurrencyAmount"},"additionalFields":{"type":"object","additionalProperties":{"type":"string"},"description":"A Map of additional fields. Possible values include fee information. The possible entries are `merchantName`, `merchantCategoryCode`, `merchantTerminalCountry`, `sourceInstrumentType`, `sourceInstrumentId`, `destinationInstrumentType`, `destinationInstrumentId`, `forexPaddingCurrency`, `forexPaddingAmount`, `note`, `sourceInstrumentFriendlyName`, `destinationInstrumentFriendlyName`, `sourceIdentityType`, `sourceIdentityId`, `sourceIdentityName`, `destinationIdentityType`, `destinationIdentityId`, `destinationIdentityName`, `exchangeRate`, `authorisationState`, `authorisationRelatedId`, `settlementRelatedId`, `chargeFeeType`, `relatedTransactionId`, `relatedTransactionIdType`, `beneficiaryName`, `beneficiaryAccount`, `beneficiaryBankCode`, `merchantId`, `merchantTransactionType`, `systemTransactionType`, `authorisationCode`, `relatedCardId`, `sender`, `forexFeeCurrency`, `forexFeeAmount`, `senderIban`, `senderReference`, `mandateId`, `merchantReference`, `description`, `declineReason` and `spendRuleFailedReason`."}}},"ManagedCard":{"required":["externalHandle","cardBrand","cardLevelClassification","creationTimestamp","currency","expiryPeriodMonths","friendlyName","id","nameOnCard","profileId","renewalType","type","cardholderMobileNumber","mode","state"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of the card."},"profileId":{"$ref":"#/components/schemas/ProfileId"},"externalHandle":{"type":"string","description":"A uniquely generated code used to identify a card.\n\nThis code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket.\n"},"tag":{"$ref":"#/components/schemas/Tag"},"friendlyName":{"maxLength":50,"minLength":1,"type":"string","description":"The friendly name given to the card."},"currency":{"$ref":"#/components/schemas/Currency"},"state":{"$ref":"#/components/schemas/ManagedInstrumentState"},"type":{"type":"string","description":"The type of card:\n  - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.\n  - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals.\n","enum":["VIRTUAL","PHYSICAL"]},"cardBrand":{"type":"string","description":"The card scheme, or brand of the card.","enum":["MASTERCARD","VISA"]},"cardNumber":{"$ref":"#/components/schemas/SensitiveCardNumber"},"cvv":{"$ref":"#/components/schemas/SensitiveCvv"},"cardNumberFirstSix":{"maxLength":6,"minLength":6,"pattern":"^[0-9]*$","type":"string","description":"The first six digits of the card number."},"cardNumberLastFour":{"maxLength":4,"minLength":4,"pattern":"^[0-9]*$","type":"string","description":"The last four digits of the card number."},"nameOnCard":{"maxLength":27,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"The name on card. If the card is a physical card, this is printed on the card."},"startMmyy":{"maxLength":4,"minLength":4,"pattern":"^[0-9]*$","type":"string","description":"The start date of this card, in MMYY format."},"expiryMmyy":{"maxLength":4,"minLength":4,"type":"string","description":"The end date of this card, in MMYY format."},"cardLevelClassification":{"type":"string","enum":["CONSUMER","CORPORATE"],"description":"The card classification determines whether the card is from Consumer or Corporate BINs."},"expiryPeriodMonths":{"maximum":120,"minimum":1,"type":"integer","format":"int32","description":"The validity timeframe of the card, in months."},"renewalType":{"type":"string","description":"Indicates how card will be handled once it is close to expiring.\n  - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.\n  - NO_RENEW: Once the expiry date is reached, the card is destroyed.\n","enum":["AUTO_RENEW","NO_RENEW"]},"creationTimestamp":{"type":"integer","format":"int64","description":"The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision."},"cardholderMobileNumber":{"maxLength":20,"minLength":5,"pattern":"^\\\\+[0-9]+$","type":"string","description":"The mobile number including country code of the card holder, needed for 3DS challenge."},"billingAddress":{"description":"The billing address set for the cardholder. This can be checked by the merchant during online purchases.","$ref":"#/components/schemas/Address"},"physicalCardDetails":{"$ref":"#/components/schemas/PhysicalCardDetails"},"digitalWallets":{"$ref":"#/components/schemas/DigitalWallets"},"mode":{"type":"string","description":"The mode with which this card was created:\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"}},"discriminator":{"propertyName":"mode","mapping":{"PREPAID_MODE":"#/components/schemas/PrepaidModeCard","DEBIT_MODE":"#/components/schemas/DebitModeCard"}}},"AllLevelSpendRules":{"type":"object","properties":{"allowedMerchantCategories":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCategories\" instead."},"blockedMerchantCategories":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCategories\" instead."},"allowedMerchantIds":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantIds\" instead."},"blockedMerchantIds":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantIds\" instead."},"allowedMerchantCountries":{"type":"array","maxItems":50,"items":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]{2}$","type":"string"},"description":"Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCountries\" instead."},"blockedMerchantCountries":{"type":"array","maxItems":50,"items":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]{2}$","type":"string"},"description":"Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCountries\" instead."},"allowContactless":{"type":"boolean","description":"Indicates if a contactless transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowContactless\" instead."},"allowAtm":{"type":"boolean","description":"Indicates if an ATM Withdrawal transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowAtm\" instead."},"allowECommerce":{"type":"boolean","description":"Indicates if an online transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowECommerce\" instead."},"allowCashback":{"type":"boolean","description":"Indicates if a cashback transaction at a physical terminal is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead."},"allowCreditAuthorisations":{"type":"boolean","description":"Indicates if a the card can receive a credit transaction. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead."},"minTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"minTransactionAmount\" instead."},"maxTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"maxTransactionAmount\" instead."},"spendLimit":{"description":"The total amount of funds that can be spent using this card, in a given time interval. This field is deprecated - use \"cardLevelSpendRules\".\"spendLimit\" instead.","type":"array","items":{"$ref":"#/components/schemas/SpendLimit"}},"cardLevelSpendRules":{"$ref":"#/components/schemas/CardLevelSpendRules"},"profileLevelSpendRules":{"$ref":"#/components/schemas/ProfileLevelSpendRules"},"identityLevelSpendRules":{"$ref":"#/components/schemas/IdentityLevelSpendRules"}}},"Transfer":{"required":["id","profileId","creationTimestamp","destination","destinationAmount","source","state"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of a Transfer transaction."},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"source":{"description":"The source managed account or card from where the funds were transferred.","$ref":"#/components/schemas/InstrumentId"},"destination":{"description":"The destination managed account or card to where the funds were transferred.","$ref":"#/components/schemas/InstrumentId"},"destinationAmount":{"description":"The amount, in same currency as source and destination, that was transferred from the source to the destination instrument.","$ref":"#/components/schemas/CurrencyAmount"},"state":{"$ref":"#/components/schemas/TransactionState"},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."}}},"Send":{"required":["id","profileId","creationTimestamp","source","destination","destinationAmount","state"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of a send transaction."},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"source":{"description":"The source managed account or card from where the funds were sent.","$ref":"#/components/schemas/InstrumentId"},"destination":{"description":"The destination managed account or card to where the funds were sent.","$ref":"#/components/schemas/InstrumentId"},"destinationAmount":{"description":"The amount, in same currency as source and destination, that was sent from the source to the destination instrument.","$ref":"#/components/schemas/CurrencyAmount"},"state":{"$ref":"#/components/schemas/SendState"},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."}}},"OutgoingWireTransfer":{"required":["id","profileId","creationTimestamp","destination","sourceInstrument","transferAmount","state","type"],"type":"object","properties":{"id":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of an Outgoing Wire Transfer transaction."},"profileId":{"$ref":"#/components/schemas/ProfileId"},"tag":{"$ref":"#/components/schemas/Tag"},"sourceInstrument":{"required":["type","id"],"type":"object","description":"The source managed account from where the funds were taken.","properties":{"type":{"type":"string","enum":["managed_accounts"]},"id":{"type":"string","pattern":"^[0-9]+$"}}},"transferAmount":{"description":"The amount, in same currency as source and destination, that was transferred from the source.","$ref":"#/components/schemas/CurrencyAmount"},"description":{"maxLength":50,"type":"string","description":" Transaction description."},"type":{"type":"string","description":"The wire transfer rails used, from SEPA, Faster Payments or SWIFT.","enum":["SEPA","FASTER_PAYMENTS","SWIFT"]},"destination":{"$ref":"#/components/schemas/OutgoingWireTransferBeneficiary"},"state":{"$ref":"#/components/schemas/OutgoingWireTransferState"},"rejectedInfo":{"$ref":"#/components/schemas/OutgoingWireTransferRejectedInfo"},"creationTimestamp":{"type":"integer","format":"int64","description":"The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."}}},"CardAuthorisationDetailsAuthorisationType":{"type":"string","enum":["AUTHORISED","AUTHORISED_CREDIT"]},"MerchantData":{"required":["merchantName","merchantCategoryCode"],"type":"object","properties":{"merchantName":{"type":"string","description":"The name of the merchant where the authorisation has been made."},"merchantCategoryCode":{"type":"string","description":"The merchant category code."},"merchantId":{"type":"string","description":"The merchant ID."},"merchantDescription":{"type":"string","description":"The merchant description"},"merchantStreet":{"type":"string","description":"The merchant street address (if available)"},"merchantCity":{"type":"string","description":"The merchant city (if available)"},"merchantState":{"type":"string","description":"The merchant state address (if available)"},"merchantPostalCode":{"type":"string","description":"The merchant postal code (if available)"},"merchantCountry":{"type":"string","description":"The merchant country address"},"merchantTelephone":{"type":"string","description":"The merchant telephone number"},"merchantURL":{"type":"string","description":"The merchant URL"},"merchantNameOther":{"type":"string","description":"The alternative merchant name"},"merchantNetworkId":{"type":"string","description":"The merchant's network id"},"merchantContact":{"type":"string","description":"The merchant's contact (if available)"}}},"CardHolderPresent":{"type":"string","enum":["PRESENT","NOT_PRESENT","PRESENCE_UNKNOWN"]},"PrepaidModeCardAuthorisationEvent":{"allOf":[{"$ref":"#/components/schemas/CardAuthorisationEvent"},{"type":"object","required":["currency"],"properties":{"availableBalance":{"description":"The card available balance before this authorisation is processed.","$ref":"#/components/schemas/CurrencyAmount"}}}]},"DebitModeCardAuthorisationEvent":{"allOf":[{"$ref":"#/components/schemas/CardAuthorisationEvent"},{"type":"object","required":["parentManagedAccountId"],"properties":{"parentManagedAccountId":{"type":"string","description":"Id of the managed account holding funds which the managed card can access, up to a configurable spend limit."},"availableToSpend":{"type":"array","description":"The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval, _before_ this transaction is performed.","items":{"$ref":"#/components/schemas/AvailableToSpend"}}}}]},"PrepaidModeCardRequest":{"allOf":[{"$ref":"#/components/schemas/ManagedCardRequest"},{"type":"object","required":["currency"],"properties":{"currency":{"$ref":"#/components/schemas/Currency"}}}]},"DebitModeCardRequest":{"allOf":[{"$ref":"#/components/schemas/ManagedCardRequest"},{"type":"object","required":["parentManagedAccountId"],"properties":{"parentManagedAccountId":{"type":"string","pattern":"^[0-9]+$","description":"Id of the managed account holding funds which the managed card will access, up to a configurable spend limit."}}}]},"BaseCardLevelSpendRules":{"allOf":[{"$ref":"#/components/schemas/CommonLevelSpendRules"},{"type":"object","properties":{"spendLimit":{"description":"The total amount of funds that can be spent using this card, in a given time interval.","type":"array","items":{"$ref":"#/components/schemas/SpendLimit"}}}}]},"SepaBankDetails":{"required":["iban","bankIdentifierCode"],"type":"object","description":"Bank details used in case the wire transfer is executed over SEPA.","properties":{"iban":{"type":"string","minLength":15,"maxLength":34,"pattern":"^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{11,30}$","description":"International Bank Account Number, required for wire transfer over SEPA."},"bankIdentifierCode":{"type":"string","minLength":8,"maxLength":11,"pattern":"^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$","description":"BIC, required for wire transfer over SEPA."}}},"FasterPaymentsBankDetails":{"required":["accountNumber","sortCode"],"type":"object","description":"Bank details used in case the wire transfer is executed over Faster Payments.","properties":{"accountNumber":{"type":"string","minLength":8,"maxLength":8,"pattern":"^[0-9]{8}$","description":"Account number, required for wire transfer over Faster Payments."},"sortCode":{"type":"string","minLength":6,"maxLength":6,"pattern":"^[0-9]{6}$","description":"Sort code, required for wire transfer over Faster Payments."}}},"SCAChallengeType":{"type":"string","enum":["OTP","PUSH","BIOMETRIC"],"description":"- \"OTP\": The OTP is sent as a text message\n- \"PUSH\": The authorisation request is sent as a push notification\n- \"BIOMETRIC\": The push notification is sent via Firebase to a mobile application\n"},"SCAFactorStatus":{"type":"string","description":"The state of the factor type.\n- `PENDING_VERIFICATION` : The user has started the enrolment process but still hasn't completed enrolment. Challenges cannot be used before they are verified.\n- `ACTIVE` : The user has successfully completed enrolment and the challenge can be used to verify transactions.\n- `INACTIVE` : The user has rejected the enrolment.\n","enum":["PENDING_VERIFICATION","ACTIVE","INACTIVE"]},"SCAChannel":{"type":"string","enum":["SMS","AUTHY","BIOMETRIC"],"description":"- \"SMS\": The one-time-password is sent as a text message\n- \"AUTHY\": The push notification is sent to an Authy application\n- \"BIOMETRIC\": The push notification is sent to an innovator application\n"},"CreatedCorporateRootUser":{"allOf":[{"$ref":"#/components/schemas/CorporateRootUser"},{"type":"object","required":["passwordAlreadySet"],"properties":{"passwordAlreadySet":{"type":"boolean","description":"When the corporate root user is a single email multiple identities user, this field returns true, indicating that there is no need to call the `passwordCreate` operation for this user."}}}]},"CorporateRootUser":{"required":["id","email","name","surname","mobile","active","emailVerified","mobileNumberVerified","companyPosition"],"type":"object","properties":{"id":{"$ref":"#/components/schemas/IdentityId"},"name":{"maxLength":100,"type":"string","description":"First name of the root user."},"surname":{"maxLength":100,"type":"string","description":"Last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"companyPosition":{"$ref":"#/components/schemas/CompanyPosition"},"active":{"type":"boolean","description":"The state of the root user. If false, then the user will not be able to log in."},"emailVerified":{"type":"boolean","description":"Indicates if the root user's email has been verified."},"mobileNumberVerified":{"type":"boolean","description":"Indicates if the root user's mobile number has been verified."},"dateOfBirth":{"description":"Date of birth of the authorised user.","$ref":"#/components/schemas/Date"}}},"LegalAddress":{"required":["addressLine1","city","country"],"type":"object","description":"The legal address of the company. This information is captured via the Due Diligence (KYB) process.","properties":{"addressLine1":{"type":"string"},"addressLine2":{"type":"string"},"city":{"type":"string"},"postCode":{"maxLength":10,"pattern":"^[A-Za-z0-9 -]*$","type":"string"},"state":{"maxLength":50,"type":"string"},"country":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]+$","type":"string","description":"Country of the identity in ISO 3166 alpha-2 format."}}},"TransactionId":{"required":["type","id"],"type":"object","properties":{"type":{"enum":["INSTRUMENT_CREATE","INSTRUMENT_BLOCK","INSTRUMENT_UNBLOCK","INSTRUMENT_DELETE","AUTHORISATION","SETTLEMENT","MANUAL_TRANSACTION","TRANSFER","SEND","DEPOSIT","AUTHORISATION_REVERSAL","AUTHORISATION_EXPIRY","AUTHORISATION_DECLINE","AUTHORISATION_MANUAL_CLOSE","MERCHANT_REFUND","MERCHANT_REFUND_REVERSAL","ORIGINAL_CREDIT_TRANSACTION","SETTLEMENT_REVERSAL","ADJUSTMENT","CHARGE_FEE","WITHDRAWAL_RESERVE","WITHDRAWAL_RELEASE","FEE_REVERSAL","CARD_UPGRADE_TO_PHYSICAL","ACTIVATE_PHYSICAL_CARD","INSTRUMENT_REPLACE","OUTGOING_WIRE_TRANSFER","AUTHORISATION_CANCELLATION","SYSTEM_TRANSACTION","OUTGOING_DIRECT_DEBIT_COLLECTION","OUTGOING_DIRECT_DEBIT_REFUND"],"type":"string"},"id":{"type":"string","pattern":"^[0-9]+$"}}},"ConsumerRootUser":{"required":["id","email","name","surname","active","mobile","emailVerified","mobileNumberVerified"],"type":"object","properties":{"id":{"$ref":"#/components/schemas/IdentityId"},"name":{"maxLength":100,"type":"string","description":"First name of the root user."},"surname":{"maxLength":100,"type":"string","description":"Last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"occupation":{"$ref":"#/components/schemas/Occupation"},"active":{"type":"boolean","description":"The state of the root user. If false, then the user will not be able to log in."},"emailVerified":{"type":"boolean","description":"Indicates if the root user's email has been verified."},"mobileNumberVerified":{"type":"boolean","description":"Indicates if the root user's mobile number has been verified."},"dateOfBirth":{"description":"Date of birth of the consumer root user.","$ref":"#/components/schemas/Date"},"address":{"description":"Address of the consumer root user.","$ref":"#/components/schemas/AddressWithNoRequiredFields"},"nationality":{"description":"Nationality of the consumer root user, in ISO 3166 alpha-2 format.","$ref":"#/components/schemas/Nationality"},"placeOfBirth":{"type":"string","description":"The place of birth of the consumer root user."}}},"ManagedInstrumentBalance":{"type":"object","description":"Instruments with funds have 2 balances, the `availableBalance` indicating the funds that are available for transactions such as purchases, and the `actualBalance` indicating the funds that are actually on the instrument.","properties":{"availableBalance":{"type":"integer","format":"int64","description":"The funds available for transactions on the instrument. Funds that are blocked or pending are not included in the available balance."},"actualBalance":{"type":"integer","format":"int64","description":"The funds that are actually on the instrument. Funds that are blocked or pending, due to for example, a purchase authorisation or a pending deposit, are included in the actual balance."}}},"ManagedInstrumentState":{"required":["state"],"type":"object","properties":{"state":{"$ref":"#/components/schemas/InstrumentState"},"blockedReason":{"$ref":"#/components/schemas/BlockedReason"},"destroyedReason":{"$ref":"#/components/schemas/DestroyedReason"}}},"SwiftBankDetails":{"required":["iban","code"],"type":"object","description":"Bank details used in case the wire transfer is executed over SWIFT.","properties":{"iban":{"type":"string","minLength":1,"maxLength":34,"pattern":"^[a-zA-Z0-9]{1,34}$","description":"International Bank Account Number, required for wire transfer over SWIFT."},"code":{"type":"string","minLength":8,"maxLength":11,"pattern":"^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$","description":"SWIFT code, identifying a particular bank or branch, required for wire transfer over SWIFT."}}},"StatementEntryState":{"type":"string","description":"The transaction entry state, as follows:\n  - PENDING: The transaction has started and some of the fund movements have completed, however additional fund movements are still pending to finalise the transaction.\n  - COMPLETED: All fund movements for a transaction have completed.\n","enum":["PENDING","COMPLETED"]},"ScaledAmount":{"type":"object","properties":{"value":{"type":"integer","format":"int64"},"scale":{"maximum":127,"minimum":-128,"type":"integer","format":"int32"}},"description":"A floating point number, represented as a value and its scale. Its actual value can be obtained using the equation: value * pow(10, -scale)."},"SensitiveCardNumber":{"type":"object","description":"The full card number of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card number will be tokenised.\n\nTo show the full unredacted card number to your user, you need to embed the Card number UI Component in your application. This accepts the tokenised card number and shows the unredacted card number to the user on screen.\n","properties":{"value":{"maxLength":16,"type":"string"}}},"SensitiveCvv":{"type":"object","description":"The CVV of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.\n\nTo show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen.\n","properties":{"value":{"maxLength":3,"type":"string"}}},"PhysicalCardDetails":{"required":["pendingActivation"],"type":"object","properties":{"productReference":{"type":"string","description":"The unique reference indicating the configuration of the physical card. Example the card design."},"carrierType":{"type":"string"},"pendingActivation":{"type":"boolean","description":"Indicates if the physical card is activated for physical usage such as with physical terminals."},"pinBlocked":{"type":"boolean","description":"Indicates if the physical card is blocked due to providing incorrect PINs."},"manufacturingState":{"$ref":"#/components/schemas/ManufacturingState"},"replacement":{"type":"object","description":"Indicates if the physical card is replaced by another card.","properties":{"replacementReason":{"type":"string","description":"The reason why the physical card was replaced.\n  - DAMAGED: The physical card was damaged and cannot be used at a physical terminal.\n  - LOST_STOLEN: The physical card was either lost or stolen and cannot be used.\n  - EXPIRED: The physical card expired.\n","enum":["DAMAGED","LOST_STOLEN","EXPIRED"]},"replacementId":{"type":"string","pattern":"^[0-9]+$","description":"The unique identifier of the new card that replaces this card."}}},"deliveryAddress":{"$ref":"#/components/schemas/DeliveryAddress"},"deliveryMethod":{"$ref":"#/components/schemas/DeliveryMethod"},"deliveryTrackingCode":{"$ref":"#/components/schemas/DeliveryTrackingCode"},"deliveryTrackingMethod":{"$ref":"#/components/schemas/DeliveryTrackingMethod"},"nameOnCardLine2":{"maxLength":27,"pattern":"^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$","type":"string","description":"Line 2 of the 'name on card' field. This will be printed on the card."}}},"PrepaidModeCard":{"allOf":[{"$ref":"#/components/schemas/ManagedCard"},{"type":"object","properties":{"balances":{"$ref":"#/components/schemas/ManagedInstrumentBalance"}}}]},"DebitModeCard":{"allOf":[{"$ref":"#/components/schemas/ManagedCard"},{"type":"object","required":["parentManagedAccountId"],"properties":{"parentManagedAccountId":{"type":"string","pattern":"^[0-9]+$","description":"Id of the managed account holding funds which the managed card will access, up to a configurable spend limit."},"availableToSpend":{"description":"The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval.","type":"array","items":{"$ref":"#/components/schemas/AvailableToSpend"}}}}]},"SpendLimit":{"type":"object","required":["value","interval"],"properties":{"value":{"description":"The spend limit, as amount and currency, (for the given interval).","$ref":"#/components/schemas/CurrencyAmount"},"interval":{"$ref":"#/components/schemas/SpendLimitInterval"}}},"ProfileLevelSpendRules":{"allOf":[{"$ref":"#/components/schemas/CommonLevelSpendRules"},{"type":"object","properties":{}}]},"IdentityLevelSpendRules":{"allOf":[{"$ref":"#/components/schemas/CommonLevelSpendRules"},{"type":"object","properties":{"minTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set."},"maxTransactionAmount":{"type":"integer","minimum":0,"format":"int64","description":"The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined."}}}]},"OutgoingWireTransferRejectedInfo":{"description":"Additional info when the outgoing wire transfer has been rejected, as follows:\n  - SYSTEM: The wire transfer was rejected by the system.\n  - USER: The wire transfer was rejected by the user.\n","type":"string","enum":["SYSTEM","USER"]},"AvailableToSpend":{"type":"object","properties":{"value":{"description":"The amount and currency that is available to spend, (for the given interval).","$ref":"#/components/schemas/CurrencyAmount"},"interval":{"$ref":"#/components/schemas/SpendLimitInterval"}}},"RootUserRequest":{"type":"object","description":"The root user represents the identity.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC, as part of the Consumer's due diligence process.\n","properties":{"name":{"type":"string","description":"The first name of the root user."},"surname":{"type":"string","description":"The last name of the root user."},"email":{"$ref":"#/components/schemas/Email"},"mobile":{"$ref":"#/components/schemas/Mobile"},"dateOfBirth":{"description":"Date of birth of the consumer root user.","$ref":"#/components/schemas/Date"},"occupation":{"$ref":"#/components/schemas/Occupation"},"address":{"description":"Address of the consumer root user.","$ref":"#/components/schemas/AddressWithNoRequiredFields"},"placeOfBirth":{"type":"string","description":"Place of birth of the consumer root user."},"nationality":{"description":"Nationality of the root user, in ISO 3166 alpha-2 format.\"","$ref":"#/components/schemas/Nationality"}}},"CommonLevelSpendRules":{"type":"object","properties":{"allowedMerchantCategories":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence."},"blockedMerchantCategories":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence."},"allowedMerchantIds":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence."},"blockedMerchantIds":{"type":"array","maxItems":50,"items":{"type":"string"},"description":"Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence."},"allowedMerchantCountries":{"type":"array","maxItems":50,"items":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]{2}$","type":"string"},"description":"Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence."},"blockedMerchantCountries":{"type":"array","maxItems":50,"items":{"maxLength":2,"minLength":2,"pattern":"^[A-Z]{2}$","type":"string"},"description":"Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence."},"allowContactless":{"type":"boolean","description":"Indicates if a contactless transaction is allowed on the card."},"allowAtm":{"type":"boolean","description":"Indicates if an ATM Withdrawal transaction is allowed on the card."},"allowECommerce":{"type":"boolean","description":"Indicates if an online transaction is allowed on the card."},"allowCashback":{"type":"boolean","description":"Indicates if a cashback transaction at a physical terminal is allowed on the card."},"allowCreditAuthorisations":{"type":"boolean","description":"Indicates if a the card can receive a credit transaction."}}},"DeliveryTrackingCode":{"type":"string","description":"The delivery tracking code for tracking the physical card's delivery status."},"DeliveryTrackingMethod":{"type":"string","description":"The delivery tracking method for tracking the physical card's delivery status."},"SpendLimitInterval":{"description":"The time period for which the `spendLimit` is valid.\n - DAILY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day\n - WEEKLY: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC\n - MONTHLY: 1st of current calendar month to end of current calendar month\n - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows:\n  - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC\n  - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC\n  - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC\n  - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC\n\n- YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year.\n- ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card.\n","type":"string","enum":["DAILY","WEEKLY","MONTHLY","QUARTERLY","YEARLY","ALWAYS"]}},"headers":{"request-ref":{"description":"A request identifier. Providing this reference when contacting our support team will help us investigate your query.","required":true,"schema":{"type":"string"}},"x-ratelimit-limit":{"description":"Example: `20, 10;w=60, 20;w=3600, 200;w=86400`\nThe first number (20) is the limit that has been exceeded.\nThe remaining numbers are the limits that are in force, with 'w' meaning 'window in seconds'. In this example `20;w=3600` was exceeded. 20 calls in 3600secs (1hr)\n","required":true,"schema":{"type":"string"}},"x-ratelimit-reset":{"description":"The number of seconds until the window is reset.","required":true,"schema":{"minimum":0,"type":"integer","format":"int32"}}},"securitySchemes":{"api_key":{"type":"apiKey","description":"The API Key representing your Multi account. You can find your API Key in your Multi Portal in the API Credentials page.","name":"api-key","in":"header"},"auth_token":{"type":"http","description":"The authentication token representing the user. This will be included in the login response object.","scheme":"bearer","bearerFormat":"JWT"}}}}
